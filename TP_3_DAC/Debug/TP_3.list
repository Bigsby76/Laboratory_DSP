
TP_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009550  08009550  00019550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009574  08009574  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08009574  08009574  00019574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800957c  0800957c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800957c  0800957c  0001957c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08009584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000adc  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b6c  20000b6c  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe74  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043a3  00000000  00000000  0003ff34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016f0  00000000  00000000  000442d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001550  00000000  00000000  000459c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263d3  00000000  00000000  00046f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e2ee  00000000  00000000  0006d2eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e039d  00000000  00000000  0008b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016b976  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006320  00000000  00000000  0016b9cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009538 	.word	0x08009538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08009538 	.word	0x08009538

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_ADC_ConvCpltCallback>:
#define DMA_BUFFER_SIZE 16
uint16_t adcBuffer[256];
uint16_t dmaBuffer[DMA_BUFFER_SIZE];

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	//static uint8_t index = 0;
	//adcBuffer[index++] = HAL_ADC_GetValue(hadc);
	//adcBuffer[index++] = dmaBuffer[0] + dmaBuffer[1] + ....;
	uint16_t adcSum = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<DMA_BUFFER_SIZE;i++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	737b      	strb	r3, [r7, #13]
 80004d0:	e009      	b.n	80004e6 <HAL_ADC_ConvCpltCallback+0x26>
		adcSum += dmaBuffer[i];
 80004d2:	7b7b      	ldrb	r3, [r7, #13]
 80004d4:	4a0a      	ldr	r2, [pc, #40]	; (8000500 <HAL_ADC_ConvCpltCallback+0x40>)
 80004d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004da:	89fb      	ldrh	r3, [r7, #14]
 80004dc:	4413      	add	r3, r2
 80004de:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<DMA_BUFFER_SIZE;i++)
 80004e0:	7b7b      	ldrb	r3, [r7, #13]
 80004e2:	3301      	adds	r3, #1
 80004e4:	737b      	strb	r3, [r7, #13]
 80004e6:	7b7b      	ldrb	r3, [r7, #13]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d9f2      	bls.n	80004d2 <HAL_ADC_ConvCpltCallback+0x12>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_L, adcSum);
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	2204      	movs	r2, #4
 80004f0:	2110      	movs	r1, #16
 80004f2:	4804      	ldr	r0, [pc, #16]	; (8000504 <HAL_ADC_ConvCpltCallback+0x44>)
 80004f4:	f001 fb9d 	bl	8001c32 <HAL_DAC_SetValue>
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000414 	.word	0x20000414
 8000504:	200003a0 	.word	0x200003a0

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 fd6e 	bl	8000fec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f82a 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f9d8 	bl	80008c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000518:	f000 f90c 	bl	8000734 <MX_I2C1_Init>
  MX_I2S3_Init();
 800051c:	f000 f938 	bl	8000790 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000520:	f008 fbf8 	bl	8008d14 <MX_USB_HOST_Init>
  MX_DAC_Init();
 8000524:	f000 f8dc 	bl	80006e0 <MX_DAC_Init>
  MX_TIM3_Init();
 8000528:	f000 f962 	bl	80007f0 <MX_TIM3_Init>
  MX_DMA_Init();
 800052c:	f000 f9ac 	bl	8000888 <MX_DMA_Init>
  MX_ADC1_Init();
 8000530:	f000 f884 	bl	800063c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  MX_ADC1_Init();
 8000534:	f000 f882 	bl	800063c <MX_ADC1_Init>

  //HAL_ADC_Start_IT(&hadc1);
  HAL_TIM_Base_Start(&htim3);
 8000538:	4807      	ldr	r0, [pc, #28]	; (8000558 <main+0x50>)
 800053a:	f005 fa59 	bl	80059f0 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800053e:	2110      	movs	r1, #16
 8000540:	4806      	ldr	r0, [pc, #24]	; (800055c <main+0x54>)
 8000542:	f001 fb24 	bl	8001b8e <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)dmaBuffer,DMA_BUFFER_SIZE);
 8000546:	2210      	movs	r2, #16
 8000548:	4905      	ldr	r1, [pc, #20]	; (8000560 <main+0x58>)
 800054a:	4806      	ldr	r0, [pc, #24]	; (8000564 <main+0x5c>)
 800054c:	f000 fe28 	bl	80011a0 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000550:	f008 fc06 	bl	8008d60 <MX_USB_HOST_Process>
 8000554:	e7fc      	b.n	8000550 <main+0x48>
 8000556:	bf00      	nop
 8000558:	20000310 	.word	0x20000310
 800055c:	200003a0 	.word	0x200003a0
 8000560:	20000414 	.word	0x20000414
 8000564:	20000358 	.word	0x20000358

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 0320 	add.w	r3, r7, #32
 8000572:	2230      	movs	r2, #48	; 0x30
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f008 ff0e 	bl	8009398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	2300      	movs	r3, #0
 800058e:	60bb      	str	r3, [r7, #8]
 8000590:	4b28      	ldr	r3, [pc, #160]	; (8000634 <SystemClock_Config+0xcc>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a27      	ldr	r2, [pc, #156]	; (8000634 <SystemClock_Config+0xcc>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xcc>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	60bb      	str	r3, [r7, #8]
 80005a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <SystemClock_Config+0xd0>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a21      	ldr	r2, [pc, #132]	; (8000638 <SystemClock_Config+0xd0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xd0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c4:	2301      	movs	r3, #1
 80005c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ce:	2302      	movs	r3, #2
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005d8:	2308      	movs	r3, #8
 80005da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e6:	2307      	movs	r3, #7
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0320 	add.w	r3, r7, #32
 80005ee:	4618      	mov	r0, r3
 80005f0:	f004 fc0e 	bl	8004e10 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fa:	f000 fa73 	bl	8000ae4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800060e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	2105      	movs	r1, #5
 800061c:	4618      	mov	r0, r3
 800061e:	f004 fe6f 	bl	8005300 <HAL_RCC_ClockConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000628:	f000 fa5c 	bl	8000ae4 <Error_Handler>
  }
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000650:	4a22      	ldr	r2, [pc, #136]	; (80006dc <MX_ADC1_Init+0xa0>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000654:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ADC1_Init+0x9c>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ADC1_Init+0x9c>)
 800066a:	2200      	movs	r2, #0
 800066c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800067c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000680:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000684:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_ADC1_Init+0x9c>)
 800068e:	2201      	movs	r2, #1
 8000690:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000694:	2201      	movs	r2, #1
 8000696:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_ADC1_Init+0x9c>)
 800069c:	2201      	movs	r2, #1
 800069e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <MX_ADC1_Init+0x9c>)
 80006a2:	f000 fd39 	bl	8001118 <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80006ac:	f000 fa1a 	bl	8000ae4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b4:	2301      	movs	r3, #1
 80006b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_ADC1_Init+0x9c>)
 80006c2:	f000 fe91 	bl	80013e8 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80006cc:	f000 fa0a 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000358 	.word	0x20000358
 80006dc:	40012000 	.word	0x40012000

080006e0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006e6:	463b      	mov	r3, r7
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_DAC_Init+0x4c>)
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MX_DAC_Init+0x50>)
 80006f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_DAC_Init+0x4c>)
 80006f6:	f001 fa28 	bl	8001b4a <HAL_DAC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000700:	f000 f9f0 	bl	8000ae4 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800070c:	463b      	mov	r3, r7
 800070e:	2210      	movs	r2, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4806      	ldr	r0, [pc, #24]	; (800072c <MX_DAC_Init+0x4c>)
 8000714:	f001 fab2 	bl	8001c7c <HAL_DAC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800071e:	f000 f9e1 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200003a0 	.word	0x200003a0
 8000730:	40007400 	.word	0x40007400

08000734 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_I2C1_Init+0x50>)
 800073a:	4a13      	ldr	r2, [pc, #76]	; (8000788 <MX_I2C1_Init+0x54>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_I2C1_Init+0x50>)
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_I2C1_Init+0x58>)
 8000742:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_I2C1_Init+0x50>)
 8000752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000756:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_I2C1_Init+0x50>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_I2C1_Init+0x50>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <MX_I2C1_Init+0x50>)
 8000772:	f003 fd69 	bl	8004248 <HAL_I2C_Init>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800077c:	f000 f9b2 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200002bc 	.word	0x200002bc
 8000788:	40005400 	.word	0x40005400
 800078c:	000186a0 	.word	0x000186a0

08000790 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_I2S3_Init+0x54>)
 8000796:	4a14      	ldr	r2, [pc, #80]	; (80007e8 <MX_I2S3_Init+0x58>)
 8000798:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800079a:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_I2S3_Init+0x54>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007a2:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007a8:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <MX_I2S3_Init+0x5c>)
 80007ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_I2S3_Init+0x54>)
 80007d0:	f003 fe7e 	bl	80044d0 <HAL_I2S_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007da:	f000 f983 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000434 	.word	0x20000434
 80007e8:	40003c00 	.word	0x40003c00
 80007ec:	00017700 	.word	0x00017700

080007f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007f6:	f107 0308 	add.w	r3, r7, #8
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800080c:	4b1c      	ldr	r3, [pc, #112]	; (8000880 <MX_TIM3_Init+0x90>)
 800080e:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <MX_TIM3_Init+0x94>)
 8000810:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_TIM3_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000818:	4b19      	ldr	r3, [pc, #100]	; (8000880 <MX_TIM3_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 103;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_TIM3_Init+0x90>)
 8000820:	2267      	movs	r2, #103	; 0x67
 8000822:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_TIM3_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <MX_TIM3_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000830:	4813      	ldr	r0, [pc, #76]	; (8000880 <MX_TIM3_Init+0x90>)
 8000832:	f005 f88d 	bl	8005950 <HAL_TIM_Base_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 800083c:	f000 f952 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000844:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	4619      	mov	r1, r3
 800084c:	480c      	ldr	r0, [pc, #48]	; (8000880 <MX_TIM3_Init+0x90>)
 800084e:	f005 f937 	bl	8005ac0 <HAL_TIM_ConfigClockSource>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000858:	f000 f944 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800085c:	2320      	movs	r3, #32
 800085e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000864:	463b      	mov	r3, r7
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_TIM3_Init+0x90>)
 800086a:	f005 fb2b 	bl	8005ec4 <HAL_TIMEx_MasterConfigSynchronization>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000874:	f000 f936 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000310 	.word	0x20000310
 8000884:	40000400 	.word	0x40000400

08000888 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a0b      	ldr	r2, [pc, #44]	; (80008c4 <MX_DMA_Init+0x3c>)
 8000898:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2100      	movs	r1, #0
 80008ae:	2038      	movs	r0, #56	; 0x38
 80008b0:	f001 f915 	bl	8001ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b4:	2038      	movs	r0, #56	; 0x38
 80008b6:	f001 f92e 	bl	8001b16 <HAL_NVIC_EnableIRQ>

}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	61bb      	str	r3, [r7, #24]
 80008e2:	4b7a      	ldr	r3, [pc, #488]	; (8000acc <MX_GPIO_Init+0x204>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a79      	ldr	r2, [pc, #484]	; (8000acc <MX_GPIO_Init+0x204>)
 80008e8:	f043 0310 	orr.w	r3, r3, #16
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b77      	ldr	r3, [pc, #476]	; (8000acc <MX_GPIO_Init+0x204>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0310 	and.w	r3, r3, #16
 80008f6:	61bb      	str	r3, [r7, #24]
 80008f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
 80008fe:	4b73      	ldr	r3, [pc, #460]	; (8000acc <MX_GPIO_Init+0x204>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a72      	ldr	r2, [pc, #456]	; (8000acc <MX_GPIO_Init+0x204>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b70      	ldr	r3, [pc, #448]	; (8000acc <MX_GPIO_Init+0x204>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b6c      	ldr	r3, [pc, #432]	; (8000acc <MX_GPIO_Init+0x204>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a6b      	ldr	r2, [pc, #428]	; (8000acc <MX_GPIO_Init+0x204>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b69      	ldr	r3, [pc, #420]	; (8000acc <MX_GPIO_Init+0x204>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b65      	ldr	r3, [pc, #404]	; (8000acc <MX_GPIO_Init+0x204>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a64      	ldr	r2, [pc, #400]	; (8000acc <MX_GPIO_Init+0x204>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b62      	ldr	r3, [pc, #392]	; (8000acc <MX_GPIO_Init+0x204>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b5e      	ldr	r3, [pc, #376]	; (8000acc <MX_GPIO_Init+0x204>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a5d      	ldr	r2, [pc, #372]	; (8000acc <MX_GPIO_Init+0x204>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <MX_GPIO_Init+0x204>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b57      	ldr	r3, [pc, #348]	; (8000acc <MX_GPIO_Init+0x204>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a56      	ldr	r2, [pc, #344]	; (8000acc <MX_GPIO_Init+0x204>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b54      	ldr	r3, [pc, #336]	; (8000acc <MX_GPIO_Init+0x204>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	4851      	ldr	r0, [pc, #324]	; (8000ad0 <MX_GPIO_Init+0x208>)
 800098c:	f001 fed2 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	2101      	movs	r1, #1
 8000994:	484f      	ldr	r0, [pc, #316]	; (8000ad4 <MX_GPIO_Init+0x20c>)
 8000996:	f001 fecd 	bl	8002734 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800099a:	2200      	movs	r2, #0
 800099c:	f24f 0110 	movw	r1, #61456	; 0xf010
 80009a0:	484d      	ldr	r0, [pc, #308]	; (8000ad8 <MX_GPIO_Init+0x210>)
 80009a2:	f001 fec7 	bl	8002734 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80009a6:	2308      	movs	r3, #8
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 031c 	add.w	r3, r7, #28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4844      	ldr	r0, [pc, #272]	; (8000ad0 <MX_GPIO_Init+0x208>)
 80009be:	f001 fd1d 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80009c2:	2301      	movs	r3, #1
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	483e      	ldr	r0, [pc, #248]	; (8000ad4 <MX_GPIO_Init+0x20c>)
 80009da:	f001 fd0f 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80009de:	2308      	movs	r3, #8
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e2:	2302      	movs	r3, #2
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ee:	2305      	movs	r3, #5
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	4836      	ldr	r0, [pc, #216]	; (8000ad4 <MX_GPIO_Init+0x20c>)
 80009fa:	f001 fcff 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fe:	2301      	movs	r3, #1
 8000a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a02:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4832      	ldr	r0, [pc, #200]	; (8000adc <MX_GPIO_Init+0x214>)
 8000a14:	f001 fcf2 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000a18:	23c0      	movs	r3, #192	; 0xc0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a28:	2305      	movs	r3, #5
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	482a      	ldr	r0, [pc, #168]	; (8000adc <MX_GPIO_Init+0x214>)
 8000a34:	f001 fce2 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a38:	2304      	movs	r3, #4
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0x218>)
 8000a4c:	f001 fcd6 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a62:	2305      	movs	r3, #5
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481c      	ldr	r0, [pc, #112]	; (8000ae0 <MX_GPIO_Init+0x218>)
 8000a6e:	f001 fcc5 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a72:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000a76:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <MX_GPIO_Init+0x210>)
 8000a8c:	f001 fcb6 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a90:	2320      	movs	r3, #32
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a94:	2300      	movs	r3, #0
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 031c 	add.w	r3, r7, #28
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_GPIO_Init+0x210>)
 8000aa4:	f001 fcaa 	bl	80023fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 031c 	add.w	r3, r7, #28
 8000aba:	4619      	mov	r1, r3
 8000abc:	4804      	ldr	r0, [pc, #16]	; (8000ad0 <MX_GPIO_Init+0x208>)
 8000abe:	f001 fc9d 	bl	80023fc <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3730      	adds	r7, #48	; 0x30
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020400 	.word	0x40020400

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	e7fe      	b.n	8000aec <Error_Handler+0x8>
	...

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	; 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 ffca 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <HAL_ADC_MspInit+0xdc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d157      	bne.n	8000c12 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a2d      	ldr	r2, [pc, #180]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b24      	ldr	r3, [pc, #144]	; (8000c20 <HAL_ADC_MspInit+0xe0>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	481d      	ldr	r0, [pc, #116]	; (8000c24 <HAL_ADC_MspInit+0xe4>)
 8000bae:	f001 fc25 	bl	80023fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bb4:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_ADC_MspInit+0xec>)
 8000bb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bd8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000be0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000be4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000be8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000bf8:	f001 f890 	bl	8001d1c <HAL_DMA_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000c02:	f7ff ff6f 	bl	8000ae4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000c0a:	639a      	str	r2, [r3, #56]	; 0x38
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_ADC_MspInit+0xe8>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012000 	.word	0x40012000
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020000 	.word	0x40020000
 8000c28:	200003b4 	.word	0x200003b4
 8000c2c:	40026410 	.word	0x40026410

08000c30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <HAL_DAC_MspInit+0x7c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d127      	bne.n	8000ca2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b16      	ldr	r3, [pc, #88]	; (8000cb0 <HAL_DAC_MspInit+0x80>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <HAL_DAC_MspInit+0x80>)
 8000c5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <HAL_DAC_MspInit+0x80>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_DAC_MspInit+0x80>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a0e      	ldr	r2, [pc, #56]	; (8000cb0 <HAL_DAC_MspInit+0x80>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_DAC_MspInit+0x80>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c8a:	2320      	movs	r3, #32
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_DAC_MspInit+0x84>)
 8000c9e:	f001 fbad 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000ca2:	bf00      	nop
 8000ca4:	3728      	adds	r7, #40	; 0x28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40007400 	.word	0x40007400
 8000cb0:	40023800 	.word	0x40023800
 8000cb4:	40020000 	.word	0x40020000

08000cb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a19      	ldr	r2, [pc, #100]	; (8000d3c <HAL_I2C_MspInit+0x84>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d12c      	bne.n	8000d34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	4a17      	ldr	r2, [pc, #92]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	613b      	str	r3, [r7, #16]
 8000cf4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000cf6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cfc:	2312      	movs	r3, #18
 8000cfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <HAL_I2C_MspInit+0x8c>)
 8000d14:	f001 fb72 	bl	80023fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_I2C_MspInit+0x88>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08e      	sub	sp, #56	; 0x38
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a31      	ldr	r2, [pc, #196]	; (8000e38 <HAL_I2S_MspInit+0xf0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d15a      	bne.n	8000e2e <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000d7c:	23c0      	movs	r3, #192	; 0xc0
 8000d7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f004 fca1 	bl	80056d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000d94:	f7ff fea6 	bl	8000ae4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d98:	2300      	movs	r3, #0
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	4a26      	ldr	r2, [pc, #152]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da6:	6413      	str	r3, [r2, #64]	; 0x40
 8000da8:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db0:	613b      	str	r3, [r7, #16]
 8000db2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
 8000dd4:	4b19      	ldr	r3, [pc, #100]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6313      	str	r3, [r2, #48]	; 0x30
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <HAL_I2S_MspInit+0xf4>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	60bb      	str	r3, [r7, #8]
 8000dea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000dec:	2310      	movs	r3, #16
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	480e      	ldr	r0, [pc, #56]	; (8000e40 <HAL_I2S_MspInit+0xf8>)
 8000e08:	f001 faf8 	bl	80023fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e1e:	2306      	movs	r3, #6
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	4806      	ldr	r0, [pc, #24]	; (8000e44 <HAL_I2S_MspInit+0xfc>)
 8000e2a:	f001 fae7 	bl	80023fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3738      	adds	r7, #56	; 0x38
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40003c00 	.word	0x40003c00
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020800 	.word	0x40020800

08000e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <HAL_TIM_Base_MspInit+0x3c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d10d      	bne.n	8000e76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	4b0a      	ldr	r3, [pc, #40]	; (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <HAL_TIM_Base_MspInit+0x40>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40000400 	.word	0x40000400
 8000e88:	40023800 	.word	0x40023800

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <NMI_Handler+0x4>

08000e92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <MemManage_Handler+0x4>

08000e9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <BusFault_Handler+0x4>

08000ea4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <UsageFault_Handler+0x4>

08000eaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f000 f8da 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ee4:	4802      	ldr	r0, [pc, #8]	; (8000ef0 <DMA2_Stream0_IRQHandler+0x10>)
 8000ee6:	f001 f81f 	bl	8001f28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	200003b4 	.word	0x200003b4

08000ef4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000ef8:	4802      	ldr	r0, [pc, #8]	; (8000f04 <OTG_FS_IRQHandler+0x10>)
 8000efa:	f001 fe9f 	bl	8002c3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000858 	.word	0x20000858

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f008 f9f4 	bl	8009324 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	; (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20020000 	.word	0x20020000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200000ac 	.word	0x200000ac
 8000f70:	20000b70 	.word	0x20000b70

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f9e:	490e      	ldr	r1, [pc, #56]	; (8000fd8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fa0:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fb4:	4c0b      	ldr	r4, [pc, #44]	; (8000fe4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fc2:	f7ff ffd7 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f008 f9b3 	bl	8009330 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fca:	f7ff fa9d 	bl	8000508 <main>
  bx  lr    
 8000fce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000fdc:	08009584 	.word	0x08009584
  ldr r2, =_sbss
 8000fe0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000fe4:	20000b6c 	.word	0x20000b6c

08000fe8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC_IRQHandler>
	...

08000fec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	; (800102c <HAL_Init+0x40>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <HAL_Init+0x40>)
 8000ff6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ffa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <HAL_Init+0x40>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0a      	ldr	r2, [pc, #40]	; (800102c <HAL_Init+0x40>)
 8001002:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001006:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_Init+0x40>)
 800100e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001012:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001014:	2003      	movs	r0, #3
 8001016:	f000 fd57 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800101a:	2000      	movs	r0, #0
 800101c:	f000 f808 	bl	8001030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001020:	f7ff fd66 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023c00 	.word	0x40023c00

08001030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x54>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_InitTick+0x58>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001046:	fbb3 f3f1 	udiv	r3, r3, r1
 800104a:	fbb2 f3f3 	udiv	r3, r2, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fd6f 	bl	8001b32 <HAL_SYSTICK_Config>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e00e      	b.n	800107c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b0f      	cmp	r3, #15
 8001062:	d80a      	bhi.n	800107a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001064:	2200      	movs	r2, #0
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f000 fd37 	bl	8001ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <HAL_InitTick+0x5c>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	20000000 	.word	0x20000000
 8001088:	20000008 	.word	0x20000008
 800108c:	20000004 	.word	0x20000004

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_IncTick+0x20>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	461a      	mov	r2, r3
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_IncTick+0x24>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4413      	add	r3, r2
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_IncTick+0x24>)
 80010a2:	6013      	str	r3, [r2, #0]
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	20000008 	.word	0x20000008
 80010b4:	2000047c 	.word	0x2000047c

080010b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return uwTick;
 80010bc:	4b03      	ldr	r3, [pc, #12]	; (80010cc <HAL_GetTick+0x14>)
 80010be:	681b      	ldr	r3, [r3, #0]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000047c 	.word	0x2000047c

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff ffee 	bl	80010b8 <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffde 	bl	80010b8 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008

08001118 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e033      	b.n	8001196 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fd02 	bl	8000b40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	2b00      	cmp	r3, #0
 8001154:	d118      	bne.n	8001188 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800115e:	f023 0302 	bic.w	r3, r3, #2
 8001162:	f043 0202 	orr.w	r2, r3, #2
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 fa5e 	bl	800162c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117a:	f023 0303 	bic.w	r3, r3, #3
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	641a      	str	r2, [r3, #64]	; 0x40
 8001186:	e001      	b.n	800118c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
	...

080011a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d101      	bne.n	80011be <HAL_ADC_Start_DMA+0x1e>
 80011ba:	2302      	movs	r3, #2
 80011bc:	e0e9      	b.n	8001392 <HAL_ADC_Start_DMA+0x1f2>
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	2201      	movs	r2, #1
 80011c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d018      	beq.n	8001206 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <HAL_ADC_Start_DMA+0x1fc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a6d      	ldr	r2, [pc, #436]	; (80013a0 <HAL_ADC_Start_DMA+0x200>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0c9a      	lsrs	r2, r3, #18
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011f8:	e002      	b.n	8001200 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f9      	bne.n	80011fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001214:	d107      	bne.n	8001226 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001224:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	2b01      	cmp	r3, #1
 8001232:	f040 80a1 	bne.w	8001378 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800123e:	f023 0301 	bic.w	r3, r3, #1
 8001242:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001260:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001274:	d106      	bne.n	8001284 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f023 0206 	bic.w	r2, r3, #6
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
 8001282:	e002      	b.n	800128a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001292:	4b44      	ldr	r3, [pc, #272]	; (80013a4 <HAL_ADC_Start_DMA+0x204>)
 8001294:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129a:	4a43      	ldr	r2, [pc, #268]	; (80013a8 <HAL_ADC_Start_DMA+0x208>)
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012a2:	4a42      	ldr	r2, [pc, #264]	; (80013ac <HAL_ADC_Start_DMA+0x20c>)
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012aa:	4a41      	ldr	r2, [pc, #260]	; (80013b0 <HAL_ADC_Start_DMA+0x210>)
 80012ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689a      	ldr	r2, [r3, #8]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	334c      	adds	r3, #76	; 0x4c
 80012e2:	4619      	mov	r1, r3
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f000 fdc6 	bl	8001e78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 031f 	and.w	r3, r3, #31
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d12a      	bne.n	800134e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a2d      	ldr	r2, [pc, #180]	; (80013b4 <HAL_ADC_Start_DMA+0x214>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d015      	beq.n	800132e <HAL_ADC_Start_DMA+0x18e>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a2c      	ldr	r2, [pc, #176]	; (80013b8 <HAL_ADC_Start_DMA+0x218>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d105      	bne.n	8001318 <HAL_ADC_Start_DMA+0x178>
 800130c:	4b25      	ldr	r3, [pc, #148]	; (80013a4 <HAL_ADC_Start_DMA+0x204>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00a      	beq.n	800132e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a27      	ldr	r2, [pc, #156]	; (80013bc <HAL_ADC_Start_DMA+0x21c>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d136      	bne.n	8001390 <HAL_ADC_Start_DMA+0x1f0>
 8001322:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_ADC_Start_DMA+0x204>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	d130      	bne.n	8001390 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d129      	bne.n	8001390 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	e020      	b.n	8001390 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a18      	ldr	r2, [pc, #96]	; (80013b4 <HAL_ADC_Start_DMA+0x214>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d11b      	bne.n	8001390 <HAL_ADC_Start_DMA+0x1f0>
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d114      	bne.n	8001390 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	e00b      	b.n	8001390 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f043 0210 	orr.w	r2, r3, #16
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000
 80013a0:	431bde83 	.word	0x431bde83
 80013a4:	40012300 	.word	0x40012300
 80013a8:	08001825 	.word	0x08001825
 80013ac:	080018df 	.word	0x080018df
 80013b0:	080018fb 	.word	0x080018fb
 80013b4:	40012000 	.word	0x40012000
 80013b8:	40012100 	.word	0x40012100
 80013bc:	40012200 	.word	0x40012200

080013c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d101      	bne.n	8001404 <HAL_ADC_ConfigChannel+0x1c>
 8001400:	2302      	movs	r3, #2
 8001402:	e105      	b.n	8001610 <HAL_ADC_ConfigChannel+0x228>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b09      	cmp	r3, #9
 8001412:	d925      	bls.n	8001460 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68d9      	ldr	r1, [r3, #12]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	b29b      	uxth	r3, r3
 8001420:	461a      	mov	r2, r3
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	3b1e      	subs	r3, #30
 800142a:	2207      	movs	r2, #7
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43da      	mvns	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	400a      	ands	r2, r1
 8001438:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	68d9      	ldr	r1, [r3, #12]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	4603      	mov	r3, r0
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4403      	add	r3, r0
 8001452:	3b1e      	subs	r3, #30
 8001454:	409a      	lsls	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	e022      	b.n	80014a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6919      	ldr	r1, [r3, #16]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	2207      	movs	r2, #7
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	400a      	ands	r2, r1
 8001482:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6919      	ldr	r1, [r3, #16]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	b29b      	uxth	r3, r3
 8001494:	4618      	mov	r0, r3
 8001496:	4603      	mov	r3, r0
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4403      	add	r3, r0
 800149c:	409a      	lsls	r2, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b06      	cmp	r3, #6
 80014ac:	d824      	bhi.n	80014f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685a      	ldr	r2, [r3, #4]
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	3b05      	subs	r3, #5
 80014c0:	221f      	movs	r2, #31
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43da      	mvns	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	400a      	ands	r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	4613      	mov	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4413      	add	r3, r2
 80014e8:	3b05      	subs	r3, #5
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
 80014f6:	e04c      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d824      	bhi.n	800154a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b23      	subs	r3, #35	; 0x23
 8001512:	221f      	movs	r2, #31
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43da      	mvns	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	400a      	ands	r2, r1
 8001520:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4618      	mov	r0, r3
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4613      	mov	r3, r2
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	4413      	add	r3, r2
 800153a:	3b23      	subs	r3, #35	; 0x23
 800153c:	fa00 f203 	lsl.w	r2, r0, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	631a      	str	r2, [r3, #48]	; 0x30
 8001548:	e023      	b.n	8001592 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b41      	subs	r3, #65	; 0x41
 800155c:	221f      	movs	r2, #31
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	400a      	ands	r2, r1
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b41      	subs	r3, #65	; 0x41
 8001586:	fa00 f203 	lsl.w	r2, r0, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <HAL_ADC_ConfigChannel+0x234>)
 8001594:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_ADC_ConfigChannel+0x238>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d109      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1cc>
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b12      	cmp	r3, #18
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a19      	ldr	r2, [pc, #100]	; (8001620 <HAL_ADC_ConfigChannel+0x238>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d123      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x21e>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d003      	beq.n	80015ce <HAL_ADC_ConfigChannel+0x1e6>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2b11      	cmp	r3, #17
 80015cc:	d11b      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d111      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_ADC_ConfigChannel+0x23c>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <HAL_ADC_ConfigChannel+0x240>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9a      	lsrs	r2, r3, #18
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015f8:	e002      	b.n	8001600 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3b01      	subs	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f9      	bne.n	80015fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	40012300 	.word	0x40012300
 8001620:	40012000 	.word	0x40012000
 8001624:	20000000 	.word	0x20000000
 8001628:	431bde83 	.word	0x431bde83

0800162c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001634:	4b79      	ldr	r3, [pc, #484]	; (800181c <ADC_Init+0x1f0>)
 8001636:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	431a      	orrs	r2, r3
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001660:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6859      	ldr	r1, [r3, #4]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
 800166c:	021a      	lsls	r2, r3, #8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	430a      	orrs	r2, r1
 8001674:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001684:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	689a      	ldr	r2, [r3, #8]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6899      	ldr	r1, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016be:	4a58      	ldr	r2, [pc, #352]	; (8001820 <ADC_Init+0x1f4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d022      	beq.n	800170a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6899      	ldr	r1, [r3, #8]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6899      	ldr	r1, [r3, #8]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	e00f      	b.n	800172a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001718:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	689a      	ldr	r2, [r3, #8]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001728:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0202 	bic.w	r2, r2, #2
 8001738:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	7e1b      	ldrb	r3, [r3, #24]
 8001744:	005a      	lsls	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	430a      	orrs	r2, r1
 800174c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d01b      	beq.n	8001790 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001766:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001776:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	3b01      	subs	r3, #1
 8001784:	035a      	lsls	r2, r3, #13
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	e007      	b.n	80017a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800179e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	3b01      	subs	r3, #1
 80017bc:	051a      	lsls	r2, r3, #20
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6899      	ldr	r1, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e2:	025a      	lsls	r2, r3, #9
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6899      	ldr	r1, [r3, #8]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	029a      	lsls	r2, r3, #10
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	609a      	str	r2, [r3, #8]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40012300 	.word	0x40012300
 8001820:	0f000001 	.word	0x0f000001

08001824 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001830:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800183a:	2b00      	cmp	r3, #0
 800183c:	d13c      	bne.n	80018b8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d12b      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800185c:	2b00      	cmp	r3, #0
 800185e:	d127      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800186a:	2b00      	cmp	r3, #0
 800186c:	d006      	beq.n	800187c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001878:	2b00      	cmp	r3, #0
 800187a:	d119      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f022 0220 	bic.w	r2, r2, #32
 800188a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a8:	f043 0201 	orr.w	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f7fe fe05 	bl	80004c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018b6:	e00e      	b.n	80018d6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018c4:	68f8      	ldr	r0, [r7, #12]
 80018c6:	f7ff fd85 	bl	80013d4 <HAL_ADC_ErrorCallback>
}
 80018ca:	e004      	b.n	80018d6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	4798      	blx	r3
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fd67 	bl	80013c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001906:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2240      	movs	r2, #64	; 0x40
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001912:	f043 0204 	orr.w	r2, r3, #4
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff fd5a 	bl	80013d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001920:	bf00      	nop
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001944:	4013      	ands	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001950:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195a:	4a04      	ldr	r2, [pc, #16]	; (800196c <__NVIC_SetPriorityGrouping+0x44>)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	60d3      	str	r3, [r2, #12]
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001974:	4b04      	ldr	r3, [pc, #16]	; (8001988 <__NVIC_GetPriorityGrouping+0x18>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	0a1b      	lsrs	r3, r3, #8
 800197a:	f003 0307 	and.w	r3, r3, #7
}
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	2b00      	cmp	r3, #0
 800199c:	db0b      	blt.n	80019b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	4907      	ldr	r1, [pc, #28]	; (80019c4 <__NVIC_EnableIRQ+0x38>)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	095b      	lsrs	r3, r3, #5
 80019ac:	2001      	movs	r0, #1
 80019ae:	fa00 f202 	lsl.w	r2, r0, r2
 80019b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	; (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	; (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	; 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a94:	d301      	bcc.n	8001a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00f      	b.n	8001aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <SysTick_Config+0x40>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	f7ff ff8e 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aac:	4b05      	ldr	r3, [pc, #20]	; (8001ac4 <SysTick_Config+0x40>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab2:	4b04      	ldr	r3, [pc, #16]	; (8001ac4 <SysTick_Config+0x40>)
 8001ab4:	2207      	movs	r2, #7
 8001ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	e000e010 	.word	0xe000e010

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff ff29 	bl	8001928 <__NVIC_SetPriorityGrouping>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
 8001aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af0:	f7ff ff3e 	bl	8001970 <__NVIC_GetPriorityGrouping>
 8001af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	6978      	ldr	r0, [r7, #20]
 8001afc:	f7ff ff8e 	bl	8001a1c <NVIC_EncodePriority>
 8001b00:	4602      	mov	r2, r0
 8001b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff5d 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0e:	bf00      	nop
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff ff31 	bl	800198c <__NVIC_EnableIRQ>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b082      	sub	sp, #8
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff ffa2 	bl	8001a84 <SysTick_Config>
 8001b40:	4603      	mov	r3, r0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e014      	b.n	8001b86 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	791b      	ldrb	r3, [r3, #4]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff f85f 	bl	8000c30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b083      	sub	sp, #12
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
 8001b96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	795b      	ldrb	r3, [r3, #5]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d101      	bne.n	8001ba4 <HAL_DAC_Start+0x16>
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	e040      	b.n	8001c26 <HAL_DAC_Start+0x98>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f003 0310 	and.w	r3, r3, #16
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001bd8:	2b3c      	cmp	r3, #60	; 0x3c
 8001bda:	d11d      	bne.n	8001c18 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	e014      	b.n	8001c18 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	213c      	movs	r1, #60	; 0x3c
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d107      	bne.n	8001c18 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0202 	orr.w	r2, r2, #2
 8001c16:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b087      	sub	sp, #28
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d105      	bne.n	8001c5c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	3308      	adds	r3, #8
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	e004      	b.n	8001c66 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	3314      	adds	r3, #20
 8001c64:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001c6e:	2300      	movs	r3, #0
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	371c      	adds	r7, #28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	795b      	ldrb	r3, [r3, #5]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d101      	bne.n	8001c94 <HAL_DAC_ConfigChannel+0x18>
 8001c90:	2302      	movs	r3, #2
 8001c92:	e03c      	b.n	8001d0e <HAL_DAC_ConfigChannel+0x92>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f003 0310 	and.w	r3, r3, #16
 8001cae:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f003 0310 	and.w	r3, r3, #16
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	22c0      	movs	r2, #192	; 0xc0
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	400a      	ands	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff f9c6 	bl	80010b8 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e099      	b.n	8001e6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f022 0201 	bic.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d58:	e00f      	b.n	8001d7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d5a:	f7ff f9ad 	bl	80010b8 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b05      	cmp	r3, #5
 8001d66:	d908      	bls.n	8001d7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2203      	movs	r2, #3
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e078      	b.n	8001e6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1e8      	bne.n	8001d5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4b38      	ldr	r3, [pc, #224]	; (8001e74 <HAL_DMA_Init+0x158>)
 8001d94:	4013      	ands	r3, r2
 8001d96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001da6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd0:	2b04      	cmp	r3, #4
 8001dd2:	d107      	bne.n	8001de4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f023 0307 	bic.w	r3, r3, #7
 8001dfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d117      	bne.n	8001e3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00e      	beq.n	8001e3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 fa6f 	bl	8002304 <DMA_CheckFifoParam>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2240      	movs	r2, #64	; 0x40
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e016      	b.n	8001e6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fa26 	bl	8002298 <DMA_CalcBaseAndBitshift>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	223f      	movs	r2, #63	; 0x3f
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	f010803f 	.word	0xf010803f

08001e78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_DMA_Start_IT+0x26>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e040      	b.n	8001f20 <HAL_DMA_Start_IT+0xa8>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d12f      	bne.n	8001f12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f9b8 	bl	800223c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	223f      	movs	r2, #63	; 0x3f
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0216 	orr.w	r2, r2, #22
 8001ee6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0201 	orr.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e005      	b.n	8001f1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3718      	adds	r7, #24
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}

08001f28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b086      	sub	sp, #24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f34:	4b92      	ldr	r3, [pc, #584]	; (8002180 <HAL_DMA_IRQHandler+0x258>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a92      	ldr	r2, [pc, #584]	; (8002184 <HAL_DMA_IRQHandler+0x25c>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0a9b      	lsrs	r3, r3, #10
 8001f40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f52:	2208      	movs	r2, #8
 8001f54:	409a      	lsls	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01a      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0204 	bic.w	r2, r2, #4
 8001f7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	2208      	movs	r2, #8
 8001f82:	409a      	lsls	r2, r3
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	2201      	movs	r2, #1
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d012      	beq.n	8001fca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00b      	beq.n	8001fca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	409a      	lsls	r2, r3
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	2204      	movs	r2, #4
 8001fd0:	409a      	lsls	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d012      	beq.n	8002000 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2204      	movs	r2, #4
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ff8:	f043 0204 	orr.w	r2, r3, #4
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002004:	2210      	movs	r2, #16
 8002006:	409a      	lsls	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d043      	beq.n	8002098 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03c      	beq.n	8002098 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	2210      	movs	r2, #16
 8002024:	409a      	lsls	r2, r3
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d018      	beq.n	800206a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d024      	beq.n	8002098 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	4798      	blx	r3
 8002056:	e01f      	b.n	8002098 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01b      	beq.n	8002098 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	4798      	blx	r3
 8002068:	e016      	b.n	8002098 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002074:	2b00      	cmp	r3, #0
 8002076:	d107      	bne.n	8002088 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0208 	bic.w	r2, r2, #8
 8002086:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d003      	beq.n	8002098 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	2220      	movs	r2, #32
 800209e:	409a      	lsls	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4013      	ands	r3, r2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 808e 	beq.w	80021c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8086 	beq.w	80021c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2220      	movs	r2, #32
 80020c0:	409a      	lsls	r2, r3
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d136      	bne.n	8002140 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0216 	bic.w	r2, r2, #22
 80020e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d103      	bne.n	8002102 <HAL_DMA_IRQHandler+0x1da>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0208 	bic.w	r2, r2, #8
 8002110:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	223f      	movs	r2, #63	; 0x3f
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002132:	2b00      	cmp	r3, #0
 8002134:	d07d      	beq.n	8002232 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	4798      	blx	r3
        }
        return;
 800213e:	e078      	b.n	8002232 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d01c      	beq.n	8002188 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d108      	bne.n	800216e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	2b00      	cmp	r3, #0
 8002162:	d030      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	4798      	blx	r3
 800216c:	e02b      	b.n	80021c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002172:	2b00      	cmp	r3, #0
 8002174:	d027      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	4798      	blx	r3
 800217e:	e022      	b.n	80021c6 <HAL_DMA_IRQHandler+0x29e>
 8002180:	20000000 	.word	0x20000000
 8002184:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10f      	bne.n	80021b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0210 	bic.w	r2, r2, #16
 80021a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d032      	beq.n	8002234 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d022      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2205      	movs	r2, #5
 80021de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0201 	bic.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	3301      	adds	r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d307      	bcc.n	800220e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1f2      	bne.n	80021f2 <HAL_DMA_IRQHandler+0x2ca>
 800220c:	e000      	b.n	8002210 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800220e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e000      	b.n	8002234 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002232:	bf00      	nop
    }
  }
}
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop

0800223c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002258:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b40      	cmp	r3, #64	; 0x40
 8002268:	d108      	bne.n	800227c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800227a:	e007      	b.n	800228c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	3b10      	subs	r3, #16
 80022a8:	4a14      	ldr	r2, [pc, #80]	; (80022fc <DMA_CalcBaseAndBitshift+0x64>)
 80022aa:	fba2 2303 	umull	r2, r3, r2, r3
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022b2:	4a13      	ldr	r2, [pc, #76]	; (8002300 <DMA_CalcBaseAndBitshift+0x68>)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2b03      	cmp	r3, #3
 80022c4:	d909      	bls.n	80022da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022ce:	f023 0303 	bic.w	r3, r3, #3
 80022d2:	1d1a      	adds	r2, r3, #4
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	659a      	str	r2, [r3, #88]	; 0x58
 80022d8:	e007      	b.n	80022ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80022e2:	f023 0303 	bic.w	r3, r3, #3
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	aaaaaaab 	.word	0xaaaaaaab
 8002300:	0800956c 	.word	0x0800956c

08002304 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002314:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11f      	bne.n	800235e <DMA_CheckFifoParam+0x5a>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d856      	bhi.n	80023d2 <DMA_CheckFifoParam+0xce>
 8002324:	a201      	add	r2, pc, #4	; (adr r2, 800232c <DMA_CheckFifoParam+0x28>)
 8002326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232a:	bf00      	nop
 800232c:	0800233d 	.word	0x0800233d
 8002330:	0800234f 	.word	0x0800234f
 8002334:	0800233d 	.word	0x0800233d
 8002338:	080023d3 	.word	0x080023d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d046      	beq.n	80023d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234c:	e043      	b.n	80023d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002356:	d140      	bne.n	80023da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800235c:	e03d      	b.n	80023da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002366:	d121      	bne.n	80023ac <DMA_CheckFifoParam+0xa8>
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d837      	bhi.n	80023de <DMA_CheckFifoParam+0xda>
 800236e:	a201      	add	r2, pc, #4	; (adr r2, 8002374 <DMA_CheckFifoParam+0x70>)
 8002370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002374:	08002385 	.word	0x08002385
 8002378:	0800238b 	.word	0x0800238b
 800237c:	08002385 	.word	0x08002385
 8002380:	0800239d 	.word	0x0800239d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      break;
 8002388:	e030      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d025      	beq.n	80023e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800239a:	e022      	b.n	80023e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a4:	d11f      	bne.n	80023e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023aa:	e01c      	b.n	80023e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d903      	bls.n	80023ba <DMA_CheckFifoParam+0xb6>
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d003      	beq.n	80023c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023b8:	e018      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
      break;
 80023be:	e015      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00e      	beq.n	80023ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	73fb      	strb	r3, [r7, #15]
      break;
 80023d0:	e00b      	b.n	80023ea <DMA_CheckFifoParam+0xe6>
      break;
 80023d2:	bf00      	nop
 80023d4:	e00a      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      break;
 80023d6:	bf00      	nop
 80023d8:	e008      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      break;
 80023da:	bf00      	nop
 80023dc:	e006      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      break;
 80023de:	bf00      	nop
 80023e0:	e004      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      break;
 80023e2:	bf00      	nop
 80023e4:	e002      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      break;   
 80023e6:	bf00      	nop
 80023e8:	e000      	b.n	80023ec <DMA_CheckFifoParam+0xe8>
      break;
 80023ea:	bf00      	nop
    }
  } 
  
  return status; 
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop

080023fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800240a:	2300      	movs	r3, #0
 800240c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800240e:	2300      	movs	r3, #0
 8002410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e16b      	b.n	80026f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	f040 815a 	bne.w	80026ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d005      	beq.n	800244e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	2b02      	cmp	r3, #2
 800244c:	d130      	bne.n	80024b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4013      	ands	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002484:	2201      	movs	r2, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 0201 	and.w	r2, r3, #1
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b03      	cmp	r3, #3
 80024ba:	d017      	beq.n	80024ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d123      	bne.n	8002540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	08da      	lsrs	r2, r3, #3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3208      	adds	r2, #8
 8002500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	220f      	movs	r2, #15
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	08da      	lsrs	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3208      	adds	r2, #8
 800253a:	69b9      	ldr	r1, [r7, #24]
 800253c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	2203      	movs	r2, #3
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0203 	and.w	r2, r3, #3
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80b4 	beq.w	80026ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	4b60      	ldr	r3, [pc, #384]	; (8002708 <HAL_GPIO_Init+0x30c>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	4a5f      	ldr	r2, [pc, #380]	; (8002708 <HAL_GPIO_Init+0x30c>)
 800258c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002590:	6453      	str	r3, [r2, #68]	; 0x44
 8002592:	4b5d      	ldr	r3, [pc, #372]	; (8002708 <HAL_GPIO_Init+0x30c>)
 8002594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002596:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800259e:	4a5b      	ldr	r2, [pc, #364]	; (800270c <HAL_GPIO_Init+0x310>)
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	089b      	lsrs	r3, r3, #2
 80025a4:	3302      	adds	r3, #2
 80025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	220f      	movs	r2, #15
 80025b6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ba:	43db      	mvns	r3, r3
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	4013      	ands	r3, r2
 80025c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	; (8002710 <HAL_GPIO_Init+0x314>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d02b      	beq.n	8002622 <HAL_GPIO_Init+0x226>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a51      	ldr	r2, [pc, #324]	; (8002714 <HAL_GPIO_Init+0x318>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d025      	beq.n	800261e <HAL_GPIO_Init+0x222>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_GPIO_Init+0x31c>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01f      	beq.n	800261a <HAL_GPIO_Init+0x21e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a4f      	ldr	r2, [pc, #316]	; (800271c <HAL_GPIO_Init+0x320>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d019      	beq.n	8002616 <HAL_GPIO_Init+0x21a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a4e      	ldr	r2, [pc, #312]	; (8002720 <HAL_GPIO_Init+0x324>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_GPIO_Init+0x216>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a4d      	ldr	r2, [pc, #308]	; (8002724 <HAL_GPIO_Init+0x328>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d00d      	beq.n	800260e <HAL_GPIO_Init+0x212>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a4c      	ldr	r2, [pc, #304]	; (8002728 <HAL_GPIO_Init+0x32c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d007      	beq.n	800260a <HAL_GPIO_Init+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4b      	ldr	r2, [pc, #300]	; (800272c <HAL_GPIO_Init+0x330>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d101      	bne.n	8002606 <HAL_GPIO_Init+0x20a>
 8002602:	2307      	movs	r3, #7
 8002604:	e00e      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002606:	2308      	movs	r3, #8
 8002608:	e00c      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260a:	2306      	movs	r3, #6
 800260c:	e00a      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800260e:	2305      	movs	r3, #5
 8002610:	e008      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002612:	2304      	movs	r3, #4
 8002614:	e006      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002616:	2303      	movs	r3, #3
 8002618:	e004      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261a:	2302      	movs	r3, #2
 800261c:	e002      	b.n	8002624 <HAL_GPIO_Init+0x228>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_GPIO_Init+0x228>
 8002622:	2300      	movs	r3, #0
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f002 0203 	and.w	r2, r2, #3
 800262a:	0092      	lsls	r2, r2, #2
 800262c:	4093      	lsls	r3, r2
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002634:	4935      	ldr	r1, [pc, #212]	; (800270c <HAL_GPIO_Init+0x310>)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	089b      	lsrs	r3, r3, #2
 800263a:	3302      	adds	r3, #2
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002642:	4b3b      	ldr	r3, [pc, #236]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	43db      	mvns	r3, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4013      	ands	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002666:	4a32      	ldr	r2, [pc, #200]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <HAL_GPIO_Init+0x334>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	43db      	mvns	r3, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4013      	ands	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002690:	4a27      	ldr	r2, [pc, #156]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_GPIO_Init+0x334>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026ba:	4a1d      	ldr	r2, [pc, #116]	; (8002730 <HAL_GPIO_Init+0x334>)
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_GPIO_Init+0x334>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d003      	beq.n	80026e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e4:	4a12      	ldr	r2, [pc, #72]	; (8002730 <HAL_GPIO_Init+0x334>)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	f67f ae90 	bls.w	8002418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3724      	adds	r7, #36	; 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40023800 	.word	0x40023800
 800270c:	40013800 	.word	0x40013800
 8002710:	40020000 	.word	0x40020000
 8002714:	40020400 	.word	0x40020400
 8002718:	40020800 	.word	0x40020800
 800271c:	40020c00 	.word	0x40020c00
 8002720:	40021000 	.word	0x40021000
 8002724:	40021400 	.word	0x40021400
 8002728:	40021800 	.word	0x40021800
 800272c:	40021c00 	.word	0x40021c00
 8002730:	40013c00 	.word	0x40013c00

08002734 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	807b      	strh	r3, [r7, #2]
 8002740:	4613      	mov	r3, r2
 8002742:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274a:	887a      	ldrh	r2, [r7, #2]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002750:	e003      	b.n	800275a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	041a      	lsls	r2, r3, #16
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002766:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002768:	b08f      	sub	sp, #60	; 0x3c
 800276a:	af0a      	add	r7, sp, #40	; 0x28
 800276c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e054      	b.n	8002822 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d106      	bne.n	8002798 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f006 fb1c 	bl	8008dd0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2203      	movs	r2, #3
 800279c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f003 fc72 	bl	80060a0 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	687e      	ldr	r6, [r7, #4]
 80027c4:	466d      	mov	r5, sp
 80027c6:	f106 0410 	add.w	r4, r6, #16
 80027ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80027d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80027da:	1d33      	adds	r3, r6, #4
 80027dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027de:	6838      	ldr	r0, [r7, #0]
 80027e0:	f003 fbec 	bl	8005fbc <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	4618      	mov	r0, r3
 80027ec:	f003 fc69 	bl	80060c2 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	687e      	ldr	r6, [r7, #4]
 80027f8:	466d      	mov	r5, sp
 80027fa:	f106 0410 	add.w	r4, r6, #16
 80027fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002804:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002806:	e894 0003 	ldmia.w	r4, {r0, r1}
 800280a:	e885 0003 	stmia.w	r5, {r0, r1}
 800280e:	1d33      	adds	r3, r6, #4
 8002810:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002812:	6838      	ldr	r0, [r7, #0]
 8002814:	f003 fdd0 	bl	80063b8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800282a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800282a:	b590      	push	{r4, r7, lr}
 800282c:	b089      	sub	sp, #36	; 0x24
 800282e:	af04      	add	r7, sp, #16
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	4608      	mov	r0, r1
 8002834:	4611      	mov	r1, r2
 8002836:	461a      	mov	r2, r3
 8002838:	4603      	mov	r3, r0
 800283a:	70fb      	strb	r3, [r7, #3]
 800283c:	460b      	mov	r3, r1
 800283e:	70bb      	strb	r3, [r7, #2]
 8002840:	4613      	mov	r3, r2
 8002842:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800284a:	2b01      	cmp	r3, #1
 800284c:	d101      	bne.n	8002852 <HAL_HCD_HC_Init+0x28>
 800284e:	2302      	movs	r3, #2
 8002850:	e076      	b.n	8002940 <HAL_HCD_HC_Init+0x116>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800285a:	78fb      	ldrb	r3, [r7, #3]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	212c      	movs	r1, #44	; 0x2c
 8002860:	fb01 f303 	mul.w	r3, r1, r3
 8002864:	4413      	add	r3, r2
 8002866:	333d      	adds	r3, #61	; 0x3d
 8002868:	2200      	movs	r2, #0
 800286a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	212c      	movs	r1, #44	; 0x2c
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4413      	add	r3, r2
 8002878:	3338      	adds	r3, #56	; 0x38
 800287a:	787a      	ldrb	r2, [r7, #1]
 800287c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800287e:	78fb      	ldrb	r3, [r7, #3]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	212c      	movs	r1, #44	; 0x2c
 8002884:	fb01 f303 	mul.w	r3, r1, r3
 8002888:	4413      	add	r3, r2
 800288a:	3340      	adds	r3, #64	; 0x40
 800288c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800288e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	212c      	movs	r1, #44	; 0x2c
 8002896:	fb01 f303 	mul.w	r3, r1, r3
 800289a:	4413      	add	r3, r2
 800289c:	3339      	adds	r3, #57	; 0x39
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	212c      	movs	r1, #44	; 0x2c
 80028a8:	fb01 f303 	mul.w	r3, r1, r3
 80028ac:	4413      	add	r3, r2
 80028ae:	333f      	adds	r3, #63	; 0x3f
 80028b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80028b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	78ba      	ldrb	r2, [r7, #2]
 80028ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028be:	b2d0      	uxtb	r0, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	212c      	movs	r1, #44	; 0x2c
 80028c4:	fb01 f303 	mul.w	r3, r1, r3
 80028c8:	4413      	add	r3, r2
 80028ca:	333a      	adds	r3, #58	; 0x3a
 80028cc:	4602      	mov	r2, r0
 80028ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80028d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	da09      	bge.n	80028ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	212c      	movs	r1, #44	; 0x2c
 80028de:	fb01 f303 	mul.w	r3, r1, r3
 80028e2:	4413      	add	r3, r2
 80028e4:	333b      	adds	r3, #59	; 0x3b
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	e008      	b.n	80028fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	212c      	movs	r1, #44	; 0x2c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	333b      	adds	r3, #59	; 0x3b
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80028fe:	78fb      	ldrb	r3, [r7, #3]
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	212c      	movs	r1, #44	; 0x2c
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	4413      	add	r3, r2
 800290a:	333c      	adds	r3, #60	; 0x3c
 800290c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002910:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	787c      	ldrb	r4, [r7, #1]
 8002918:	78ba      	ldrb	r2, [r7, #2]
 800291a:	78f9      	ldrb	r1, [r7, #3]
 800291c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800291e:	9302      	str	r3, [sp, #8]
 8002920:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002924:	9301      	str	r3, [sp, #4]
 8002926:	f897 3020 	ldrb.w	r3, [r7, #32]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	4623      	mov	r3, r4
 800292e:	f003 febd 	bl	80066ac <USB_HC_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800293e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	bd90      	pop	{r4, r7, pc}

08002948 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_HCD_HC_Halt+0x1e>
 8002962:	2302      	movs	r3, #2
 8002964:	e00f      	b.n	8002986 <HAL_HCD_HC_Halt+0x3e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	78fa      	ldrb	r2, [r7, #3]
 8002974:	4611      	mov	r1, r2
 8002976:	4618      	mov	r0, r3
 8002978:	f004 f8f9 	bl	8006b6e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	70fb      	strb	r3, [r7, #3]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70bb      	strb	r3, [r7, #2]
 80029a6:	4613      	mov	r3, r2
 80029a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	333b      	adds	r3, #59	; 0x3b
 80029b8:	78ba      	ldrb	r2, [r7, #2]
 80029ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80029bc:	78fb      	ldrb	r3, [r7, #3]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	333f      	adds	r3, #63	; 0x3f
 80029ca:	787a      	ldrb	r2, [r7, #1]
 80029cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80029ce:	7c3b      	ldrb	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d112      	bne.n	80029fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	3342      	adds	r3, #66	; 0x42
 80029e2:	2203      	movs	r2, #3
 80029e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	212c      	movs	r1, #44	; 0x2c
 80029ec:	fb01 f303 	mul.w	r3, r1, r3
 80029f0:	4413      	add	r3, r2
 80029f2:	333d      	adds	r3, #61	; 0x3d
 80029f4:	7f3a      	ldrb	r2, [r7, #28]
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e008      	b.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029fa:	78fb      	ldrb	r3, [r7, #3]
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3342      	adds	r3, #66	; 0x42
 8002a08:	2202      	movs	r2, #2
 8002a0a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a0c:	787b      	ldrb	r3, [r7, #1]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	f200 80c6 	bhi.w	8002ba0 <HAL_HCD_HC_SubmitRequest+0x210>
 8002a14:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1a:	bf00      	nop
 8002a1c:	08002a2d 	.word	0x08002a2d
 8002a20:	08002b8d 	.word	0x08002b8d
 8002a24:	08002a91 	.word	0x08002a91
 8002a28:	08002b0f 	.word	0x08002b0f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002a2c:	7c3b      	ldrb	r3, [r7, #16]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	f040 80b8 	bne.w	8002ba4 <HAL_HCD_HC_SubmitRequest+0x214>
 8002a34:	78bb      	ldrb	r3, [r7, #2]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f040 80b4 	bne.w	8002ba4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002a3c:	8b3b      	ldrh	r3, [r7, #24]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d108      	bne.n	8002a54 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	212c      	movs	r1, #44	; 0x2c
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3355      	adds	r3, #85	; 0x55
 8002a50:	2201      	movs	r2, #1
 8002a52:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	212c      	movs	r1, #44	; 0x2c
 8002a5a:	fb01 f303 	mul.w	r3, r1, r3
 8002a5e:	4413      	add	r3, r2
 8002a60:	3355      	adds	r3, #85	; 0x55
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a68:	78fb      	ldrb	r3, [r7, #3]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3342      	adds	r3, #66	; 0x42
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a7a:	e093      	b.n	8002ba4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	212c      	movs	r1, #44	; 0x2c
 8002a82:	fb01 f303 	mul.w	r3, r1, r3
 8002a86:	4413      	add	r3, r2
 8002a88:	3342      	adds	r3, #66	; 0x42
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	701a      	strb	r2, [r3, #0]
      break;
 8002a8e:	e089      	b.n	8002ba4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002a90:	78bb      	ldrb	r3, [r7, #2]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11d      	bne.n	8002ad2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3355      	adds	r3, #85	; 0x55
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3342      	adds	r3, #66	; 0x42
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002abc:	e073      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	3342      	adds	r3, #66	; 0x42
 8002acc:	2202      	movs	r2, #2
 8002ace:	701a      	strb	r2, [r3, #0]
      break;
 8002ad0:	e069      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002ad2:	78fb      	ldrb	r3, [r7, #3]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3354      	adds	r3, #84	; 0x54
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d109      	bne.n	8002afa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	212c      	movs	r1, #44	; 0x2c
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	3342      	adds	r3, #66	; 0x42
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
      break;
 8002af8:	e055      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002afa:	78fb      	ldrb	r3, [r7, #3]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3342      	adds	r3, #66	; 0x42
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
      break;
 8002b0c:	e04b      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002b0e:	78bb      	ldrb	r3, [r7, #2]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d11d      	bne.n	8002b50 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002b14:	78fb      	ldrb	r3, [r7, #3]
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	212c      	movs	r1, #44	; 0x2c
 8002b1a:	fb01 f303 	mul.w	r3, r1, r3
 8002b1e:	4413      	add	r3, r2
 8002b20:	3355      	adds	r3, #85	; 0x55
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d109      	bne.n	8002b3c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	212c      	movs	r1, #44	; 0x2c
 8002b2e:	fb01 f303 	mul.w	r3, r1, r3
 8002b32:	4413      	add	r3, r2
 8002b34:	3342      	adds	r3, #66	; 0x42
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002b3a:	e034      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b3c:	78fb      	ldrb	r3, [r7, #3]
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	212c      	movs	r1, #44	; 0x2c
 8002b42:	fb01 f303 	mul.w	r3, r1, r3
 8002b46:	4413      	add	r3, r2
 8002b48:	3342      	adds	r3, #66	; 0x42
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	701a      	strb	r2, [r3, #0]
      break;
 8002b4e:	e02a      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	212c      	movs	r1, #44	; 0x2c
 8002b56:	fb01 f303 	mul.w	r3, r1, r3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3354      	adds	r3, #84	; 0x54
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	212c      	movs	r1, #44	; 0x2c
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	4413      	add	r3, r2
 8002b70:	3342      	adds	r3, #66	; 0x42
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
      break;
 8002b76:	e016      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	3342      	adds	r3, #66	; 0x42
 8002b86:	2202      	movs	r2, #2
 8002b88:	701a      	strb	r2, [r3, #0]
      break;
 8002b8a:	e00c      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	212c      	movs	r1, #44	; 0x2c
 8002b92:	fb01 f303 	mul.w	r3, r1, r3
 8002b96:	4413      	add	r3, r2
 8002b98:	3342      	adds	r3, #66	; 0x42
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	701a      	strb	r2, [r3, #0]
      break;
 8002b9e:	e002      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002ba4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	212c      	movs	r1, #44	; 0x2c
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	3344      	adds	r3, #68	; 0x44
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002bb8:	78fb      	ldrb	r3, [r7, #3]
 8002bba:	8b3a      	ldrh	r2, [r7, #24]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	202c      	movs	r0, #44	; 0x2c
 8002bc0:	fb00 f303 	mul.w	r3, r0, r3
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	; 0x4c
 8002bc8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	212c      	movs	r1, #44	; 0x2c
 8002bd0:	fb01 f303 	mul.w	r3, r1, r3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3360      	adds	r3, #96	; 0x60
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3350      	adds	r3, #80	; 0x50
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002bee:	78fb      	ldrb	r3, [r7, #3]
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	212c      	movs	r1, #44	; 0x2c
 8002bf4:	fb01 f303 	mul.w	r3, r1, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3339      	adds	r3, #57	; 0x39
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002c00:	78fb      	ldrb	r3, [r7, #3]
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	212c      	movs	r1, #44	; 0x2c
 8002c06:	fb01 f303 	mul.w	r3, r1, r3
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3361      	adds	r3, #97	; 0x61
 8002c0e:	2200      	movs	r2, #0
 8002c10:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	222c      	movs	r2, #44	; 0x2c
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	3338      	adds	r3, #56	; 0x38
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	18d1      	adds	r1, r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f003 fe4c 	bl	80068c8 <USB_HC_StartXfer>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop

08002c3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 fb6f 	bl	8006336 <USB_GetMode>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	f040 80f6 	bne.w	8002e4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 fb53 	bl	8006310 <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80ec 	beq.w	8002e4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f003 fb4a 	bl	8006310 <USB_ReadInterrupts>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c86:	d104      	bne.n	8002c92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002c90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f003 fb3a 	bl	8006310 <USB_ReadInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca6:	d104      	bne.n	8002cb2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002cb0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fb2a 	bl	8006310 <USB_ReadInterrupts>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc6:	d104      	bne.n	8002cd2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cd0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fb1a 	bl	8006310 <USB_ReadInterrupts>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d103      	bne.n	8002cee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2202      	movs	r2, #2
 8002cec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f003 fb0c 	bl	8006310 <USB_ReadInterrupts>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d02:	d11c      	bne.n	8002d3e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002d0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6938      	ldr	r0, [r7, #16]
 8002d22:	f003 fa1b 	bl	800615c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002d26:	6938      	ldr	r0, [r7, #16]
 8002d28:	f003 fa3c 	bl	80061a4 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f003 fbf4 	bl	8006520 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f006 f8c7 	bl	8008ecc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f003 fae4 	bl	8006310 <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d52:	d102      	bne.n	8002d5a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f001 fa03 	bl	8004160 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f003 fad6 	bl	8006310 <USB_ReadInterrupts>
 8002d64:	4603      	mov	r3, r0
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	d106      	bne.n	8002d7c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f006 f890 	bl	8008e94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 fac5 	bl	8006310 <USB_ReadInterrupts>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f003 0310 	and.w	r3, r3, #16
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d101      	bne.n	8002d94 <HAL_HCD_IRQHandler+0x158>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_HCD_IRQHandler+0x15a>
 8002d94:	2300      	movs	r3, #0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d012      	beq.n	8002dc0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0210 	bic.w	r2, r2, #16
 8002da8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 f906 	bl	8003fbc <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	699a      	ldr	r2, [r3, #24]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0210 	orr.w	r2, r2, #16
 8002dbe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 faa3 	bl	8006310 <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dd4:	d13a      	bne.n	8002e4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f003 feb6 	bl	8006b4c <USB_HC_ReadInterrupt>
 8002de0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e025      	b.n	8002e34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	015a      	lsls	r2, r3, #5
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4413      	add	r3, r2
 8002e04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d106      	bne.n	8002e22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8ab 	bl	8002f76 <HCD_HC_IN_IRQHandler>
 8002e20:	e005      	b.n	8002e2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fcc6 	bl	80037ba <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	3301      	adds	r3, #1
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d3d4      	bcc.n	8002de8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e46:	615a      	str	r2, [r3, #20]
 8002e48:	e000      	b.n	8002e4c <HAL_HCD_IRQHandler+0x210>
      return;
 8002e4a:	bf00      	nop
    }
  }
}
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b082      	sub	sp, #8
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_HCD_Start+0x16>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e013      	b.n	8002e90 <HAL_HCD_Start+0x3e>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	4618      	mov	r0, r3
 8002e78:	f003 fbb6 	bl	80065e8 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f003 f8fc 	bl	800607e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_HCD_Stop+0x16>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e00d      	b.n	8002eca <HAL_HCD_Stop+0x32>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 ffb0 	bl	8006e20 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 fb58 	bl	8006594 <USB_ResetPort>
 8002ee4:	4603      	mov	r3, r0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3360      	adds	r3, #96	; 0x60
 8002f08:	781b      	ldrb	r3, [r3, #0]
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
 8002f1e:	460b      	mov	r3, r1
 8002f20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3350      	adds	r3, #80	; 0x50
 8002f30:	681b      	ldr	r3, [r3, #0]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fb9c 	bl	8006688 <USB_GetCurrentFrame>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 fb77 	bl	800665a <USB_GetHostSpeed>
 8002f6c:	4603      	mov	r3, r0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d119      	bne.n	8002fda <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	0151      	lsls	r1, r2, #5
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	440a      	add	r2, r1
 8002fce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fd2:	f043 0302 	orr.w	r3, r3, #2
 8002fd6:	60d3      	str	r3, [r2, #12]
 8002fd8:	e101      	b.n	80031de <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ff0:	d12b      	bne.n	800304a <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffe:	461a      	mov	r2, r3
 8003000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003004:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	212c      	movs	r1, #44	; 0x2c
 800300c:	fb01 f303 	mul.w	r3, r1, r3
 8003010:	4413      	add	r3, r2
 8003012:	3361      	adds	r3, #97	; 0x61
 8003014:	2207      	movs	r2, #7
 8003016:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	0151      	lsls	r1, r2, #5
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	440a      	add	r2, r1
 800302e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003032:	f043 0302 	orr.w	r3, r3, #2
 8003036:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	4611      	mov	r1, r2
 8003042:	4618      	mov	r0, r3
 8003044:	f003 fd93 	bl	8006b6e <USB_HC_Halt>
 8003048:	e0c9      	b.n	80031de <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	4413      	add	r3, r2
 8003052:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0320 	and.w	r3, r3, #32
 800305c:	2b20      	cmp	r3, #32
 800305e:	d109      	bne.n	8003074 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	461a      	mov	r2, r3
 800306e:	2320      	movs	r3, #32
 8003070:	6093      	str	r3, [r2, #8]
 8003072:	e0b4      	b.n	80031de <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	4413      	add	r3, r2
 800307c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 0308 	and.w	r3, r3, #8
 8003086:	2b08      	cmp	r3, #8
 8003088:	d133      	bne.n	80030f2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	015a      	lsls	r2, r3, #5
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	4413      	add	r3, r2
 8003092:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	0151      	lsls	r1, r2, #5
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	440a      	add	r2, r1
 80030a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	212c      	movs	r1, #44	; 0x2c
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	4413      	add	r3, r2
 80030b6:	3361      	adds	r3, #97	; 0x61
 80030b8:	2205      	movs	r2, #5
 80030ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c8:	461a      	mov	r2, r3
 80030ca:	2310      	movs	r3, #16
 80030cc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	2308      	movs	r3, #8
 80030de:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fd3f 	bl	8006b6e <USB_HC_Halt>
 80030f0:	e075      	b.n	80031de <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003108:	d134      	bne.n	8003174 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	0151      	lsls	r1, r2, #5
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	440a      	add	r2, r1
 8003120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003124:	f043 0302 	orr.w	r3, r3, #2
 8003128:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	212c      	movs	r1, #44	; 0x2c
 8003130:	fb01 f303 	mul.w	r3, r1, r3
 8003134:	4413      	add	r3, r2
 8003136:	3361      	adds	r3, #97	; 0x61
 8003138:	2208      	movs	r2, #8
 800313a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4413      	add	r3, r2
 8003144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003148:	461a      	mov	r2, r3
 800314a:	2310      	movs	r3, #16
 800314c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315a:	461a      	mov	r2, r3
 800315c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003160:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	b2d2      	uxtb	r2, r2
 800316a:	4611      	mov	r1, r2
 800316c:	4618      	mov	r0, r3
 800316e:	f003 fcfe 	bl	8006b6e <USB_HC_Halt>
 8003172:	e034      	b.n	80031de <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003186:	2b80      	cmp	r3, #128	; 0x80
 8003188:	d129      	bne.n	80031de <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	015a      	lsls	r2, r3, #5
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4413      	add	r3, r2
 8003192:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	0151      	lsls	r1, r2, #5
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	440a      	add	r2, r1
 80031a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031a4:	f043 0302 	orr.w	r3, r3, #2
 80031a8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	212c      	movs	r1, #44	; 0x2c
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	4413      	add	r3, r2
 80031b6:	3361      	adds	r3, #97	; 0x61
 80031b8:	2206      	movs	r2, #6
 80031ba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f003 fcd1 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d8:	461a      	mov	r2, r3
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	015a      	lsls	r2, r3, #5
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f4:	d122      	bne.n	800323c <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	015a      	lsls	r2, r3, #5
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4413      	add	r3, r2
 80031fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	0151      	lsls	r1, r2, #5
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	440a      	add	r2, r1
 800320c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	4611      	mov	r1, r2
 8003220:	4618      	mov	r0, r3
 8003222:	f003 fca4 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4413      	add	r3, r2
 800322e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003232:	461a      	mov	r2, r3
 8003234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003238:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800323a:	e2ba      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	015a      	lsls	r2, r3, #5
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4413      	add	r3, r2
 8003244:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	f040 811b 	bne.w	800348a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d019      	beq.n	8003290 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	212c      	movs	r1, #44	; 0x2c
 8003262:	fb01 f303 	mul.w	r3, r1, r3
 8003266:	4413      	add	r3, r2
 8003268:	3348      	adds	r3, #72	; 0x48
 800326a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0159      	lsls	r1, r3, #5
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	440b      	add	r3, r1
 8003274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800327e:	1ad2      	subs	r2, r2, r3
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	202c      	movs	r0, #44	; 0x2c
 8003286:	fb00 f303 	mul.w	r3, r0, r3
 800328a:	440b      	add	r3, r1
 800328c:	3350      	adds	r3, #80	; 0x50
 800328e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	3361      	adds	r3, #97	; 0x61
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	335c      	adds	r3, #92	; 0x5c
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	015a      	lsls	r2, r3, #5
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	4413      	add	r3, r2
 80032bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c0:	461a      	mov	r2, r3
 80032c2:	2301      	movs	r3, #1
 80032c4:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	212c      	movs	r1, #44	; 0x2c
 80032cc:	fb01 f303 	mul.w	r3, r1, r3
 80032d0:	4413      	add	r3, r2
 80032d2:	333f      	adds	r3, #63	; 0x3f
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d009      	beq.n	80032ee <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	212c      	movs	r1, #44	; 0x2c
 80032e0:	fb01 f303 	mul.w	r3, r1, r3
 80032e4:	4413      	add	r3, r2
 80032e6:	333f      	adds	r3, #63	; 0x3f
 80032e8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d121      	bne.n	8003332 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	015a      	lsls	r2, r3, #5
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	0151      	lsls	r1, r2, #5
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	440a      	add	r2, r1
 8003304:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f003 fc28 	bl	8006b6e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332a:	461a      	mov	r2, r3
 800332c:	2310      	movs	r3, #16
 800332e:	6093      	str	r3, [r2, #8]
 8003330:	e066      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	212c      	movs	r1, #44	; 0x2c
 8003338:	fb01 f303 	mul.w	r3, r1, r3
 800333c:	4413      	add	r3, r2
 800333e:	333f      	adds	r3, #63	; 0x3f
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d127      	bne.n	8003396 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	0151      	lsls	r1, r2, #5
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	440a      	add	r2, r1
 800335c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003360:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003364:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3360      	adds	r3, #96	; 0x60
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	b2d9      	uxtb	r1, r3
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	202c      	movs	r0, #44	; 0x2c
 8003382:	fb00 f303 	mul.w	r3, r0, r3
 8003386:	4413      	add	r3, r2
 8003388:	3360      	adds	r3, #96	; 0x60
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f005 fdaa 	bl	8008ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003394:	e034      	b.n	8003400 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	212c      	movs	r1, #44	; 0x2c
 800339c:	fb01 f303 	mul.w	r3, r1, r3
 80033a0:	4413      	add	r3, r2
 80033a2:	333f      	adds	r3, #63	; 0x3f
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d12a      	bne.n	8003400 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3360      	adds	r3, #96	; 0x60
 80033b8:	2201      	movs	r2, #1
 80033ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	212c      	movs	r1, #44	; 0x2c
 80033c2:	fb01 f303 	mul.w	r3, r1, r3
 80033c6:	4413      	add	r3, r2
 80033c8:	3354      	adds	r3, #84	; 0x54
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2d8      	uxtb	r0, r3
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	3354      	adds	r3, #84	; 0x54
 80033e0:	4602      	mov	r2, r0
 80033e2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	b2d9      	uxtb	r1, r3
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	202c      	movs	r0, #44	; 0x2c
 80033ee:	fb00 f303 	mul.w	r3, r0, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3360      	adds	r3, #96	; 0x60
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	461a      	mov	r2, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f005 fd74 	bl	8008ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d12b      	bne.n	8003460 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003408:	687a      	ldr	r2, [r7, #4]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	212c      	movs	r1, #44	; 0x2c
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	4413      	add	r3, r2
 8003414:	3348      	adds	r3, #72	; 0x48
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	202c      	movs	r0, #44	; 0x2c
 800341e:	fb00 f202 	mul.w	r2, r0, r2
 8003422:	440a      	add	r2, r1
 8003424:	3240      	adds	r2, #64	; 0x40
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	fbb3 f3f2 	udiv	r3, r3, r2
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 81be 	beq.w	80037b2 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	212c      	movs	r1, #44	; 0x2c
 800343c:	fb01 f303 	mul.w	r3, r1, r3
 8003440:	4413      	add	r3, r2
 8003442:	3354      	adds	r3, #84	; 0x54
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2d8      	uxtb	r0, r3
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	212c      	movs	r1, #44	; 0x2c
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	4413      	add	r3, r2
 8003458:	3354      	adds	r3, #84	; 0x54
 800345a:	4602      	mov	r2, r0
 800345c:	701a      	strb	r2, [r3, #0]
}
 800345e:	e1a8      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	212c      	movs	r1, #44	; 0x2c
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	4413      	add	r3, r2
 800346c:	3354      	adds	r3, #84	; 0x54
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2d8      	uxtb	r0, r3
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3354      	adds	r3, #84	; 0x54
 8003484:	4602      	mov	r2, r0
 8003486:	701a      	strb	r2, [r3, #0]
}
 8003488:	e193      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b02      	cmp	r3, #2
 800349e:	f040 8106 	bne.w	80036ae <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	0151      	lsls	r1, r2, #5
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	440a      	add	r2, r1
 80034b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034bc:	f023 0302 	bic.w	r3, r3, #2
 80034c0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	212c      	movs	r1, #44	; 0x2c
 80034c8:	fb01 f303 	mul.w	r3, r1, r3
 80034cc:	4413      	add	r3, r2
 80034ce:	3361      	adds	r3, #97	; 0x61
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d109      	bne.n	80034ea <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	212c      	movs	r1, #44	; 0x2c
 80034dc:	fb01 f303 	mul.w	r3, r1, r3
 80034e0:	4413      	add	r3, r2
 80034e2:	3360      	adds	r3, #96	; 0x60
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e0c9      	b.n	800367e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	212c      	movs	r1, #44	; 0x2c
 80034f0:	fb01 f303 	mul.w	r3, r1, r3
 80034f4:	4413      	add	r3, r2
 80034f6:	3361      	adds	r3, #97	; 0x61
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b05      	cmp	r3, #5
 80034fc:	d109      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	212c      	movs	r1, #44	; 0x2c
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	4413      	add	r3, r2
 800350a:	3360      	adds	r3, #96	; 0x60
 800350c:	2205      	movs	r2, #5
 800350e:	701a      	strb	r2, [r3, #0]
 8003510:	e0b5      	b.n	800367e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	212c      	movs	r1, #44	; 0x2c
 8003518:	fb01 f303 	mul.w	r3, r1, r3
 800351c:	4413      	add	r3, r2
 800351e:	3361      	adds	r3, #97	; 0x61
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d009      	beq.n	800353a <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	212c      	movs	r1, #44	; 0x2c
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	4413      	add	r3, r2
 8003532:	3361      	adds	r3, #97	; 0x61
 8003534:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003536:	2b08      	cmp	r3, #8
 8003538:	d150      	bne.n	80035dc <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	212c      	movs	r1, #44	; 0x2c
 8003540:	fb01 f303 	mul.w	r3, r1, r3
 8003544:	4413      	add	r3, r2
 8003546:	335c      	adds	r3, #92	; 0x5c
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	1c5a      	adds	r2, r3, #1
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	202c      	movs	r0, #44	; 0x2c
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	440b      	add	r3, r1
 8003558:	335c      	adds	r3, #92	; 0x5c
 800355a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	335c      	adds	r3, #92	; 0x5c
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b02      	cmp	r3, #2
 800356e:	d912      	bls.n	8003596 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	335c      	adds	r3, #92	; 0x5c
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3360      	adds	r3, #96	; 0x60
 8003590:	2204      	movs	r2, #4
 8003592:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003594:	e073      	b.n	800367e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3360      	adds	r3, #96	; 0x60
 80035a4:	2202      	movs	r2, #2
 80035a6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80035be:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035c6:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035da:	e050      	b.n	800367e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	212c      	movs	r1, #44	; 0x2c
 80035e2:	fb01 f303 	mul.w	r3, r1, r3
 80035e6:	4413      	add	r3, r2
 80035e8:	3361      	adds	r3, #97	; 0x61
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d122      	bne.n	8003636 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	212c      	movs	r1, #44	; 0x2c
 80035f6:	fb01 f303 	mul.w	r3, r1, r3
 80035fa:	4413      	add	r3, r2
 80035fc:	3360      	adds	r3, #96	; 0x60
 80035fe:	2202      	movs	r2, #2
 8003600:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4413      	add	r3, r2
 800360a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003618:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003620:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4413      	add	r3, r2
 800362a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800362e:	461a      	mov	r2, r3
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6013      	str	r3, [r2, #0]
 8003634:	e023      	b.n	800367e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	212c      	movs	r1, #44	; 0x2c
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	4413      	add	r3, r2
 8003642:	3361      	adds	r3, #97	; 0x61
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b07      	cmp	r3, #7
 8003648:	d119      	bne.n	800367e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	212c      	movs	r1, #44	; 0x2c
 8003650:	fb01 f303 	mul.w	r3, r1, r3
 8003654:	4413      	add	r3, r2
 8003656:	335c      	adds	r3, #92	; 0x5c
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	202c      	movs	r0, #44	; 0x2c
 8003662:	fb00 f303 	mul.w	r3, r0, r3
 8003666:	440b      	add	r3, r1
 8003668:	335c      	adds	r3, #92	; 0x5c
 800366a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3360      	adds	r3, #96	; 0x60
 800367a:	2204      	movs	r2, #4
 800367c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	4413      	add	r3, r2
 8003686:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800368a:	461a      	mov	r2, r3
 800368c:	2302      	movs	r3, #2
 800368e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	b2d9      	uxtb	r1, r3
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	202c      	movs	r0, #44	; 0x2c
 800369a:	fb00 f303 	mul.w	r3, r0, r3
 800369e:	4413      	add	r3, r2
 80036a0:	3360      	adds	r3, #96	; 0x60
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f005 fc1e 	bl	8008ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80036ac:	e081      	b.n	80037b2 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b10      	cmp	r3, #16
 80036c2:	d176      	bne.n	80037b2 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	333f      	adds	r3, #63	; 0x3f
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d121      	bne.n	800371c <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	335c      	adds	r3, #92	; 0x5c
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f003 fa2a 	bl	8006b6e <USB_HC_Halt>
 800371a:	e041      	b.n	80037a0 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	333f      	adds	r3, #63	; 0x3f
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d009      	beq.n	8003744 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	333f      	adds	r3, #63	; 0x3f
 800373e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003740:	2b02      	cmp	r3, #2
 8003742:	d12d      	bne.n	80037a0 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	335c      	adds	r3, #92	; 0x5c
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d120      	bne.n	80037a0 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	212c      	movs	r1, #44	; 0x2c
 8003764:	fb01 f303 	mul.w	r3, r1, r3
 8003768:	4413      	add	r3, r2
 800376a:	3361      	adds	r3, #97	; 0x61
 800376c:	2203      	movs	r2, #3
 800376e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	4413      	add	r3, r2
 8003778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	0151      	lsls	r1, r2, #5
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	440a      	add	r2, r1
 8003786:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800378a:	f043 0302 	orr.w	r3, r3, #2
 800378e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f003 f9e7 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	461a      	mov	r2, r3
 80037ae:	2310      	movs	r3, #16
 80037b0:	6093      	str	r3, [r2, #8]
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b088      	sub	sp, #32
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d119      	bne.n	800381e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f6:	461a      	mov	r2, r3
 80037f8:	2304      	movs	r3, #4
 80037fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	4413      	add	r3, r2
 8003804:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	0151      	lsls	r1, r2, #5
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	440a      	add	r2, r1
 8003812:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003816:	f043 0302 	orr.w	r3, r3, #2
 800381a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800381c:	e3ca      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b20      	cmp	r3, #32
 8003832:	d13e      	bne.n	80038b2 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	015a      	lsls	r2, r3, #5
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	4413      	add	r3, r2
 800383c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003840:	461a      	mov	r2, r3
 8003842:	2320      	movs	r3, #32
 8003844:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	333d      	adds	r3, #61	; 0x3d
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	f040 83ac 	bne.w	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	212c      	movs	r1, #44	; 0x2c
 8003862:	fb01 f303 	mul.w	r3, r1, r3
 8003866:	4413      	add	r3, r2
 8003868:	333d      	adds	r3, #61	; 0x3d
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	212c      	movs	r1, #44	; 0x2c
 8003874:	fb01 f303 	mul.w	r3, r1, r3
 8003878:	4413      	add	r3, r2
 800387a:	3360      	adds	r3, #96	; 0x60
 800387c:	2202      	movs	r2, #2
 800387e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	440a      	add	r2, r1
 8003896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389a:	f043 0302 	orr.w	r3, r3, #2
 800389e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f003 f95f 	bl	8006b6e <USB_HC_Halt>
}
 80038b0:	e380      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038c8:	d122      	bne.n	8003910 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	015a      	lsls	r2, r3, #5
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	4413      	add	r3, r2
 80038d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	0151      	lsls	r1, r2, #5
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	440a      	add	r2, r1
 80038e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	4611      	mov	r1, r2
 80038f4:	4618      	mov	r0, r3
 80038f6:	f003 f93a 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	4413      	add	r3, r2
 8003902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003906:	461a      	mov	r2, r3
 8003908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800390c:	6093      	str	r3, [r2, #8]
}
 800390e:	e351      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0301 	and.w	r3, r3, #1
 8003922:	2b01      	cmp	r3, #1
 8003924:	d150      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	335c      	adds	r3, #92	; 0x5c
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	4413      	add	r3, r2
 8003940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d111      	bne.n	8003972 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	212c      	movs	r1, #44	; 0x2c
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	4413      	add	r3, r2
 800395a:	333d      	adds	r3, #61	; 0x3d
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2340      	movs	r3, #64	; 0x40
 8003970:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	015a      	lsls	r2, r3, #5
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	4413      	add	r3, r2
 800397a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	0151      	lsls	r1, r2, #5
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	440a      	add	r2, r1
 8003988:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	b2d2      	uxtb	r2, r2
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f003 f8e6 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ae:	461a      	mov	r2, r3
 80039b0:	2301      	movs	r3, #1
 80039b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	212c      	movs	r1, #44	; 0x2c
 80039ba:	fb01 f303 	mul.w	r3, r1, r3
 80039be:	4413      	add	r3, r2
 80039c0:	3361      	adds	r3, #97	; 0x61
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
}
 80039c6:	e2f5      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b40      	cmp	r3, #64	; 0x40
 80039dc:	d13c      	bne.n	8003a58 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	212c      	movs	r1, #44	; 0x2c
 80039e4:	fb01 f303 	mul.w	r3, r1, r3
 80039e8:	4413      	add	r3, r2
 80039ea:	3361      	adds	r3, #97	; 0x61
 80039ec:	2204      	movs	r2, #4
 80039ee:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	333d      	adds	r3, #61	; 0x3d
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	335c      	adds	r3, #92	; 0x5c
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	0151      	lsls	r1, r2, #5
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	440a      	add	r2, r1
 8003a2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a2e:	f043 0302 	orr.w	r3, r3, #2
 8003a32:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f003 f895 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a50:	461a      	mov	r2, r3
 8003a52:	2340      	movs	r3, #64	; 0x40
 8003a54:	6093      	str	r3, [r2, #8]
}
 8003a56:	e2ad      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d12a      	bne.n	8003ac4 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	0151      	lsls	r1, r2, #5
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	440a      	add	r2, r1
 8003a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a9a:	f043 0302 	orr.w	r3, r3, #2
 8003a9e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 f85f 	bl	8006b6e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	212c      	movs	r1, #44	; 0x2c
 8003ab6:	fb01 f303 	mul.w	r3, r1, r3
 8003aba:	4413      	add	r3, r2
 8003abc:	3361      	adds	r3, #97	; 0x61
 8003abe:	2205      	movs	r2, #5
 8003ac0:	701a      	strb	r2, [r3, #0]
}
 8003ac2:	e277      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d150      	bne.n	8003b7c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	212c      	movs	r1, #44	; 0x2c
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	4413      	add	r3, r2
 8003ae6:	335c      	adds	r3, #92	; 0x5c
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	212c      	movs	r1, #44	; 0x2c
 8003af2:	fb01 f303 	mul.w	r3, r1, r3
 8003af6:	4413      	add	r3, r2
 8003af8:	3361      	adds	r3, #97	; 0x61
 8003afa:	2203      	movs	r2, #3
 8003afc:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	212c      	movs	r1, #44	; 0x2c
 8003b04:	fb01 f303 	mul.w	r3, r1, r3
 8003b08:	4413      	add	r3, r2
 8003b0a:	333d      	adds	r3, #61	; 0x3d
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d112      	bne.n	8003b38 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	212c      	movs	r1, #44	; 0x2c
 8003b18:	fb01 f303 	mul.w	r3, r1, r3
 8003b1c:	4413      	add	r3, r2
 8003b1e:	333c      	adds	r3, #60	; 0x3c
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d108      	bne.n	8003b38 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	212c      	movs	r1, #44	; 0x2c
 8003b2c:	fb01 f303 	mul.w	r3, r1, r3
 8003b30:	4413      	add	r3, r2
 8003b32:	333d      	adds	r3, #61	; 0x3d
 8003b34:	2201      	movs	r2, #1
 8003b36:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b52:	f043 0302 	orr.w	r3, r3, #2
 8003b56:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	b2d2      	uxtb	r2, r2
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f003 f803 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b74:	461a      	mov	r2, r3
 8003b76:	2310      	movs	r3, #16
 8003b78:	6093      	str	r3, [r2, #8]
}
 8003b7a:	e21b      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b80      	cmp	r3, #128	; 0x80
 8003b90:	d174      	bne.n	8003c7c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d121      	bne.n	8003bde <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	212c      	movs	r1, #44	; 0x2c
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	4413      	add	r3, r2
 8003ba6:	3361      	adds	r3, #97	; 0x61
 8003ba8:	2206      	movs	r2, #6
 8003baa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	0151      	lsls	r1, r2, #5
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	440a      	add	r2, r1
 8003bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bc6:	f043 0302 	orr.w	r3, r3, #2
 8003bca:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f002 ffc9 	bl	8006b6e <USB_HC_Halt>
 8003bdc:	e044      	b.n	8003c68 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	212c      	movs	r1, #44	; 0x2c
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	4413      	add	r3, r2
 8003bea:	335c      	adds	r3, #92	; 0x5c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	6879      	ldr	r1, [r7, #4]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	202c      	movs	r0, #44	; 0x2c
 8003bf6:	fb00 f303 	mul.w	r3, r0, r3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	335c      	adds	r3, #92	; 0x5c
 8003bfe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	335c      	adds	r3, #92	; 0x5c
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d920      	bls.n	8003c56 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	212c      	movs	r1, #44	; 0x2c
 8003c1a:	fb01 f303 	mul.w	r3, r1, r3
 8003c1e:	4413      	add	r3, r2
 8003c20:	335c      	adds	r3, #92	; 0x5c
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	212c      	movs	r1, #44	; 0x2c
 8003c2c:	fb01 f303 	mul.w	r3, r1, r3
 8003c30:	4413      	add	r3, r2
 8003c32:	3360      	adds	r3, #96	; 0x60
 8003c34:	2204      	movs	r2, #4
 8003c36:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	b2d9      	uxtb	r1, r3
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	202c      	movs	r0, #44	; 0x2c
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3360      	adds	r3, #96	; 0x60
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f005 f94a 	bl	8008ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c54:	e008      	b.n	8003c68 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	212c      	movs	r1, #44	; 0x2c
 8003c5c:	fb01 f303 	mul.w	r3, r1, r3
 8003c60:	4413      	add	r3, r2
 8003c62:	3360      	adds	r3, #96	; 0x60
 8003c64:	2202      	movs	r2, #2
 8003c66:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c74:	461a      	mov	r2, r3
 8003c76:	2380      	movs	r3, #128	; 0x80
 8003c78:	6093      	str	r3, [r2, #8]
}
 8003c7a:	e19b      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c92:	d134      	bne.n	8003cfe <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	0151      	lsls	r1, r2, #5
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	440a      	add	r2, r1
 8003caa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cae:	f043 0302 	orr.w	r3, r3, #2
 8003cb2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	4611      	mov	r1, r2
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f002 ff55 	bl	8006b6e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2310      	movs	r3, #16
 8003cd4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ce8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	212c      	movs	r1, #44	; 0x2c
 8003cf0:	fb01 f303 	mul.w	r3, r1, r3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3361      	adds	r3, #97	; 0x61
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	701a      	strb	r2, [r3, #0]
}
 8003cfc:	e15a      	b.n	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 0302 	and.w	r3, r3, #2
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	f040 814f 	bne.w	8003fb4 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	0151      	lsls	r1, r2, #5
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	440a      	add	r2, r1
 8003d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d30:	f023 0302 	bic.w	r3, r3, #2
 8003d34:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d36:	687a      	ldr	r2, [r7, #4]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	212c      	movs	r1, #44	; 0x2c
 8003d3c:	fb01 f303 	mul.w	r3, r1, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	3361      	adds	r3, #97	; 0x61
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d17d      	bne.n	8003e46 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	212c      	movs	r1, #44	; 0x2c
 8003d50:	fb01 f303 	mul.w	r3, r1, r3
 8003d54:	4413      	add	r3, r2
 8003d56:	3360      	adds	r3, #96	; 0x60
 8003d58:	2201      	movs	r2, #1
 8003d5a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	333f      	adds	r3, #63	; 0x3f
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d00a      	beq.n	8003d86 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	333f      	adds	r3, #63	; 0x3f
 8003d7e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	f040 8100 	bne.w	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d113      	bne.n	8003db6 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	212c      	movs	r1, #44	; 0x2c
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	3355      	adds	r3, #85	; 0x55
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	f083 0301 	eor.w	r3, r3, #1
 8003da2:	b2d8      	uxtb	r0, r3
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	212c      	movs	r1, #44	; 0x2c
 8003daa:	fb01 f303 	mul.w	r3, r1, r3
 8003dae:	4413      	add	r3, r2
 8003db0:	3355      	adds	r3, #85	; 0x55
 8003db2:	4602      	mov	r2, r0
 8003db4:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	f040 80e3 	bne.w	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	334c      	adds	r3, #76	; 0x4c
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80d8 	beq.w	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	212c      	movs	r1, #44	; 0x2c
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	334c      	adds	r3, #76	; 0x4c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	202c      	movs	r0, #44	; 0x2c
 8003dec:	fb00 f202 	mul.w	r2, r0, r2
 8003df0:	440a      	add	r2, r1
 8003df2:	3240      	adds	r2, #64	; 0x40
 8003df4:	8812      	ldrh	r2, [r2, #0]
 8003df6:	4413      	add	r3, r2
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	202c      	movs	r0, #44	; 0x2c
 8003e00:	fb00 f202 	mul.w	r2, r0, r2
 8003e04:	440a      	add	r2, r1
 8003e06:	3240      	adds	r2, #64	; 0x40
 8003e08:	8812      	ldrh	r2, [r2, #0]
 8003e0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 80b5 	beq.w	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	212c      	movs	r1, #44	; 0x2c
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	4413      	add	r3, r2
 8003e28:	3355      	adds	r3, #85	; 0x55
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	f083 0301 	eor.w	r3, r3, #1
 8003e30:	b2d8      	uxtb	r0, r3
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3355      	adds	r3, #85	; 0x55
 8003e40:	4602      	mov	r2, r0
 8003e42:	701a      	strb	r2, [r3, #0]
 8003e44:	e09f      	b.n	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	3361      	adds	r3, #97	; 0x61
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d109      	bne.n	8003e6e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	3360      	adds	r3, #96	; 0x60
 8003e68:	2202      	movs	r2, #2
 8003e6a:	701a      	strb	r2, [r3, #0]
 8003e6c:	e08b      	b.n	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	212c      	movs	r1, #44	; 0x2c
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	4413      	add	r3, r2
 8003e7a:	3361      	adds	r3, #97	; 0x61
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b04      	cmp	r3, #4
 8003e80:	d109      	bne.n	8003e96 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	212c      	movs	r1, #44	; 0x2c
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	4413      	add	r3, r2
 8003e8e:	3360      	adds	r3, #96	; 0x60
 8003e90:	2202      	movs	r2, #2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	e077      	b.n	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	212c      	movs	r1, #44	; 0x2c
 8003e9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3361      	adds	r3, #97	; 0x61
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d109      	bne.n	8003ebe <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	212c      	movs	r1, #44	; 0x2c
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	4413      	add	r3, r2
 8003eb6:	3360      	adds	r3, #96	; 0x60
 8003eb8:	2205      	movs	r2, #5
 8003eba:	701a      	strb	r2, [r3, #0]
 8003ebc:	e063      	b.n	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	212c      	movs	r1, #44	; 0x2c
 8003ec4:	fb01 f303 	mul.w	r3, r1, r3
 8003ec8:	4413      	add	r3, r2
 8003eca:	3361      	adds	r3, #97	; 0x61
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d009      	beq.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	3361      	adds	r3, #97	; 0x61
 8003ee0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ee2:	2b08      	cmp	r3, #8
 8003ee4:	d14f      	bne.n	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	335c      	adds	r3, #92	; 0x5c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	6879      	ldr	r1, [r7, #4]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	202c      	movs	r0, #44	; 0x2c
 8003efe:	fb00 f303 	mul.w	r3, r0, r3
 8003f02:	440b      	add	r3, r1
 8003f04:	335c      	adds	r3, #92	; 0x5c
 8003f06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	335c      	adds	r3, #92	; 0x5c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d912      	bls.n	8003f42 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	212c      	movs	r1, #44	; 0x2c
 8003f22:	fb01 f303 	mul.w	r3, r1, r3
 8003f26:	4413      	add	r3, r2
 8003f28:	335c      	adds	r3, #92	; 0x5c
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	212c      	movs	r1, #44	; 0x2c
 8003f34:	fb01 f303 	mul.w	r3, r1, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	3360      	adds	r3, #96	; 0x60
 8003f3c:	2204      	movs	r2, #4
 8003f3e:	701a      	strb	r2, [r3, #0]
 8003f40:	e021      	b.n	8003f86 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	212c      	movs	r1, #44	; 0x2c
 8003f48:	fb01 f303 	mul.w	r3, r1, r3
 8003f4c:	4413      	add	r3, r2
 8003f4e:	3360      	adds	r3, #96	; 0x60
 8003f50:	2202      	movs	r2, #2
 8003f52:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f6a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f72:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	461a      	mov	r2, r3
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f92:	461a      	mov	r2, r3
 8003f94:	2302      	movs	r3, #2
 8003f96:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	b2d9      	uxtb	r1, r3
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	202c      	movs	r0, #44	; 0x2c
 8003fa2:	fb00 f303 	mul.w	r3, r0, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3360      	adds	r3, #96	; 0x60
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f004 ff9a 	bl	8008ee8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003fb4:	bf00      	nop
 8003fb6:	3720      	adds	r7, #32
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08a      	sub	sp, #40	; 0x28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f003 030f 	and.w	r3, r3, #15
 8003fdc:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	0c5b      	lsrs	r3, r3, #17
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	091b      	lsrs	r3, r3, #4
 8003fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ff0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d004      	beq.n	8004002 <HCD_RXQLVL_IRQHandler+0x46>
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	f000 80a9 	beq.w	8004152 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004000:	e0aa      	b.n	8004158 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80a6 	beq.w	8004156 <HCD_RXQLVL_IRQHandler+0x19a>
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	212c      	movs	r1, #44	; 0x2c
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	4413      	add	r3, r2
 8004016:	3344      	adds	r3, #68	; 0x44
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 809b 	beq.w	8004156 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	212c      	movs	r1, #44	; 0x2c
 8004026:	fb01 f303 	mul.w	r3, r1, r3
 800402a:	4413      	add	r3, r2
 800402c:	3350      	adds	r3, #80	; 0x50
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	441a      	add	r2, r3
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	202c      	movs	r0, #44	; 0x2c
 800403a:	fb00 f303 	mul.w	r3, r0, r3
 800403e:	440b      	add	r3, r1
 8004040:	334c      	adds	r3, #76	; 0x4c
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d87a      	bhi.n	800413e <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	3344      	adds	r3, #68	; 0x44
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	b292      	uxth	r2, r2
 8004060:	4619      	mov	r1, r3
 8004062:	f002 f8fd 	bl	8006260 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	212c      	movs	r1, #44	; 0x2c
 800406c:	fb01 f303 	mul.w	r3, r1, r3
 8004070:	4413      	add	r3, r2
 8004072:	3344      	adds	r3, #68	; 0x44
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	441a      	add	r2, r3
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	202c      	movs	r0, #44	; 0x2c
 8004080:	fb00 f303 	mul.w	r3, r0, r3
 8004084:	440b      	add	r3, r1
 8004086:	3344      	adds	r3, #68	; 0x44
 8004088:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	212c      	movs	r1, #44	; 0x2c
 8004090:	fb01 f303 	mul.w	r3, r1, r3
 8004094:	4413      	add	r3, r2
 8004096:	3350      	adds	r3, #80	; 0x50
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	441a      	add	r2, r3
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	202c      	movs	r0, #44	; 0x2c
 80040a4:	fb00 f303 	mul.w	r3, r0, r3
 80040a8:	440b      	add	r3, r1
 80040aa:	3350      	adds	r3, #80	; 0x50
 80040ac:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	015a      	lsls	r2, r3, #5
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	4413      	add	r3, r2
 80040b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	0cdb      	lsrs	r3, r3, #19
 80040be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040c2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	3340      	adds	r3, #64	; 0x40
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	461a      	mov	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4293      	cmp	r3, r2
 80040da:	d13c      	bne.n	8004156 <HCD_RXQLVL_IRQHandler+0x19a>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d039      	beq.n	8004156 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040f8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004100:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800410e:	461a      	mov	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3354      	adds	r3, #84	; 0x54
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	f083 0301 	eor.w	r3, r3, #1
 8004128:	b2d8      	uxtb	r0, r3
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	212c      	movs	r1, #44	; 0x2c
 8004130:	fb01 f303 	mul.w	r3, r1, r3
 8004134:	4413      	add	r3, r2
 8004136:	3354      	adds	r3, #84	; 0x54
 8004138:	4602      	mov	r2, r0
 800413a:	701a      	strb	r2, [r3, #0]
      break;
 800413c:	e00b      	b.n	8004156 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	212c      	movs	r1, #44	; 0x2c
 8004144:	fb01 f303 	mul.w	r3, r1, r3
 8004148:	4413      	add	r3, r2
 800414a:	3360      	adds	r3, #96	; 0x60
 800414c:	2204      	movs	r2, #4
 800414e:	701a      	strb	r2, [r3, #0]
      break;
 8004150:	e001      	b.n	8004156 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004156:	bf00      	nop
  }
}
 8004158:	bf00      	nop
 800415a:	3728      	adds	r7, #40	; 0x28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800418c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b02      	cmp	r3, #2
 8004196:	d10b      	bne.n	80041b0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d102      	bne.n	80041a8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f004 fe84 	bl	8008eb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f043 0302 	orr.w	r3, r3, #2
 80041ae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d132      	bne.n	8004220 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f043 0308 	orr.w	r3, r3, #8
 80041c0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d126      	bne.n	800421a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d113      	bne.n	80041fc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80041da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041de:	d106      	bne.n	80041ee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f002 f99a 	bl	8006520 <USB_InitFSLSPClkSel>
 80041ec:	e011      	b.n	8004212 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2101      	movs	r1, #1
 80041f4:	4618      	mov	r0, r3
 80041f6:	f002 f993 	bl	8006520 <USB_InitFSLSPClkSel>
 80041fa:	e00a      	b.n	8004212 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d106      	bne.n	8004212 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800420a:	461a      	mov	r2, r3
 800420c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004210:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f004 fe76 	bl	8008f04 <HAL_HCD_PortEnabled_Callback>
 8004218:	e002      	b.n	8004220 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f004 fe80 	bl	8008f20 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b20      	cmp	r3, #32
 8004228:	d103      	bne.n	8004232 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f043 0320 	orr.w	r3, r3, #32
 8004230:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004238:	461a      	mov	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	6013      	str	r3, [r2, #0]
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e12b      	b.n	80044b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7fc fd22 	bl	8000cb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2224      	movs	r2, #36	; 0x24
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0201 	bic.w	r2, r2, #1
 800428a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800429a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042ac:	f001 f9fc 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 80042b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4a81      	ldr	r2, [pc, #516]	; (80044bc <HAL_I2C_Init+0x274>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d807      	bhi.n	80042cc <HAL_I2C_Init+0x84>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <HAL_I2C_Init+0x278>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	bf94      	ite	ls
 80042c4:	2301      	movls	r3, #1
 80042c6:	2300      	movhi	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	e006      	b.n	80042da <HAL_I2C_Init+0x92>
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a7d      	ldr	r2, [pc, #500]	; (80044c4 <HAL_I2C_Init+0x27c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	bf94      	ite	ls
 80042d4:	2301      	movls	r3, #1
 80042d6:	2300      	movhi	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e0e7      	b.n	80044b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4a78      	ldr	r2, [pc, #480]	; (80044c8 <HAL_I2C_Init+0x280>)
 80042e6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ea:	0c9b      	lsrs	r3, r3, #18
 80042ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	430a      	orrs	r2, r1
 8004300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6a1b      	ldr	r3, [r3, #32]
 8004308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4a6a      	ldr	r2, [pc, #424]	; (80044bc <HAL_I2C_Init+0x274>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d802      	bhi.n	800431c <HAL_I2C_Init+0xd4>
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	3301      	adds	r3, #1
 800431a:	e009      	b.n	8004330 <HAL_I2C_Init+0xe8>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004322:	fb02 f303 	mul.w	r3, r2, r3
 8004326:	4a69      	ldr	r2, [pc, #420]	; (80044cc <HAL_I2C_Init+0x284>)
 8004328:	fba2 2303 	umull	r2, r3, r2, r3
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	3301      	adds	r3, #1
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6812      	ldr	r2, [r2, #0]
 8004334:	430b      	orrs	r3, r1
 8004336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	495c      	ldr	r1, [pc, #368]	; (80044bc <HAL_I2C_Init+0x274>)
 800434c:	428b      	cmp	r3, r1
 800434e:	d819      	bhi.n	8004384 <HAL_I2C_Init+0x13c>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	1e59      	subs	r1, r3, #1
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	fbb1 f3f3 	udiv	r3, r1, r3
 800435e:	1c59      	adds	r1, r3, #1
 8004360:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004364:	400b      	ands	r3, r1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00a      	beq.n	8004380 <HAL_I2C_Init+0x138>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1e59      	subs	r1, r3, #1
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fbb1 f3f3 	udiv	r3, r1, r3
 8004378:	3301      	adds	r3, #1
 800437a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437e:	e051      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 8004380:	2304      	movs	r3, #4
 8004382:	e04f      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d111      	bne.n	80043b0 <HAL_I2C_Init+0x168>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1e58      	subs	r0, r3, #1
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	440b      	add	r3, r1
 800439a:	fbb0 f3f3 	udiv	r3, r0, r3
 800439e:	3301      	adds	r3, #1
 80043a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	bf0c      	ite	eq
 80043a8:	2301      	moveq	r3, #1
 80043aa:	2300      	movne	r3, #0
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	e012      	b.n	80043d6 <HAL_I2C_Init+0x18e>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	0099      	lsls	r1, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	bf0c      	ite	eq
 80043d0:	2301      	moveq	r3, #1
 80043d2:	2300      	movne	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <HAL_I2C_Init+0x196>
 80043da:	2301      	movs	r3, #1
 80043dc:	e022      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10e      	bne.n	8004404 <HAL_I2C_Init+0x1bc>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1e58      	subs	r0, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	460b      	mov	r3, r1
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	440b      	add	r3, r1
 80043f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004402:	e00f      	b.n	8004424 <HAL_I2C_Init+0x1dc>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	1e58      	subs	r0, r3, #1
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6859      	ldr	r1, [r3, #4]
 800440c:	460b      	mov	r3, r1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	0099      	lsls	r1, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	fbb0 f3f3 	udiv	r3, r0, r3
 800441a:	3301      	adds	r3, #1
 800441c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004420:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6809      	ldr	r1, [r1, #0]
 8004428:	4313      	orrs	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69da      	ldr	r2, [r3, #28]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a1b      	ldr	r3, [r3, #32]
 800443e:	431a      	orrs	r2, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6911      	ldr	r1, [r2, #16]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68d2      	ldr	r2, [r2, #12]
 800445e:	4311      	orrs	r1, r2
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	430b      	orrs	r3, r1
 8004466:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	000186a0 	.word	0x000186a0
 80044c0:	001e847f 	.word	0x001e847f
 80044c4:	003d08ff 	.word	0x003d08ff
 80044c8:	431bde83 	.word	0x431bde83
 80044cc:	10624dd3 	.word	0x10624dd3

080044d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e128      	b.n	8004734 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a90      	ldr	r2, [pc, #576]	; (800473c <HAL_I2S_Init+0x26c>)
 80044fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7fc fc23 	bl	8000d48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2202      	movs	r2, #2
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004518:	f023 030f 	bic.w	r3, r3, #15
 800451c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2202      	movs	r2, #2
 8004524:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	2b02      	cmp	r3, #2
 800452c:	d060      	beq.n	80045f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d102      	bne.n	800453c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004536:	2310      	movs	r3, #16
 8004538:	617b      	str	r3, [r7, #20]
 800453a:	e001      	b.n	8004540 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800453c:	2320      	movs	r3, #32
 800453e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b20      	cmp	r3, #32
 8004546:	d802      	bhi.n	800454e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800454e:	2001      	movs	r0, #1
 8004550:	f001 f9a0 	bl	8005894 <HAL_RCCEx_GetPeriphCLKFreq>
 8004554:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800455e:	d125      	bne.n	80045ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004572:	4613      	mov	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4413      	add	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	461a      	mov	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	3305      	adds	r3, #5
 8004586:	613b      	str	r3, [r7, #16]
 8004588:	e01f      	b.n	80045ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	00db      	lsls	r3, r3, #3
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	fbb2 f2f3 	udiv	r2, r2, r3
 8004594:	4613      	mov	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	461a      	mov	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a6:	3305      	adds	r3, #5
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	e00e      	b.n	80045ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	3305      	adds	r3, #5
 80045c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4a5c      	ldr	r2, [pc, #368]	; (8004740 <HAL_I2S_Init+0x270>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	08db      	lsrs	r3, r3, #3
 80045d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	085b      	lsrs	r3, r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	021b      	lsls	r3, r3, #8
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	e003      	b.n	80045f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80045f0:	2302      	movs	r3, #2
 80045f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d902      	bls.n	8004604 <HAL_I2S_Init+0x134>
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2bff      	cmp	r3, #255	; 0xff
 8004602:	d907      	bls.n	8004614 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	f043 0210 	orr.w	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e08f      	b.n	8004734 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	ea42 0103 	orr.w	r1, r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	430a      	orrs	r2, r1
 8004626:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004632:	f023 030f 	bic.w	r3, r3, #15
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6851      	ldr	r1, [r2, #4]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6892      	ldr	r2, [r2, #8]
 800463e:	4311      	orrs	r1, r2
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	68d2      	ldr	r2, [r2, #12]
 8004644:	4311      	orrs	r1, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6992      	ldr	r2, [r2, #24]
 800464a:	430a      	orrs	r2, r1
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004656:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d161      	bne.n	8004724 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a38      	ldr	r2, [pc, #224]	; (8004744 <HAL_I2S_Init+0x274>)
 8004664:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a37      	ldr	r2, [pc, #220]	; (8004748 <HAL_I2S_Init+0x278>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d101      	bne.n	8004674 <HAL_I2S_Init+0x1a4>
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <HAL_I2S_Init+0x27c>)
 8004672:	e001      	b.n	8004678 <HAL_I2S_Init+0x1a8>
 8004674:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004678:	69db      	ldr	r3, [r3, #28]
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6812      	ldr	r2, [r2, #0]
 800467e:	4932      	ldr	r1, [pc, #200]	; (8004748 <HAL_I2S_Init+0x278>)
 8004680:	428a      	cmp	r2, r1
 8004682:	d101      	bne.n	8004688 <HAL_I2S_Init+0x1b8>
 8004684:	4a31      	ldr	r2, [pc, #196]	; (800474c <HAL_I2S_Init+0x27c>)
 8004686:	e001      	b.n	800468c <HAL_I2S_Init+0x1bc>
 8004688:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800468c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004690:	f023 030f 	bic.w	r3, r3, #15
 8004694:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a2b      	ldr	r2, [pc, #172]	; (8004748 <HAL_I2S_Init+0x278>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_I2S_Init+0x1d4>
 80046a0:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_I2S_Init+0x27c>)
 80046a2:	e001      	b.n	80046a8 <HAL_I2S_Init+0x1d8>
 80046a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a8:	2202      	movs	r2, #2
 80046aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a25      	ldr	r2, [pc, #148]	; (8004748 <HAL_I2S_Init+0x278>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d101      	bne.n	80046ba <HAL_I2S_Init+0x1ea>
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <HAL_I2S_Init+0x27c>)
 80046b8:	e001      	b.n	80046be <HAL_I2S_Init+0x1ee>
 80046ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046ca:	d003      	beq.n	80046d4 <HAL_I2S_Init+0x204>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d103      	bne.n	80046dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80046d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d8:	613b      	str	r3, [r7, #16]
 80046da:	e001      	b.n	80046e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80046dc:	2300      	movs	r3, #0
 80046de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046ea:	4313      	orrs	r3, r2
 80046ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046f4:	4313      	orrs	r3, r2
 80046f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80046fe:	4313      	orrs	r3, r2
 8004700:	b29a      	uxth	r2, r3
 8004702:	897b      	ldrh	r3, [r7, #10]
 8004704:	4313      	orrs	r3, r2
 8004706:	b29b      	uxth	r3, r3
 8004708:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800470c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <HAL_I2S_Init+0x278>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d101      	bne.n	800471c <HAL_I2S_Init+0x24c>
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_I2S_Init+0x27c>)
 800471a:	e001      	b.n	8004720 <HAL_I2S_Init+0x250>
 800471c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004720:	897a      	ldrh	r2, [r7, #10]
 8004722:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	08004847 	.word	0x08004847
 8004740:	cccccccd 	.word	0xcccccccd
 8004744:	0800495d 	.word	0x0800495d
 8004748:	40003800 	.word	0x40003800
 800474c:	40003400 	.word	0x40003400

08004750 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	881a      	ldrh	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c9a      	adds	r2, r3, #2
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10e      	bne.n	80047e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80047d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff ffb8 	bl	8004750 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047e0:	bf00      	nop
 80047e2:	3708      	adds	r7, #8
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	b292      	uxth	r2, r2
 80047fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	1c9a      	adds	r2, r3, #2
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800480c:	b29b      	uxth	r3, r3
 800480e:	3b01      	subs	r3, #1
 8004810:	b29a      	uxth	r2, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800481a:	b29b      	uxth	r3, r3
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10e      	bne.n	800483e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800482e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff ff93 	bl	8004764 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b086      	sub	sp, #24
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b04      	cmp	r3, #4
 8004860:	d13a      	bne.n	80048d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b01      	cmp	r3, #1
 800486a:	d109      	bne.n	8004880 <I2S_IRQHandler+0x3a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	2b40      	cmp	r3, #64	; 0x40
 8004878:	d102      	bne.n	8004880 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ffb4 	bl	80047e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d126      	bne.n	80048d8 <I2S_IRQHandler+0x92>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0320 	and.w	r3, r3, #32
 8004894:	2b20      	cmp	r3, #32
 8004896:	d11f      	bne.n	80048d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80048a8:	2300      	movs	r3, #0
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	613b      	str	r3, [r7, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	613b      	str	r3, [r7, #16]
 80048bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ca:	f043 0202 	orr.w	r2, r3, #2
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff ff50 	bl	8004778 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d136      	bne.n	8004952 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d109      	bne.n	8004902 <I2S_IRQHandler+0xbc>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f8:	2b80      	cmp	r3, #128	; 0x80
 80048fa:	d102      	bne.n	8004902 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff45 	bl	800478c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d122      	bne.n	8004952 <I2S_IRQHandler+0x10c>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0320 	and.w	r3, r3, #32
 8004916:	2b20      	cmp	r3, #32
 8004918:	d11b      	bne.n	8004952 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004928:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004944:	f043 0204 	orr.w	r2, r3, #4
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff ff13 	bl	8004778 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004952:	bf00      	nop
 8004954:	3718      	adds	r7, #24
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4aa2      	ldr	r2, [pc, #648]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004976:	4ba2      	ldr	r3, [pc, #648]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004978:	e001      	b.n	800497e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800497a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a9b      	ldr	r2, [pc, #620]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d101      	bne.n	8004998 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004994:	4b9a      	ldr	r3, [pc, #616]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004996:	e001      	b.n	800499c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004998:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d004      	beq.n	80049b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8099 	bne.w	8004ae6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d107      	bne.n	80049ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 f925 	bl	8004c18 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 f9c8 	bl	8004d78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	d13a      	bne.n	8004a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	f003 0320 	and.w	r3, r3, #32
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d035      	beq.n	8004a68 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a7e      	ldr	r2, [pc, #504]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004a06:	4b7e      	ldr	r3, [pc, #504]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a08:	e001      	b.n	8004a0e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004a0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4979      	ldr	r1, [pc, #484]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a16:	428b      	cmp	r3, r1
 8004a18:	d101      	bne.n	8004a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004a1a:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a1c:	e001      	b.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a22:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a26:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a36:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	60fb      	str	r3, [r7, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2201      	movs	r2, #1
 8004a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5a:	f043 0202 	orr.w	r2, r3, #2
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fe88 	bl	8004778 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	f040 80be 	bne.w	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f000 80b8 	beq.w	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a8e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a59      	ldr	r2, [pc, #356]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a9a:	4b59      	ldr	r3, [pc, #356]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004a9c:	e001      	b.n	8004aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4954      	ldr	r1, [pc, #336]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004aaa:	428b      	cmp	r3, r1
 8004aac:	d101      	bne.n	8004ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004aae:	4b54      	ldr	r3, [pc, #336]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ab0:	e001      	b.n	8004ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004ab2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004aba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004abc:	2300      	movs	r3, #0
 8004abe:	60bb      	str	r3, [r7, #8]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad6:	f043 0204 	orr.w	r2, r3, #4
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fe4a 	bl	8004778 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ae4:	e084      	b.n	8004bf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d107      	bne.n	8004b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f8be 	bl	8004c7c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f003 0301 	and.w	r3, r3, #1
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d107      	bne.n	8004b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f8fd 	bl	8004d14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d12f      	bne.n	8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02a      	beq.n	8004b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a2e      	ldr	r2, [pc, #184]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d101      	bne.n	8004b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004b48:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b4a:	e001      	b.n	8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004b4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4929      	ldr	r1, [pc, #164]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	d101      	bne.n	8004b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004b5c:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004b5e:	e001      	b.n	8004b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004b60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	f043 0202 	orr.w	r2, r3, #2
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f7ff fdfa 	bl	8004778 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d131      	bne.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02c      	beq.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d101      	bne.n	8004ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004ba2:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ba4:	e001      	b.n	8004baa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004ba6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4912      	ldr	r1, [pc, #72]	; (8004bfc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004bb2:	428b      	cmp	r3, r1
 8004bb4:	d101      	bne.n	8004bba <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004bb6:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004bb8:	e001      	b.n	8004bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004bba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bbe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bc2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004bd2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be0:	f043 0204 	orr.w	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fdc5 	bl	8004778 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bee:	e000      	b.n	8004bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004bf0:	bf00      	nop
}
 8004bf2:	bf00      	nop
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	40003800 	.word	0x40003800
 8004c00:	40003400 	.word	0x40003400

08004c04 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	1c99      	adds	r1, r3, #2
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6251      	str	r1, [r2, #36]	; 0x24
 8004c2a:	881a      	ldrh	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d113      	bne.n	8004c72 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d106      	bne.n	8004c72 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff ffc9 	bl	8004c04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c99      	adds	r1, r3, #2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6251      	str	r1, [r2, #36]	; 0x24
 8004c8e:	8819      	ldrh	r1, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <I2SEx_TxISR_I2SExt+0x90>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d101      	bne.n	8004c9e <I2SEx_TxISR_I2SExt+0x22>
 8004c9a:	4b1d      	ldr	r3, [pc, #116]	; (8004d10 <I2SEx_TxISR_I2SExt+0x94>)
 8004c9c:	e001      	b.n	8004ca2 <I2SEx_TxISR_I2SExt+0x26>
 8004c9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ca2:	460a      	mov	r2, r1
 8004ca4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d121      	bne.n	8004d02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <I2SEx_TxISR_I2SExt+0x90>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d101      	bne.n	8004ccc <I2SEx_TxISR_I2SExt+0x50>
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <I2SEx_TxISR_I2SExt+0x94>)
 8004cca:	e001      	b.n	8004cd0 <I2SEx_TxISR_I2SExt+0x54>
 8004ccc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	490d      	ldr	r1, [pc, #52]	; (8004d0c <I2SEx_TxISR_I2SExt+0x90>)
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	d101      	bne.n	8004ce0 <I2SEx_TxISR_I2SExt+0x64>
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <I2SEx_TxISR_I2SExt+0x94>)
 8004cde:	e001      	b.n	8004ce4 <I2SEx_TxISR_I2SExt+0x68>
 8004ce0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ce8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d106      	bne.n	8004d02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff81 	bl	8004c04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	40003800 	.word	0x40003800
 8004d10:	40003400 	.word	0x40003400

08004d14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68d8      	ldr	r0, [r3, #12]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d26:	1c99      	adds	r1, r3, #2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d2c:	b282      	uxth	r2, r0
 8004d2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d113      	bne.n	8004d70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d106      	bne.n	8004d70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff ff4a 	bl	8004c04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a20      	ldr	r2, [pc, #128]	; (8004e08 <I2SEx_RxISR_I2SExt+0x90>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d101      	bne.n	8004d8e <I2SEx_RxISR_I2SExt+0x16>
 8004d8a:	4b20      	ldr	r3, [pc, #128]	; (8004e0c <I2SEx_RxISR_I2SExt+0x94>)
 8004d8c:	e001      	b.n	8004d92 <I2SEx_RxISR_I2SExt+0x1a>
 8004d8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d92:	68d8      	ldr	r0, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d98:	1c99      	adds	r1, r3, #2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004d9e:	b282      	uxth	r2, r0
 8004da0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d121      	bne.n	8004dfe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a12      	ldr	r2, [pc, #72]	; (8004e08 <I2SEx_RxISR_I2SExt+0x90>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d101      	bne.n	8004dc8 <I2SEx_RxISR_I2SExt+0x50>
 8004dc4:	4b11      	ldr	r3, [pc, #68]	; (8004e0c <I2SEx_RxISR_I2SExt+0x94>)
 8004dc6:	e001      	b.n	8004dcc <I2SEx_RxISR_I2SExt+0x54>
 8004dc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	490d      	ldr	r1, [pc, #52]	; (8004e08 <I2SEx_RxISR_I2SExt+0x90>)
 8004dd4:	428b      	cmp	r3, r1
 8004dd6:	d101      	bne.n	8004ddc <I2SEx_RxISR_I2SExt+0x64>
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <I2SEx_RxISR_I2SExt+0x94>)
 8004dda:	e001      	b.n	8004de0 <I2SEx_RxISR_I2SExt+0x68>
 8004ddc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004de0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004de4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff ff03 	bl	8004c04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40003800 	.word	0x40003800
 8004e0c:	40003400 	.word	0x40003400

08004e10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e264      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d075      	beq.n	8004f1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e2e:	4ba3      	ldr	r3, [pc, #652]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f003 030c 	and.w	r3, r3, #12
 8004e36:	2b04      	cmp	r3, #4
 8004e38:	d00c      	beq.n	8004e54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e3a:	4ba0      	ldr	r3, [pc, #640]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d112      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e46:	4b9d      	ldr	r3, [pc, #628]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e52:	d10b      	bne.n	8004e6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e54:	4b99      	ldr	r3, [pc, #612]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d05b      	beq.n	8004f18 <HAL_RCC_OscConfig+0x108>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d157      	bne.n	8004f18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e23f      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e74:	d106      	bne.n	8004e84 <HAL_RCC_OscConfig+0x74>
 8004e76:	4b91      	ldr	r3, [pc, #580]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a90      	ldr	r2, [pc, #576]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	e01d      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x98>
 8004e8e:	4b8b      	ldr	r3, [pc, #556]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a8a      	ldr	r2, [pc, #552]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	4b88      	ldr	r3, [pc, #544]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a87      	ldr	r2, [pc, #540]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0xb0>
 8004ea8:	4b84      	ldr	r3, [pc, #528]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a83      	ldr	r2, [pc, #524]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	4b81      	ldr	r3, [pc, #516]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a80      	ldr	r2, [pc, #512]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d013      	beq.n	8004ef0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fc f8f6 	bl	80010b8 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed0:	f7fc f8f2 	bl	80010b8 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b64      	cmp	r3, #100	; 0x64
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e204      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ee2:	4b76      	ldr	r3, [pc, #472]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0xc0>
 8004eee:	e014      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fc f8e2 	bl	80010b8 <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ef8:	f7fc f8de 	bl	80010b8 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b64      	cmp	r3, #100	; 0x64
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e1f0      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f0a:	4b6c      	ldr	r3, [pc, #432]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0xe8>
 8004f16:	e000      	b.n	8004f1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d063      	beq.n	8004fee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f32:	4b62      	ldr	r3, [pc, #392]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d11c      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f3e:	4b5f      	ldr	r3, [pc, #380]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d116      	bne.n	8004f78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f4a:	4b5c      	ldr	r3, [pc, #368]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d001      	beq.n	8004f62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e1c4      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f62:	4b56      	ldr	r3, [pc, #344]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4952      	ldr	r1, [pc, #328]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	e03a      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d020      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f80:	4b4f      	ldr	r3, [pc, #316]	; (80050c0 <HAL_RCC_OscConfig+0x2b0>)
 8004f82:	2201      	movs	r2, #1
 8004f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f86:	f7fc f897 	bl	80010b8 <HAL_GetTick>
 8004f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f8c:	e008      	b.n	8004fa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f8e:	f7fc f893 	bl	80010b8 <HAL_GetTick>
 8004f92:	4602      	mov	r2, r0
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d901      	bls.n	8004fa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e1a5      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa0:	4b46      	ldr	r3, [pc, #280]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0f0      	beq.n	8004f8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fac:	4b43      	ldr	r3, [pc, #268]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	4940      	ldr	r1, [pc, #256]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	600b      	str	r3, [r1, #0]
 8004fc0:	e015      	b.n	8004fee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_OscConfig+0x2b0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fc f876 	bl	80010b8 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fc f872 	bl	80010b8 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e184      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	4b36      	ldr	r3, [pc, #216]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d030      	beq.n	800505c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d016      	beq.n	8005030 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005002:	4b30      	ldr	r3, [pc, #192]	; (80050c4 <HAL_RCC_OscConfig+0x2b4>)
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fc f856 	bl	80010b8 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005010:	f7fc f852 	bl	80010b8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e164      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005022:	4b26      	ldr	r3, [pc, #152]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0f0      	beq.n	8005010 <HAL_RCC_OscConfig+0x200>
 800502e:	e015      	b.n	800505c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005030:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_OscConfig+0x2b4>)
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005036:	f7fc f83f 	bl	80010b8 <HAL_GetTick>
 800503a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800503c:	e008      	b.n	8005050 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800503e:	f7fc f83b 	bl	80010b8 <HAL_GetTick>
 8005042:	4602      	mov	r2, r0
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	1ad3      	subs	r3, r2, r3
 8005048:	2b02      	cmp	r3, #2
 800504a:	d901      	bls.n	8005050 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e14d      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1f0      	bne.n	800503e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 80a0 	beq.w	80051aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800506a:	2300      	movs	r3, #0
 800506c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800506e:	4b13      	ldr	r3, [pc, #76]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10f      	bne.n	800509a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800507a:	2300      	movs	r3, #0
 800507c:	60bb      	str	r3, [r7, #8]
 800507e:	4b0f      	ldr	r3, [pc, #60]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005082:	4a0e      	ldr	r2, [pc, #56]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 8005084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005088:	6413      	str	r3, [r2, #64]	; 0x40
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <HAL_RCC_OscConfig+0x2ac>)
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005092:	60bb      	str	r3, [r7, #8]
 8005094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509a:	4b0b      	ldr	r3, [pc, #44]	; (80050c8 <HAL_RCC_OscConfig+0x2b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d121      	bne.n	80050ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050a6:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_RCC_OscConfig+0x2b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <HAL_RCC_OscConfig+0x2b8>)
 80050ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050b2:	f7fc f801 	bl	80010b8 <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050b8:	e011      	b.n	80050de <HAL_RCC_OscConfig+0x2ce>
 80050ba:	bf00      	nop
 80050bc:	40023800 	.word	0x40023800
 80050c0:	42470000 	.word	0x42470000
 80050c4:	42470e80 	.word	0x42470e80
 80050c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050cc:	f7fb fff4 	bl	80010b8 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e106      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b85      	ldr	r3, [pc, #532]	; (80052f4 <HAL_RCC_OscConfig+0x4e4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d106      	bne.n	8005100 <HAL_RCC_OscConfig+0x2f0>
 80050f2:	4b81      	ldr	r3, [pc, #516]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f6:	4a80      	ldr	r2, [pc, #512]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80050f8:	f043 0301 	orr.w	r3, r3, #1
 80050fc:	6713      	str	r3, [r2, #112]	; 0x70
 80050fe:	e01c      	b.n	800513a <HAL_RCC_OscConfig+0x32a>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	2b05      	cmp	r3, #5
 8005106:	d10c      	bne.n	8005122 <HAL_RCC_OscConfig+0x312>
 8005108:	4b7b      	ldr	r3, [pc, #492]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510c:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800510e:	f043 0304 	orr.w	r3, r3, #4
 8005112:	6713      	str	r3, [r2, #112]	; 0x70
 8005114:	4b78      	ldr	r3, [pc, #480]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a77      	ldr	r2, [pc, #476]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800511a:	f043 0301 	orr.w	r3, r3, #1
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
 8005120:	e00b      	b.n	800513a <HAL_RCC_OscConfig+0x32a>
 8005122:	4b75      	ldr	r3, [pc, #468]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005126:	4a74      	ldr	r2, [pc, #464]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	6713      	str	r3, [r2, #112]	; 0x70
 800512e:	4b72      	ldr	r3, [pc, #456]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005132:	4a71      	ldr	r2, [pc, #452]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d015      	beq.n	800516e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005142:	f7fb ffb9 	bl	80010b8 <HAL_GetTick>
 8005146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005148:	e00a      	b.n	8005160 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800514a:	f7fb ffb5 	bl	80010b8 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f241 3288 	movw	r2, #5000	; 0x1388
 8005158:	4293      	cmp	r3, r2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e0c5      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	4b65      	ldr	r3, [pc, #404]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0ee      	beq.n	800514a <HAL_RCC_OscConfig+0x33a>
 800516c:	e014      	b.n	8005198 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800516e:	f7fb ffa3 	bl	80010b8 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005174:	e00a      	b.n	800518c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005176:	f7fb ff9f 	bl	80010b8 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e0af      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518c:	4b5a      	ldr	r3, [pc, #360]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1ee      	bne.n	8005176 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005198:	7dfb      	ldrb	r3, [r7, #23]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d105      	bne.n	80051aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519e:	4b56      	ldr	r3, [pc, #344]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	4a55      	ldr	r2, [pc, #340]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 809b 	beq.w	80052ea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051b4:	4b50      	ldr	r3, [pc, #320]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 030c 	and.w	r3, r3, #12
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d05c      	beq.n	800527a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d141      	bne.n	800524c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051c8:	4b4c      	ldr	r3, [pc, #304]	; (80052fc <HAL_RCC_OscConfig+0x4ec>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ce:	f7fb ff73 	bl	80010b8 <HAL_GetTick>
 80051d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d4:	e008      	b.n	80051e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051d6:	f7fb ff6f 	bl	80010b8 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e081      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e8:	4b43      	ldr	r3, [pc, #268]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f0      	bne.n	80051d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	431a      	orrs	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	019b      	lsls	r3, r3, #6
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	085b      	lsrs	r3, r3, #1
 800520c:	3b01      	subs	r3, #1
 800520e:	041b      	lsls	r3, r3, #16
 8005210:	431a      	orrs	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005216:	061b      	lsls	r3, r3, #24
 8005218:	4937      	ldr	r1, [pc, #220]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800521a:	4313      	orrs	r3, r2
 800521c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800521e:	4b37      	ldr	r3, [pc, #220]	; (80052fc <HAL_RCC_OscConfig+0x4ec>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005224:	f7fb ff48 	bl	80010b8 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800522a:	e008      	b.n	800523e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800522c:	f7fb ff44 	bl	80010b8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	2b02      	cmp	r3, #2
 8005238:	d901      	bls.n	800523e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e056      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800523e:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d0f0      	beq.n	800522c <HAL_RCC_OscConfig+0x41c>
 800524a:	e04e      	b.n	80052ea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800524c:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <HAL_RCC_OscConfig+0x4ec>)
 800524e:	2200      	movs	r2, #0
 8005250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005252:	f7fb ff31 	bl	80010b8 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525a:	f7fb ff2d 	bl	80010b8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e03f      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526c:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1f0      	bne.n	800525a <HAL_RCC_OscConfig+0x44a>
 8005278:	e037      	b.n	80052ea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e032      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005286:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <HAL_RCC_OscConfig+0x4e8>)
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	2b01      	cmp	r3, #1
 8005292:	d028      	beq.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800529e:	429a      	cmp	r2, r3
 80052a0:	d121      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d11a      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052b6:	4013      	ands	r3, r2
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052bc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	3b01      	subs	r3, #1
 80052d0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d107      	bne.n	80052e6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d001      	beq.n	80052ea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40007000 	.word	0x40007000
 80052f8:	40023800 	.word	0x40023800
 80052fc:	42470060 	.word	0x42470060

08005300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0cc      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005314:	4b68      	ldr	r3, [pc, #416]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0307 	and.w	r3, r3, #7
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	429a      	cmp	r2, r3
 8005320:	d90c      	bls.n	800533c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005322:	4b65      	ldr	r3, [pc, #404]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	b2d2      	uxtb	r2, r2
 8005328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532a:	4b63      	ldr	r3, [pc, #396]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0307 	and.w	r3, r3, #7
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	429a      	cmp	r2, r3
 8005336:	d001      	beq.n	800533c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e0b8      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d020      	beq.n	800538a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005354:	4b59      	ldr	r3, [pc, #356]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	4a58      	ldr	r2, [pc, #352]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800535a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800535e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d005      	beq.n	8005378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800536c:	4b53      	ldr	r3, [pc, #332]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	4a52      	ldr	r2, [pc, #328]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005378:	4b50      	ldr	r3, [pc, #320]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	494d      	ldr	r1, [pc, #308]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	4313      	orrs	r3, r2
 8005388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d044      	beq.n	8005420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b01      	cmp	r3, #1
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800539e:	4b47      	ldr	r3, [pc, #284]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d119      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e07f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d003      	beq.n	80053be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053ba:	2b03      	cmp	r3, #3
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053be:	4b3f      	ldr	r3, [pc, #252]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d109      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e06f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ce:	4b3b      	ldr	r3, [pc, #236]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e067      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053de:	4b37      	ldr	r3, [pc, #220]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 0203 	bic.w	r2, r3, #3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	4934      	ldr	r1, [pc, #208]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f0:	f7fb fe62 	bl	80010b8 <HAL_GetTick>
 80053f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053f6:	e00a      	b.n	800540e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053f8:	f7fb fe5e 	bl	80010b8 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	f241 3288 	movw	r2, #5000	; 0x1388
 8005406:	4293      	cmp	r3, r2
 8005408:	d901      	bls.n	800540e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e04f      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540e:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 020c 	and.w	r2, r3, #12
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	429a      	cmp	r2, r3
 800541e:	d1eb      	bne.n	80053f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005420:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	683a      	ldr	r2, [r7, #0]
 800542a:	429a      	cmp	r2, r3
 800542c:	d20c      	bcs.n	8005448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800542e:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d001      	beq.n	8005448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e032      	b.n	80054ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d008      	beq.n	8005466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4916      	ldr	r1, [pc, #88]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d009      	beq.n	8005486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005472:	4b12      	ldr	r3, [pc, #72]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	490e      	ldr	r1, [pc, #56]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005486:	f000 f821 	bl	80054cc <HAL_RCC_GetSysClockFreq>
 800548a:	4602      	mov	r2, r0
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	091b      	lsrs	r3, r3, #4
 8005492:	f003 030f 	and.w	r3, r3, #15
 8005496:	490a      	ldr	r1, [pc, #40]	; (80054c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005498:	5ccb      	ldrb	r3, [r1, r3]
 800549a:	fa22 f303 	lsr.w	r3, r2, r3
 800549e:	4a09      	ldr	r2, [pc, #36]	; (80054c4 <HAL_RCC_ClockConfig+0x1c4>)
 80054a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054a2:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fb fdc2 	bl	8001030 <HAL_InitTick>

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40023c00 	.word	0x40023c00
 80054bc:	40023800 	.word	0x40023800
 80054c0:	08009554 	.word	0x08009554
 80054c4:	20000000 	.word	0x20000000
 80054c8:	20000004 	.word	0x20000004

080054cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054d4:	2300      	movs	r3, #0
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	2300      	movs	r3, #0
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	2300      	movs	r3, #0
 80054de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054e4:	4b67      	ldr	r3, [pc, #412]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f003 030c 	and.w	r3, r3, #12
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d00d      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x40>
 80054f0:	2b08      	cmp	r3, #8
 80054f2:	f200 80bd 	bhi.w	8005670 <HAL_RCC_GetSysClockFreq+0x1a4>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d002      	beq.n	8005500 <HAL_RCC_GetSysClockFreq+0x34>
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d003      	beq.n	8005506 <HAL_RCC_GetSysClockFreq+0x3a>
 80054fe:	e0b7      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005500:	4b61      	ldr	r3, [pc, #388]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005502:	60bb      	str	r3, [r7, #8]
       break;
 8005504:	e0b7      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005506:	4b61      	ldr	r3, [pc, #388]	; (800568c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005508:	60bb      	str	r3, [r7, #8]
      break;
 800550a:	e0b4      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800550c:	4b5d      	ldr	r3, [pc, #372]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005514:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005516:	4b5b      	ldr	r3, [pc, #364]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551e:	2b00      	cmp	r3, #0
 8005520:	d04d      	beq.n	80055be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005522:	4b58      	ldr	r3, [pc, #352]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	099b      	lsrs	r3, r3, #6
 8005528:	461a      	mov	r2, r3
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005532:	f04f 0100 	mov.w	r1, #0
 8005536:	ea02 0800 	and.w	r8, r2, r0
 800553a:	ea03 0901 	and.w	r9, r3, r1
 800553e:	4640      	mov	r0, r8
 8005540:	4649      	mov	r1, r9
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	014b      	lsls	r3, r1, #5
 800554c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005550:	0142      	lsls	r2, r0, #5
 8005552:	4610      	mov	r0, r2
 8005554:	4619      	mov	r1, r3
 8005556:	ebb0 0008 	subs.w	r0, r0, r8
 800555a:	eb61 0109 	sbc.w	r1, r1, r9
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	f04f 0300 	mov.w	r3, #0
 8005566:	018b      	lsls	r3, r1, #6
 8005568:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800556c:	0182      	lsls	r2, r0, #6
 800556e:	1a12      	subs	r2, r2, r0
 8005570:	eb63 0301 	sbc.w	r3, r3, r1
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	00d9      	lsls	r1, r3, #3
 800557e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005582:	00d0      	lsls	r0, r2, #3
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	eb12 0208 	adds.w	r2, r2, r8
 800558c:	eb43 0309 	adc.w	r3, r3, r9
 8005590:	f04f 0000 	mov.w	r0, #0
 8005594:	f04f 0100 	mov.w	r1, #0
 8005598:	0259      	lsls	r1, r3, #9
 800559a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800559e:	0250      	lsls	r0, r2, #9
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	461a      	mov	r2, r3
 80055ac:	f04f 0300 	mov.w	r3, #0
 80055b0:	f7fa fe0a 	bl	80001c8 <__aeabi_uldivmod>
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4613      	mov	r3, r2
 80055ba:	60fb      	str	r3, [r7, #12]
 80055bc:	e04a      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055be:	4b31      	ldr	r3, [pc, #196]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	099b      	lsrs	r3, r3, #6
 80055c4:	461a      	mov	r2, r3
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055ce:	f04f 0100 	mov.w	r1, #0
 80055d2:	ea02 0400 	and.w	r4, r2, r0
 80055d6:	ea03 0501 	and.w	r5, r3, r1
 80055da:	4620      	mov	r0, r4
 80055dc:	4629      	mov	r1, r5
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	014b      	lsls	r3, r1, #5
 80055e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055ec:	0142      	lsls	r2, r0, #5
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	1b00      	subs	r0, r0, r4
 80055f4:	eb61 0105 	sbc.w	r1, r1, r5
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	018b      	lsls	r3, r1, #6
 8005602:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005606:	0182      	lsls	r2, r0, #6
 8005608:	1a12      	subs	r2, r2, r0
 800560a:	eb63 0301 	sbc.w	r3, r3, r1
 800560e:	f04f 0000 	mov.w	r0, #0
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	00d9      	lsls	r1, r3, #3
 8005618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800561c:	00d0      	lsls	r0, r2, #3
 800561e:	4602      	mov	r2, r0
 8005620:	460b      	mov	r3, r1
 8005622:	1912      	adds	r2, r2, r4
 8005624:	eb45 0303 	adc.w	r3, r5, r3
 8005628:	f04f 0000 	mov.w	r0, #0
 800562c:	f04f 0100 	mov.w	r1, #0
 8005630:	0299      	lsls	r1, r3, #10
 8005632:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005636:	0290      	lsls	r0, r2, #10
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4610      	mov	r0, r2
 800563e:	4619      	mov	r1, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	f7fa fdbe 	bl	80001c8 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	3301      	adds	r3, #1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	60bb      	str	r3, [r7, #8]
      break;
 800566e:	e002      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005672:	60bb      	str	r3, [r7, #8]
      break;
 8005674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005676:	68bb      	ldr	r3, [r7, #8]
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	00f42400 	.word	0x00f42400
 800568c:	007a1200 	.word	0x007a1200

08005690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000000 	.word	0x20000000

080056a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056ac:	f7ff fff0 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	08009564 	.word	0x08009564

080056d0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d105      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d035      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056f8:	4b62      	ldr	r3, [pc, #392]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056fe:	f7fb fcdb 	bl	80010b8 <HAL_GetTick>
 8005702:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005704:	e008      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005706:	f7fb fcd7 	bl	80010b8 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d901      	bls.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e0b0      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005718:	4b5b      	ldr	r3, [pc, #364]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f0      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	019a      	lsls	r2, r3, #6
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	071b      	lsls	r3, r3, #28
 8005730:	4955      	ldr	r1, [pc, #340]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005738:	4b52      	ldr	r3, [pc, #328]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800573a:	2201      	movs	r2, #1
 800573c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800573e:	f7fb fcbb 	bl	80010b8 <HAL_GetTick>
 8005742:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005744:	e008      	b.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005746:	f7fb fcb7 	bl	80010b8 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d901      	bls.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e090      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005758:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d0f0      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8083 	beq.w	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	4b44      	ldr	r3, [pc, #272]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4a43      	ldr	r2, [pc, #268]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800577c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005780:	6413      	str	r3, [r2, #64]	; 0x40
 8005782:	4b41      	ldr	r3, [pc, #260]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800578a:	60fb      	str	r3, [r7, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800578e:	4b3f      	ldr	r3, [pc, #252]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a3e      	ldr	r2, [pc, #248]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005798:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800579a:	f7fb fc8d 	bl	80010b8 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057a0:	e008      	b.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80057a2:	f7fb fc89 	bl	80010b8 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d901      	bls.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e062      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80057b4:	4b35      	ldr	r3, [pc, #212]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0f0      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057c0:	4b31      	ldr	r3, [pc, #196]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057c8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d02f      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d8:	693a      	ldr	r2, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d028      	beq.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057de:	4b2a      	ldr	r3, [pc, #168]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057e6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057e8:	4b29      	ldr	r3, [pc, #164]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057ea:	2201      	movs	r2, #1
 80057ec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ee:	4b28      	ldr	r3, [pc, #160]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057f4:	4a24      	ldr	r2, [pc, #144]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057fa:	4b23      	ldr	r3, [pc, #140]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d114      	bne.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005806:	f7fb fc57 	bl	80010b8 <HAL_GetTick>
 800580a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580c:	e00a      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fb fc53 	bl	80010b8 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	; 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e02a      	b.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005824:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ee      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800583c:	d10d      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800583e:	4b12      	ldr	r3, [pc, #72]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800584e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005852:	490d      	ldr	r1, [pc, #52]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005854:	4313      	orrs	r3, r2
 8005856:	608b      	str	r3, [r1, #8]
 8005858:	e005      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	4a0a      	ldr	r2, [pc, #40]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005860:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005864:	6093      	str	r3, [r2, #8]
 8005866:	4b08      	ldr	r3, [pc, #32]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005868:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005872:	4905      	ldr	r1, [pc, #20]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	42470068 	.word	0x42470068
 8005888:	40023800 	.word	0x40023800
 800588c:	40007000 	.word	0x40007000
 8005890:	42470e40 	.word	0x42470e40

08005894 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80058a0:	2300      	movs	r3, #0
 80058a2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d13e      	bne.n	8005930 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80058b2:	4b23      	ldr	r3, [pc, #140]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d005      	beq.n	80058ce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d12f      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058c8:	4b1e      	ldr	r3, [pc, #120]	; (8005944 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058ca:	617b      	str	r3, [r7, #20]
          break;
 80058cc:	e02f      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058ce:	4b1c      	ldr	r3, [pc, #112]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058da:	d108      	bne.n	80058ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058dc:	4b18      	ldr	r3, [pc, #96]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e4:	4a18      	ldr	r2, [pc, #96]	; (8005948 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	e007      	b.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058ee:	4b14      	ldr	r3, [pc, #80]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058f6:	4a15      	ldr	r2, [pc, #84]	; (800594c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058fe:	4b10      	ldr	r3, [pc, #64]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005904:	099b      	lsrs	r3, r3, #6
 8005906:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	fb02 f303 	mul.w	r3, r2, r3
 8005910:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005914:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005918:	0f1b      	lsrs	r3, r3, #28
 800591a:	f003 0307 	and.w	r3, r3, #7
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	617b      	str	r3, [r7, #20]
          break;
 8005926:	e002      	b.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]
          break;
 800592c:	bf00      	nop
        }
      }
      break;
 800592e:	bf00      	nop
    }
  }
  return frequency;
 8005930:	697b      	ldr	r3, [r7, #20]
}
 8005932:	4618      	mov	r0, r3
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40023800 	.word	0x40023800
 8005944:	00bb8000 	.word	0x00bb8000
 8005948:	007a1200 	.word	0x007a1200
 800594c:	00f42400 	.word	0x00f42400

08005950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e041      	b.n	80059e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7fb fa66 	bl	8000e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2202      	movs	r2, #2
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4619      	mov	r1, r3
 800598e:	4610      	mov	r0, r2
 8005990:	f000 f95e 	bl	8005c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e046      	b.n	8005a96 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <HAL_TIM_Base_Start+0xb4>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d022      	beq.n	8005a60 <HAL_TIM_Base_Start+0x70>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a22:	d01d      	beq.n	8005a60 <HAL_TIM_Base_Start+0x70>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <HAL_TIM_Base_Start+0xb8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d018      	beq.n	8005a60 <HAL_TIM_Base_Start+0x70>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <HAL_TIM_Base_Start+0xbc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d013      	beq.n	8005a60 <HAL_TIM_Base_Start+0x70>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <HAL_TIM_Base_Start+0xc0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00e      	beq.n	8005a60 <HAL_TIM_Base_Start+0x70>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a1b      	ldr	r2, [pc, #108]	; (8005ab4 <HAL_TIM_Base_Start+0xc4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d009      	beq.n	8005a60 <HAL_TIM_Base_Start+0x70>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a19      	ldr	r2, [pc, #100]	; (8005ab8 <HAL_TIM_Base_Start+0xc8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d004      	beq.n	8005a60 <HAL_TIM_Base_Start+0x70>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a18      	ldr	r2, [pc, #96]	; (8005abc <HAL_TIM_Base_Start+0xcc>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d111      	bne.n	8005a84 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 0307 	and.w	r3, r3, #7
 8005a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b06      	cmp	r3, #6
 8005a70:	d010      	beq.n	8005a94 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f042 0201 	orr.w	r2, r2, #1
 8005a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	e007      	b.n	8005a94 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f042 0201 	orr.w	r2, r2, #1
 8005a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	40010000 	.word	0x40010000
 8005aa8:	40000400 	.word	0x40000400
 8005aac:	40000800 	.word	0x40000800
 8005ab0:	40000c00 	.word	0x40000c00
 8005ab4:	40010400 	.word	0x40010400
 8005ab8:	40014000 	.word	0x40014000
 8005abc:	40001800 	.word	0x40001800

08005ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_TIM_ConfigClockSource+0x1c>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e0b4      	b.n	8005c46 <HAL_TIM_ConfigClockSource+0x186>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68ba      	ldr	r2, [r7, #8]
 8005b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b14:	d03e      	beq.n	8005b94 <HAL_TIM_ConfigClockSource+0xd4>
 8005b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b1a:	f200 8087 	bhi.w	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b22:	f000 8086 	beq.w	8005c32 <HAL_TIM_ConfigClockSource+0x172>
 8005b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b2a:	d87f      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b2c:	2b70      	cmp	r3, #112	; 0x70
 8005b2e:	d01a      	beq.n	8005b66 <HAL_TIM_ConfigClockSource+0xa6>
 8005b30:	2b70      	cmp	r3, #112	; 0x70
 8005b32:	d87b      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b34:	2b60      	cmp	r3, #96	; 0x60
 8005b36:	d050      	beq.n	8005bda <HAL_TIM_ConfigClockSource+0x11a>
 8005b38:	2b60      	cmp	r3, #96	; 0x60
 8005b3a:	d877      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b3c:	2b50      	cmp	r3, #80	; 0x50
 8005b3e:	d03c      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0xfa>
 8005b40:	2b50      	cmp	r3, #80	; 0x50
 8005b42:	d873      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b44:	2b40      	cmp	r3, #64	; 0x40
 8005b46:	d058      	beq.n	8005bfa <HAL_TIM_ConfigClockSource+0x13a>
 8005b48:	2b40      	cmp	r3, #64	; 0x40
 8005b4a:	d86f      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b4c:	2b30      	cmp	r3, #48	; 0x30
 8005b4e:	d064      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b50:	2b30      	cmp	r3, #48	; 0x30
 8005b52:	d86b      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d060      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d867      	bhi.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d05c      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d05a      	beq.n	8005c1a <HAL_TIM_ConfigClockSource+0x15a>
 8005b64:	e062      	b.n	8005c2c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6818      	ldr	r0, [r3, #0]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	6899      	ldr	r1, [r3, #8]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	f000 f985 	bl	8005e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	609a      	str	r2, [r3, #8]
      break;
 8005b92:	e04f      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6818      	ldr	r0, [r3, #0]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	6899      	ldr	r1, [r3, #8]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f000 f96e 	bl	8005e84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	689a      	ldr	r2, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bb6:	609a      	str	r2, [r3, #8]
      break;
 8005bb8:	e03c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6859      	ldr	r1, [r3, #4]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	f000 f8e2 	bl	8005d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	2150      	movs	r1, #80	; 0x50
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f93b 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005bd8:	e02c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6859      	ldr	r1, [r3, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f000 f901 	bl	8005dee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2160      	movs	r1, #96	; 0x60
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f92b 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005bf8:	e01c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6859      	ldr	r1, [r3, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	461a      	mov	r2, r3
 8005c08:	f000 f8c2 	bl	8005d90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2140      	movs	r1, #64	; 0x40
 8005c12:	4618      	mov	r0, r3
 8005c14:	f000 f91b 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005c18:	e00c      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f000 f912 	bl	8005e4e <TIM_ITRx_SetConfig>
      break;
 8005c2a:	e003      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c30:	e000      	b.n	8005c34 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
	...

08005c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a40      	ldr	r2, [pc, #256]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d013      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c6e:	d00f      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a3d      	ldr	r2, [pc, #244]	; (8005d68 <TIM_Base_SetConfig+0x118>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d00b      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a3c      	ldr	r2, [pc, #240]	; (8005d6c <TIM_Base_SetConfig+0x11c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d007      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3b      	ldr	r2, [pc, #236]	; (8005d70 <TIM_Base_SetConfig+0x120>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d003      	beq.n	8005c90 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3a      	ldr	r2, [pc, #232]	; (8005d74 <TIM_Base_SetConfig+0x124>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d108      	bne.n	8005ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4a2f      	ldr	r2, [pc, #188]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d02b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb0:	d027      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2c      	ldr	r2, [pc, #176]	; (8005d68 <TIM_Base_SetConfig+0x118>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d023      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a2b      	ldr	r2, [pc, #172]	; (8005d6c <TIM_Base_SetConfig+0x11c>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01f      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2a      	ldr	r2, [pc, #168]	; (8005d70 <TIM_Base_SetConfig+0x120>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d01b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a29      	ldr	r2, [pc, #164]	; (8005d74 <TIM_Base_SetConfig+0x124>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d017      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a28      	ldr	r2, [pc, #160]	; (8005d78 <TIM_Base_SetConfig+0x128>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d013      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a27      	ldr	r2, [pc, #156]	; (8005d7c <TIM_Base_SetConfig+0x12c>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00f      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <TIM_Base_SetConfig+0x130>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00b      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <TIM_Base_SetConfig+0x134>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d007      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <TIM_Base_SetConfig+0x138>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d003      	beq.n	8005d02 <TIM_Base_SetConfig+0xb2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a23      	ldr	r2, [pc, #140]	; (8005d8c <TIM_Base_SetConfig+0x13c>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d108      	bne.n	8005d14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	695b      	ldr	r3, [r3, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	; (8005d64 <TIM_Base_SetConfig+0x114>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0xf8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <TIM_Base_SetConfig+0x124>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d103      	bne.n	8005d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	615a      	str	r2, [r3, #20]
}
 8005d56:	bf00      	nop
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40010000 	.word	0x40010000
 8005d68:	40000400 	.word	0x40000400
 8005d6c:	40000800 	.word	0x40000800
 8005d70:	40000c00 	.word	0x40000c00
 8005d74:	40010400 	.word	0x40010400
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40014400 	.word	0x40014400
 8005d80:	40014800 	.word	0x40014800
 8005d84:	40001800 	.word	0x40001800
 8005d88:	40001c00 	.word	0x40001c00
 8005d8c:	40002000 	.word	0x40002000

08005d90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b087      	sub	sp, #28
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0201 	bic.w	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	011b      	lsls	r3, r3, #4
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f023 030a 	bic.w	r3, r3, #10
 8005dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b087      	sub	sp, #28
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	60f8      	str	r0, [r7, #12]
 8005df6:	60b9      	str	r1, [r7, #8]
 8005df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f023 0210 	bic.w	r2, r3, #16
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a1b      	ldr	r3, [r3, #32]
 8005e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	031b      	lsls	r3, r3, #12
 8005e1e:	697a      	ldr	r2, [r7, #20]
 8005e20:	4313      	orrs	r3, r2
 8005e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	621a      	str	r2, [r3, #32]
}
 8005e42:	bf00      	nop
 8005e44:	371c      	adds	r7, #28
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr

08005e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b085      	sub	sp, #20
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	f043 0307 	orr.w	r3, r3, #7
 8005e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	609a      	str	r2, [r3, #8]
}
 8005e78:	bf00      	nop
 8005e7a:	3714      	adds	r7, #20
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	021a      	lsls	r2, r3, #8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	609a      	str	r2, [r3, #8]
}
 8005eb8:	bf00      	nop
 8005eba:	371c      	adds	r7, #28
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d101      	bne.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e05a      	b.n	8005f92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2202      	movs	r2, #2
 8005ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d022      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f28:	d01d      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1d      	ldr	r2, [pc, #116]	; (8005fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d018      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a1b      	ldr	r2, [pc, #108]	; (8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d013      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a1a      	ldr	r2, [pc, #104]	; (8005fac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d00e      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a18      	ldr	r2, [pc, #96]	; (8005fb0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d009      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a17      	ldr	r2, [pc, #92]	; (8005fb4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a15      	ldr	r2, [pc, #84]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d10c      	bne.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68ba      	ldr	r2, [r7, #8]
 8005f7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	40010000 	.word	0x40010000
 8005fa4:	40000400 	.word	0x40000400
 8005fa8:	40000800 	.word	0x40000800
 8005fac:	40000c00 	.word	0x40000c00
 8005fb0:	40010400 	.word	0x40010400
 8005fb4:	40014000 	.word	0x40014000
 8005fb8:	40001800 	.word	0x40001800

08005fbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fbc:	b084      	sub	sp, #16
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b084      	sub	sp, #16
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	f107 001c 	add.w	r0, r7, #28
 8005fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d122      	bne.n	800601a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d105      	bne.n	800600e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f9a0 	bl	8006354 <USB_CoreReset>
 8006014:	4603      	mov	r3, r0
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e01a      	b.n	8006050 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f994 	bl	8006354 <USB_CoreReset>
 800602c:	4603      	mov	r3, r0
 800602e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	; 0x38
 8006042:	e005      	b.n	8006050 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006052:	2b01      	cmp	r3, #1
 8006054:	d10b      	bne.n	800606e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f043 0206 	orr.w	r2, r3, #6
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f043 0220 	orr.w	r2, r3, #32
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800606e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800607a:	b004      	add	sp, #16
 800607c:	4770      	bx	lr

0800607e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f043 0201 	orr.w	r2, r3, #1
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f023 0201 	bic.w	r2, r3, #1
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060de:	78fb      	ldrb	r3, [r7, #3]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d115      	bne.n	8006110 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80060f0:	2001      	movs	r0, #1
 80060f2:	f7fa ffed 	bl	80010d0 <HAL_Delay>
      ms++;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3301      	adds	r3, #1
 80060fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 f91a 	bl	8006336 <USB_GetMode>
 8006102:	4603      	mov	r3, r0
 8006104:	2b01      	cmp	r3, #1
 8006106:	d01e      	beq.n	8006146 <USB_SetCurrentMode+0x84>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2b31      	cmp	r3, #49	; 0x31
 800610c:	d9f0      	bls.n	80060f0 <USB_SetCurrentMode+0x2e>
 800610e:	e01a      	b.n	8006146 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d115      	bne.n	8006142 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006122:	2001      	movs	r0, #1
 8006124:	f7fa ffd4 	bl	80010d0 <HAL_Delay>
      ms++;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	3301      	adds	r3, #1
 800612c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f901 	bl	8006336 <USB_GetMode>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <USB_SetCurrentMode+0x84>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b31      	cmp	r3, #49	; 0x31
 800613e:	d9f0      	bls.n	8006122 <USB_SetCurrentMode+0x60>
 8006140:	e001      	b.n	8006146 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e005      	b.n	8006152 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b32      	cmp	r3, #50	; 0x32
 800614a:	d101      	bne.n	8006150 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
	...

0800615c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	019b      	lsls	r3, r3, #6
 800616e:	f043 0220 	orr.w	r2, r3, #32
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3301      	adds	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	4a08      	ldr	r2, [pc, #32]	; (80061a0 <USB_FlushTxFifo+0x44>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e006      	b.n	8006194 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b20      	cmp	r3, #32
 8006190:	d0f1      	beq.n	8006176 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	00030d40 	.word	0x00030d40

080061a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2210      	movs	r2, #16
 80061b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	4a08      	ldr	r2, [pc, #32]	; (80061e0 <USB_FlushRxFifo+0x3c>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d901      	bls.n	80061c6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e006      	b.n	80061d4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0310 	and.w	r3, r3, #16
 80061ce:	2b10      	cmp	r3, #16
 80061d0:	d0f1      	beq.n	80061b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	00030d40 	.word	0x00030d40

080061e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b089      	sub	sp, #36	; 0x24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4611      	mov	r1, r2
 80061f0:	461a      	mov	r2, r3
 80061f2:	460b      	mov	r3, r1
 80061f4:	71fb      	strb	r3, [r7, #7]
 80061f6:	4613      	mov	r3, r2
 80061f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006202:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006206:	2b00      	cmp	r3, #0
 8006208:	d123      	bne.n	8006252 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800620a:	88bb      	ldrh	r3, [r7, #4]
 800620c:	3303      	adds	r3, #3
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006212:	2300      	movs	r3, #0
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e018      	b.n	800624a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006218:	79fb      	ldrb	r3, [r7, #7]
 800621a:	031a      	lsls	r2, r3, #12
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	4413      	add	r3, r2
 8006220:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006224:	461a      	mov	r2, r3
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	3301      	adds	r3, #1
 8006230:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3301      	adds	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	3301      	adds	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800623e:	69fb      	ldr	r3, [r7, #28]
 8006240:	3301      	adds	r3, #1
 8006242:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	3301      	adds	r3, #1
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	429a      	cmp	r2, r3
 8006250:	d3e2      	bcc.n	8006218 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3724      	adds	r7, #36	; 0x24
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006260:	b480      	push	{r7}
 8006262:	b08b      	sub	sp, #44	; 0x2c
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	4613      	mov	r3, r2
 800626c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	089b      	lsrs	r3, r3, #2
 800627a:	b29b      	uxth	r3, r3
 800627c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	f003 0303 	and.w	r3, r3, #3
 8006284:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	623b      	str	r3, [r7, #32]
 800628a:	e014      	b.n	80062b6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006296:	601a      	str	r2, [r3, #0]
    pDest++;
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	3301      	adds	r3, #1
 800629c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	3301      	adds	r3, #1
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	3301      	adds	r3, #1
 80062ae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	3301      	adds	r3, #1
 80062b4:	623b      	str	r3, [r7, #32]
 80062b6:	6a3a      	ldr	r2, [r7, #32]
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3e6      	bcc.n	800628c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062be:	8bfb      	ldrh	r3, [r7, #30]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01e      	beq.n	8006302 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ce:	461a      	mov	r2, r3
 80062d0:	f107 0310 	add.w	r3, r7, #16
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	fa22 f303 	lsr.w	r3, r2, r3
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e8:	701a      	strb	r2, [r3, #0]
      i++;
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	3301      	adds	r3, #1
 80062ee:	623b      	str	r3, [r7, #32]
      pDest++;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	3301      	adds	r3, #1
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062fc:	8bfb      	ldrh	r3, [r7, #30]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1ea      	bne.n	80062d8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006304:	4618      	mov	r0, r3
 8006306:	372c      	adds	r7, #44	; 0x2c
 8006308:	46bd      	mov	sp, r7
 800630a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630e:	4770      	bx	lr

08006310 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4013      	ands	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006328:	68fb      	ldr	r3, [r7, #12]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0301 	and.w	r3, r3, #1
}
 8006346:	4618      	mov	r0, r3
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
	...

08006354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3301      	adds	r3, #1
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	4a13      	ldr	r2, [pc, #76]	; (80063b4 <USB_CoreReset+0x60>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e01a      	b.n	80063a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	daf3      	bge.n	8006360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	f043 0201 	orr.w	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	4a09      	ldr	r2, [pc, #36]	; (80063b4 <USB_CoreReset+0x60>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d901      	bls.n	8006398 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e006      	b.n	80063a6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d0f1      	beq.n	8006388 <USB_CoreReset+0x34>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	00030d40 	.word	0x00030d40

080063b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063b8:	b084      	sub	sp, #16
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b084      	sub	sp, #16
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	f107 001c 	add.w	r0, r7, #28
 80063c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80063d4:	461a      	mov	r2, r3
 80063d6:	2300      	movs	r3, #0
 80063d8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d018      	beq.n	800643c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	2b01      	cmp	r3, #1
 800640e:	d10a      	bne.n	8006426 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800641e:	f043 0304 	orr.w	r3, r3, #4
 8006422:	6013      	str	r3, [r2, #0]
 8006424:	e014      	b.n	8006450 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	e009      	b.n	8006450 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800644a:	f023 0304 	bic.w	r3, r3, #4
 800644e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006450:	2110      	movs	r1, #16
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7ff fe82 	bl	800615c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f7ff fea3 	bl	80061a4 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	e015      	b.n	8006490 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4413      	add	r3, r2
 800646c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006470:	461a      	mov	r2, r3
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	015a      	lsls	r2, r3, #5
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	4413      	add	r3, r2
 8006480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006484:	461a      	mov	r2, r3
 8006486:	2300      	movs	r3, #0
 8006488:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	3301      	adds	r3, #1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	429a      	cmp	r2, r3
 8006496:	d3e5      	bcc.n	8006464 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f04f 32ff 	mov.w	r2, #4294967295
 80064a4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00b      	beq.n	80064ca <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a13      	ldr	r2, [pc, #76]	; (800650c <USB_HostInit+0x154>)
 80064be:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <USB_HostInit+0x158>)
 80064c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80064c8:	e009      	b.n	80064de <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2280      	movs	r2, #128	; 0x80
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a10      	ldr	r2, [pc, #64]	; (8006514 <USB_HostInit+0x15c>)
 80064d4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a0f      	ldr	r2, [pc, #60]	; (8006518 <USB_HostInit+0x160>)
 80064da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d105      	bne.n	80064f0 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f043 0210 	orr.w	r2, r3, #16
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	699a      	ldr	r2, [r3, #24]
 80064f4:	4b09      	ldr	r3, [pc, #36]	; (800651c <USB_HostInit+0x164>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006508:	b004      	add	sp, #16
 800650a:	4770      	bx	lr
 800650c:	01000200 	.word	0x01000200
 8006510:	00e00300 	.word	0x00e00300
 8006514:	00600080 	.word	0x00600080
 8006518:	004000e0 	.word	0x004000e0
 800651c:	a3200008 	.word	0xa3200008

08006520 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	460b      	mov	r3, r1
 800652a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	78fb      	ldrb	r3, [r7, #3]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d107      	bne.n	8006572 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006568:	461a      	mov	r2, r3
 800656a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800656e:	6053      	str	r3, [r2, #4]
 8006570:	e009      	b.n	8006586 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006572:	78fb      	ldrb	r3, [r7, #3]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d106      	bne.n	8006586 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800657e:	461a      	mov	r2, r3
 8006580:	f241 7370 	movw	r3, #6000	; 0x1770
 8006584:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80065b4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c2:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80065c4:	2064      	movs	r0, #100	; 0x64
 80065c6:	f7fa fd83 	bl	80010d0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80065d8:	200a      	movs	r0, #10
 80065da:	f7fa fd79 	bl	80010d0 <HAL_Delay>

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b085      	sub	sp, #20
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	460b      	mov	r3, r1
 80065f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800660c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d109      	bne.n	800662c <USB_DriveVbus+0x44>
 8006618:	78fb      	ldrb	r3, [r7, #3]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d106      	bne.n	800662c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006626:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800662a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006636:	d109      	bne.n	800664c <USB_DriveVbus+0x64>
 8006638:	78fb      	ldrb	r3, [r7, #3]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d106      	bne.n	800664c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006646:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800664a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	0c5b      	lsrs	r3, r3, #17
 8006678:	f003 0303 	and.w	r3, r3, #3
}
 800667c:	4618      	mov	r0, r3
 800667e:	3714      	adds	r7, #20
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	b29b      	uxth	r3, r3
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
	...

080066ac <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	4608      	mov	r0, r1
 80066b6:	4611      	mov	r1, r2
 80066b8:	461a      	mov	r2, r3
 80066ba:	4603      	mov	r3, r0
 80066bc:	70fb      	strb	r3, [r7, #3]
 80066be:	460b      	mov	r3, r1
 80066c0:	70bb      	strb	r3, [r7, #2]
 80066c2:	4613      	mov	r3, r2
 80066c4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80066c6:	2300      	movs	r3, #0
 80066c8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80066ce:	78fb      	ldrb	r3, [r7, #3]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066da:	461a      	mov	r2, r3
 80066dc:	f04f 33ff 	mov.w	r3, #4294967295
 80066e0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80066e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066e6:	2b03      	cmp	r3, #3
 80066e8:	d87e      	bhi.n	80067e8 <USB_HC_Init+0x13c>
 80066ea:	a201      	add	r2, pc, #4	; (adr r2, 80066f0 <USB_HC_Init+0x44>)
 80066ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f0:	08006701 	.word	0x08006701
 80066f4:	080067ab 	.word	0x080067ab
 80066f8:	08006701 	.word	0x08006701
 80066fc:	0800676d 	.word	0x0800676d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006700:	78fb      	ldrb	r3, [r7, #3]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	4413      	add	r3, r2
 8006708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800670c:	461a      	mov	r2, r3
 800670e:	f240 439d 	movw	r3, #1181	; 0x49d
 8006712:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006714:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006718:	2b00      	cmp	r3, #0
 800671a:	da10      	bge.n	800673e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	4413      	add	r3, r2
 8006724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	78fa      	ldrb	r2, [r7, #3]
 800672c:	0151      	lsls	r1, r2, #5
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	440a      	add	r2, r1
 8006732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006736:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800673a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800673c:	e057      	b.n	80067ee <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006746:	2b00      	cmp	r3, #0
 8006748:	d051      	beq.n	80067ee <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	4413      	add	r3, r2
 8006752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	78fa      	ldrb	r2, [r7, #3]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	440a      	add	r2, r1
 8006760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006764:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006768:	60d3      	str	r3, [r2, #12]
      break;
 800676a:	e040      	b.n	80067ee <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	461a      	mov	r2, r3
 800677a:	f240 639d 	movw	r3, #1693	; 0x69d
 800677e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006780:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006784:	2b00      	cmp	r3, #0
 8006786:	da34      	bge.n	80067f2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	4413      	add	r3, r2
 8006790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	78fa      	ldrb	r2, [r7, #3]
 8006798:	0151      	lsls	r1, r2, #5
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	440a      	add	r2, r1
 800679e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067a6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80067a8:	e023      	b.n	80067f2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067aa:	78fb      	ldrb	r3, [r7, #3]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	461a      	mov	r2, r3
 80067b8:	f240 2325 	movw	r3, #549	; 0x225
 80067bc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80067be:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da17      	bge.n	80067f6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80067c6:	78fb      	ldrb	r3, [r7, #3]
 80067c8:	015a      	lsls	r2, r3, #5
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	4413      	add	r3, r2
 80067ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	78fa      	ldrb	r2, [r7, #3]
 80067d6:	0151      	lsls	r1, r2, #5
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	440a      	add	r2, r1
 80067dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067e0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80067e4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80067e6:	e006      	b.n	80067f6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	77fb      	strb	r3, [r7, #31]
      break;
 80067ec:	e004      	b.n	80067f8 <USB_HC_Init+0x14c>
      break;
 80067ee:	bf00      	nop
 80067f0:	e002      	b.n	80067f8 <USB_HC_Init+0x14c>
      break;
 80067f2:	bf00      	nop
 80067f4:	e000      	b.n	80067f8 <USB_HC_Init+0x14c>
      break;
 80067f6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	78fb      	ldrb	r3, [r7, #3]
 8006802:	f003 030f 	and.w	r3, r3, #15
 8006806:	2101      	movs	r1, #1
 8006808:	fa01 f303 	lsl.w	r3, r1, r3
 800680c:	6939      	ldr	r1, [r7, #16]
 800680e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006812:	4313      	orrs	r3, r2
 8006814:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	699b      	ldr	r3, [r3, #24]
 800681a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006822:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006826:	2b00      	cmp	r3, #0
 8006828:	da03      	bge.n	8006832 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800682a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	e001      	b.n	8006836 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff ff0f 	bl	800665a <USB_GetHostSpeed>
 800683c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800683e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006842:	2b02      	cmp	r3, #2
 8006844:	d106      	bne.n	8006854 <USB_HC_Init+0x1a8>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b02      	cmp	r3, #2
 800684a:	d003      	beq.n	8006854 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800684c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e001      	b.n	8006858 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006858:	787b      	ldrb	r3, [r7, #1]
 800685a:	059b      	lsls	r3, r3, #22
 800685c:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006860:	78bb      	ldrb	r3, [r7, #2]
 8006862:	02db      	lsls	r3, r3, #11
 8006864:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006868:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800686a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800686e:	049b      	lsls	r3, r3, #18
 8006870:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006874:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006876:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006878:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800687c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006882:	78fb      	ldrb	r3, [r7, #3]
 8006884:	0159      	lsls	r1, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	440b      	add	r3, r1
 800688a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800688e:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006894:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006896:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800689a:	2b03      	cmp	r3, #3
 800689c:	d10f      	bne.n	80068be <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068bc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80068be:	7ffb      	ldrb	r3, [r7, #31]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08c      	sub	sp, #48	; 0x30
 80068cc:	af02      	add	r7, sp, #8
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	4613      	mov	r3, r2
 80068d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80068e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068e4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d02d      	beq.n	800694e <USB_HC_StartXfer+0x86>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	791b      	ldrb	r3, [r3, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d129      	bne.n	800694e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80068fa:	79fb      	ldrb	r3, [r7, #7]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d117      	bne.n	8006930 <USB_HC_StartXfer+0x68>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	79db      	ldrb	r3, [r3, #7]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d003      	beq.n	8006910 <USB_HC_StartXfer+0x48>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	79db      	ldrb	r3, [r3, #7]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d10f      	bne.n	8006930 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	015a      	lsls	r2, r3, #5
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	4413      	add	r3, r2
 8006918:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	0151      	lsls	r1, r2, #5
 8006922:	6a3a      	ldr	r2, [r7, #32]
 8006924:	440a      	add	r2, r1
 8006926:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10b      	bne.n	800694e <USB_HC_StartXfer+0x86>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	795b      	ldrb	r3, [r3, #5]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d107      	bne.n	800694e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	4619      	mov	r1, r3
 8006944:	68f8      	ldr	r0, [r7, #12]
 8006946:	f000 fa2f 	bl	8006da8 <USB_DoPing>
      return HAL_OK;
 800694a:	2300      	movs	r3, #0
 800694c:	e0f8      	b.n	8006b40 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d018      	beq.n	8006988 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	8912      	ldrh	r2, [r2, #8]
 800695e:	4413      	add	r3, r2
 8006960:	3b01      	subs	r3, #1
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	8912      	ldrh	r2, [r2, #8]
 8006966:	fbb3 f3f2 	udiv	r3, r3, r2
 800696a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800696c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800696e:	8b7b      	ldrh	r3, [r7, #26]
 8006970:	429a      	cmp	r2, r3
 8006972:	d90b      	bls.n	800698c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006974:	8b7b      	ldrh	r3, [r7, #26]
 8006976:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006978:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	8912      	ldrh	r2, [r2, #8]
 800697e:	fb02 f203 	mul.w	r2, r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	611a      	str	r2, [r3, #16]
 8006986:	e001      	b.n	800698c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006988:	2301      	movs	r3, #1
 800698a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	78db      	ldrb	r3, [r3, #3]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d007      	beq.n	80069a4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006994:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	8912      	ldrh	r2, [r2, #8]
 800699a:	fb02 f203 	mul.w	r2, r2, r3
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	611a      	str	r2, [r3, #16]
 80069a2:	e003      	b.n	80069ac <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	695a      	ldr	r2, [r3, #20]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	691b      	ldr	r3, [r3, #16]
 80069b0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069b6:	04d9      	lsls	r1, r3, #19
 80069b8:	4b63      	ldr	r3, [pc, #396]	; (8006b48 <USB_HC_StartXfer+0x280>)
 80069ba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069bc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	7a9b      	ldrb	r3, [r3, #10]
 80069c2:	075b      	lsls	r3, r3, #29
 80069c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069c8:	69f9      	ldr	r1, [r7, #28]
 80069ca:	0148      	lsls	r0, r1, #5
 80069cc:	6a39      	ldr	r1, [r7, #32]
 80069ce:	4401      	add	r1, r0
 80069d0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80069d4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80069d6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80069d8:	79fb      	ldrb	r3, [r7, #7]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	68d9      	ldr	r1, [r3, #12]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069ee:	460a      	mov	r2, r1
 80069f0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2300      	movne	r3, #0
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	69fa      	ldr	r2, [r7, #28]
 8006a1a:	0151      	lsls	r1, r2, #5
 8006a1c:	6a3a      	ldr	r2, [r7, #32]
 8006a1e:	440a      	add	r2, r1
 8006a20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006a24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a28:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	015a      	lsls	r2, r3, #5
 8006a2e:	6a3b      	ldr	r3, [r7, #32]
 8006a30:	4413      	add	r3, r2
 8006a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	7e7b      	ldrb	r3, [r7, #25]
 8006a3a:	075b      	lsls	r3, r3, #29
 8006a3c:	69f9      	ldr	r1, [r7, #28]
 8006a3e:	0148      	lsls	r0, r1, #5
 8006a40:	6a39      	ldr	r1, [r7, #32]
 8006a42:	4401      	add	r1, r0
 8006a44:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006a4c:	69fb      	ldr	r3, [r7, #28]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a62:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	78db      	ldrb	r3, [r3, #3]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d004      	beq.n	8006a76 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	e003      	b.n	8006a7e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a7c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a84:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	015a      	lsls	r2, r3, #5
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a92:	461a      	mov	r2, r3
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d001      	beq.n	8006aa2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	e04e      	b.n	8006b40 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	78db      	ldrb	r3, [r3, #3]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d149      	bne.n	8006b3e <USB_HC_StartXfer+0x276>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d045      	beq.n	8006b3e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	79db      	ldrb	r3, [r3, #7]
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d830      	bhi.n	8006b1c <USB_HC_StartXfer+0x254>
 8006aba:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <USB_HC_StartXfer+0x1f8>)
 8006abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ac0:	08006ad1 	.word	0x08006ad1
 8006ac4:	08006af5 	.word	0x08006af5
 8006ac8:	08006ad1 	.word	0x08006ad1
 8006acc:	08006af5 	.word	0x08006af5
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	3303      	adds	r3, #3
 8006ad6:	089b      	lsrs	r3, r3, #2
 8006ad8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006ada:	8afa      	ldrh	r2, [r7, #22]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d91c      	bls.n	8006b20 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f043 0220 	orr.w	r2, r3, #32
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006af2:	e015      	b.n	8006b20 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	695b      	ldr	r3, [r3, #20]
 8006af8:	3303      	adds	r3, #3
 8006afa:	089b      	lsrs	r3, r3, #2
 8006afc:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006afe:	8afa      	ldrh	r2, [r7, #22]
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d90a      	bls.n	8006b24 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	619a      	str	r2, [r3, #24]
        }
        break;
 8006b1a:	e003      	b.n	8006b24 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <USB_HC_StartXfer+0x25e>
        break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <USB_HC_StartXfer+0x25e>
        break;
 8006b24:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	68d9      	ldr	r1, [r3, #12]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	785a      	ldrb	r2, [r3, #1]
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2000      	movs	r0, #0
 8006b36:	9000      	str	r0, [sp, #0]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f7ff fb53 	bl	80061e4 <USB_WritePacket>
  }

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3728      	adds	r7, #40	; 0x28
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	1ff80000 	.word	0x1ff80000

08006b4c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b5e:	695b      	ldr	r3, [r3, #20]
 8006b60:	b29b      	uxth	r3, r3
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b089      	sub	sp, #36	; 0x24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b7e:	78fb      	ldrb	r3, [r7, #3]
 8006b80:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006b82:	2300      	movs	r3, #0
 8006b84:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	0c9b      	lsrs	r3, r3, #18
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	0fdb      	lsrs	r3, r3, #31
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f003 0320 	and.w	r3, r3, #32
 8006bba:	2b20      	cmp	r3, #32
 8006bbc:	d104      	bne.n	8006bc8 <USB_HC_Halt+0x5a>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	e0e8      	b.n	8006d9a <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <USB_HC_Halt+0x66>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d173      	bne.n	8006cbc <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	0151      	lsls	r1, r2, #5
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	440a      	add	r2, r1
 8006bea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bf2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0320 	and.w	r3, r3, #32
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	f040 80cb 	bne.w	8006d98 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d143      	bne.n	8006c96 <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	0151      	lsls	r1, r2, #5
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	440a      	add	r2, r1
 8006c24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c2c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	0151      	lsls	r1, r2, #5
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	440a      	add	r2, r1
 8006c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c4c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	0151      	lsls	r1, r2, #5
 8006c60:	69ba      	ldr	r2, [r7, #24]
 8006c62:	440a      	add	r2, r1
 8006c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006c6c:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	3301      	adds	r3, #1
 8006c72:	61fb      	str	r3, [r7, #28]
 8006c74:	69fb      	ldr	r3, [r7, #28]
 8006c76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c7a:	d81d      	bhi.n	8006cb8 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c92:	d0ec      	beq.n	8006c6e <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c94:	e080      	b.n	8006d98 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	015a      	lsls	r2, r3, #5
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	0151      	lsls	r1, r2, #5
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	440a      	add	r2, r1
 8006cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cb4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cb6:	e06f      	b.n	8006d98 <USB_HC_Halt+0x22a>
            break;
 8006cb8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006cba:	e06d      	b.n	8006d98 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	0151      	lsls	r1, r2, #5
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	440a      	add	r2, r1
 8006cd2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cd6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006cda:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d143      	bne.n	8006d74 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	015a      	lsls	r2, r3, #5
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	0151      	lsls	r1, r2, #5
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	440a      	add	r2, r1
 8006d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d0a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	015a      	lsls	r2, r3, #5
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	4413      	add	r3, r2
 8006d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	0151      	lsls	r1, r2, #5
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	440a      	add	r2, r1
 8006d22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d2a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	0151      	lsls	r1, r2, #5
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	440a      	add	r2, r1
 8006d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d4a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	3301      	adds	r3, #1
 8006d50:	61fb      	str	r3, [r7, #28]
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d58:	d81d      	bhi.n	8006d96 <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	015a      	lsls	r2, r3, #5
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	4413      	add	r3, r2
 8006d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d70:	d0ec      	beq.n	8006d4c <USB_HC_Halt+0x1de>
 8006d72:	e011      	b.n	8006d98 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	0151      	lsls	r1, r2, #5
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	440a      	add	r2, r1
 8006d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	e000      	b.n	8006d98 <USB_HC_Halt+0x22a>
          break;
 8006d96:	bf00      	nop
    }
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3724      	adds	r7, #36	; 0x24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006db8:	78fb      	ldrb	r3, [r7, #3]
 8006dba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	04da      	lsls	r2, r3, #19
 8006dc4:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <USB_DoPing+0x74>)
 8006dc6:	4013      	ands	r3, r2
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	0151      	lsls	r1, r2, #5
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	440a      	add	r2, r1
 8006dd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006dd8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006df0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006df8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	015a      	lsls	r2, r3, #5
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e06:	461a      	mov	r2, r3
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	371c      	adds	r7, #28
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	1ff80000 	.word	0x1ff80000

08006e20 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f7ff f935 	bl	80060a0 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006e36:	2110      	movs	r1, #16
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7ff f98f 	bl	800615c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f7ff f9b0 	bl	80061a4 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006e44:	2300      	movs	r3, #0
 8006e46:	613b      	str	r3, [r7, #16]
 8006e48:	e01f      	b.n	8006e8a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e60:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e68:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e70:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	015a      	lsls	r2, r3, #5
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	4413      	add	r3, r2
 8006e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7e:	461a      	mov	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	3301      	adds	r3, #1
 8006e88:	613b      	str	r3, [r7, #16]
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	2b0f      	cmp	r3, #15
 8006e8e:	d9dc      	bls.n	8006e4a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e90:	2300      	movs	r3, #0
 8006e92:	613b      	str	r3, [r7, #16]
 8006e94:	e034      	b.n	8006f00 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	015a      	lsls	r2, r3, #5
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	4413      	add	r3, r2
 8006e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006eac:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eb4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ebc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006edc:	d80c      	bhi.n	8006ef8 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	015a      	lsls	r2, r3, #5
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ef4:	d0ec      	beq.n	8006ed0 <USB_StopHost+0xb0>
 8006ef6:	e000      	b.n	8006efa <USB_StopHost+0xda>
        break;
 8006ef8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	3301      	adds	r3, #1
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d9c7      	bls.n	8006e96 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff f8ae 	bl	800607e <USB_EnableGlobalInt>

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	b089      	sub	sp, #36	; 0x24
 8006f30:	af04      	add	r7, sp, #16
 8006f32:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006f34:	2301      	movs	r3, #1
 8006f36:	2202      	movs	r2, #2
 8006f38:	2102      	movs	r1, #2
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fc66 	bl	800780c <USBH_FindInterface>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	2bff      	cmp	r3, #255	; 0xff
 8006f48:	d002      	beq.n	8006f50 <USBH_CDC_InterfaceInit+0x24>
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d901      	bls.n	8006f54 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006f50:	2302      	movs	r3, #2
 8006f52:	e13d      	b.n	80071d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fc3b 	bl	80077d4 <USBH_SelectInterface>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006f62:	7bbb      	ldrb	r3, [r7, #14]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006f68:	2302      	movs	r3, #2
 8006f6a:	e131      	b.n	80071d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006f72:	2050      	movs	r0, #80	; 0x50
 8006f74:	f002 fa00 	bl	8009378 <malloc>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f82:	69db      	ldr	r3, [r3, #28]
 8006f84:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e11f      	b.n	80071d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f90:	2250      	movs	r2, #80	; 0x50
 8006f92:	2100      	movs	r1, #0
 8006f94:	68b8      	ldr	r0, [r7, #8]
 8006f96:	f002 f9ff 	bl	8009398 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	211a      	movs	r1, #26
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	4413      	add	r3, r2
 8006fa6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b25b      	sxtb	r3, r3
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	da15      	bge.n	8006fde <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	211a      	movs	r1, #26
 8006fb8:	fb01 f303 	mul.w	r3, r1, r3
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fc2:	781a      	ldrb	r2, [r3, #0]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	211a      	movs	r1, #26
 8006fce:	fb01 f303 	mul.w	r3, r1, r3
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006fd8:	881a      	ldrh	r2, [r3, #0]
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	785b      	ldrb	r3, [r3, #1]
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f001 fe32 	bl	8008c4e <USBH_AllocPipe>
 8006fea:	4603      	mov	r3, r0
 8006fec:	461a      	mov	r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	7819      	ldrb	r1, [r3, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	7858      	ldrb	r0, [r3, #1]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	8952      	ldrh	r2, [r2, #10]
 800700a:	9202      	str	r2, [sp, #8]
 800700c:	2203      	movs	r2, #3
 800700e:	9201      	str	r2, [sp, #4]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	4623      	mov	r3, r4
 8007014:	4602      	mov	r2, r0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 fdea 	bl	8008bf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	2200      	movs	r2, #0
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f002 f8f9 	bl	800921c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800702a:	2300      	movs	r3, #0
 800702c:	2200      	movs	r2, #0
 800702e:	210a      	movs	r1, #10
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 fbeb 	bl	800780c <USBH_FindInterface>
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2bff      	cmp	r3, #255	; 0xff
 800703e:	d002      	beq.n	8007046 <USBH_CDC_InterfaceInit+0x11a>
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b01      	cmp	r3, #1
 8007044:	d901      	bls.n	800704a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007046:	2302      	movs	r3, #2
 8007048:	e0c2      	b.n	80071d0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800704a:	7bfb      	ldrb	r3, [r7, #15]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	211a      	movs	r1, #26
 8007050:	fb01 f303 	mul.w	r3, r1, r3
 8007054:	4413      	add	r3, r2
 8007056:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b25b      	sxtb	r3, r3
 800705e:	2b00      	cmp	r3, #0
 8007060:	da16      	bge.n	8007090 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	211a      	movs	r1, #26
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	4413      	add	r3, r2
 800706e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007072:	781a      	ldrb	r2, [r3, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	211a      	movs	r1, #26
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	4413      	add	r3, r2
 8007084:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007088:	881a      	ldrh	r2, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	835a      	strh	r2, [r3, #26]
 800708e:	e015      	b.n	80070bc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	211a      	movs	r1, #26
 8007096:	fb01 f303 	mul.w	r3, r1, r3
 800709a:	4413      	add	r3, r2
 800709c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	211a      	movs	r1, #26
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80070b6:	881a      	ldrh	r2, [r3, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80070bc:	7bfb      	ldrb	r3, [r7, #15]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	211a      	movs	r1, #26
 80070c2:	fb01 f303 	mul.w	r3, r1, r3
 80070c6:	4413      	add	r3, r2
 80070c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	da16      	bge.n	8007102 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	211a      	movs	r1, #26
 80070da:	fb01 f303 	mul.w	r3, r1, r3
 80070de:	4413      	add	r3, r2
 80070e0:	f203 3356 	addw	r3, r3, #854	; 0x356
 80070e4:	781a      	ldrb	r2, [r3, #0]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80070ea:	7bfb      	ldrb	r3, [r7, #15]
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	211a      	movs	r1, #26
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	4413      	add	r3, r2
 80070f6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80070fa:	881a      	ldrh	r2, [r3, #0]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	835a      	strh	r2, [r3, #26]
 8007100:	e015      	b.n	800712e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	211a      	movs	r1, #26
 8007108:	fb01 f303 	mul.w	r3, r1, r3
 800710c:	4413      	add	r3, r2
 800710e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007112:	781a      	ldrb	r2, [r3, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	211a      	movs	r1, #26
 800711e:	fb01 f303 	mul.w	r3, r1, r3
 8007122:	4413      	add	r3, r2
 8007124:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007128:	881a      	ldrh	r2, [r3, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	7b9b      	ldrb	r3, [r3, #14]
 8007132:	4619      	mov	r1, r3
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f001 fd8a 	bl	8008c4e <USBH_AllocPipe>
 800713a:	4603      	mov	r3, r0
 800713c:	461a      	mov	r2, r3
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	7bdb      	ldrb	r3, [r3, #15]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f001 fd80 	bl	8008c4e <USBH_AllocPipe>
 800714e:	4603      	mov	r3, r0
 8007150:	461a      	mov	r2, r3
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	7b59      	ldrb	r1, [r3, #13]
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	7b98      	ldrb	r0, [r3, #14]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	8b12      	ldrh	r2, [r2, #24]
 800716e:	9202      	str	r2, [sp, #8]
 8007170:	2202      	movs	r2, #2
 8007172:	9201      	str	r2, [sp, #4]
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	4623      	mov	r3, r4
 8007178:	4602      	mov	r2, r0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fd38 	bl	8008bf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	7b19      	ldrb	r1, [r3, #12]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	7bd8      	ldrb	r0, [r3, #15]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	8b52      	ldrh	r2, [r2, #26]
 8007198:	9202      	str	r2, [sp, #8]
 800719a:	2202      	movs	r2, #2
 800719c:	9201      	str	r2, [sp, #4]
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	4623      	mov	r3, r4
 80071a2:	4602      	mov	r2, r0
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fd23 	bl	8008bf0 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	7b5b      	ldrb	r3, [r3, #13]
 80071b6:	2200      	movs	r2, #0
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f002 f82e 	bl	800921c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	7b1b      	ldrb	r3, [r3, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f002 f827 	bl	800921c <USBH_LL_SetToggle>

  return USBH_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}

080071d8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00e      	beq.n	8007210 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	4619      	mov	r1, r3
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f001 fd18 	bl	8008c2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f001 fd43 	bl	8008c90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	7b1b      	ldrb	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d00e      	beq.n	8007236 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	7b1b      	ldrb	r3, [r3, #12]
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fd05 	bl	8008c2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	7b1b      	ldrb	r3, [r3, #12]
 8007228:	4619      	mov	r1, r3
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fd30 	bl	8008c90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	7b5b      	ldrb	r3, [r3, #13]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00e      	beq.n	800725c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	7b5b      	ldrb	r3, [r3, #13]
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f001 fcf2 	bl	8008c2e <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	7b5b      	ldrb	r3, [r3, #13]
 800724e:	4619      	mov	r1, r3
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f001 fd1d 	bl	8008c90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007262:	69db      	ldr	r3, [r3, #28]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00b      	beq.n	8007280 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	4618      	mov	r0, r3
 8007272:	f002 f889 	bl	8009388 <free>
    phost->pActiveClass->pData = 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800727c:	2200      	movs	r2, #0
 800727e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b084      	sub	sp, #16
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3340      	adds	r3, #64	; 0x40
 80072a0:	4619      	mov	r1, r3
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f8b1 	bl	800740a <GetLineCoding>
 80072a8:	4603      	mov	r3, r0
 80072aa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80072ac:	7afb      	ldrb	r3, [r7, #11]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d105      	bne.n	80072be <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072b8:	2102      	movs	r1, #2
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80072be:	7afb      	ldrb	r3, [r7, #11]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80072d0:	2301      	movs	r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80072e8:	2b04      	cmp	r3, #4
 80072ea:	d877      	bhi.n	80073dc <USBH_CDC_Process+0x114>
 80072ec:	a201      	add	r2, pc, #4	; (adr r2, 80072f4 <USBH_CDC_Process+0x2c>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	08007309 	.word	0x08007309
 80072f8:	0800730f 	.word	0x0800730f
 80072fc:	0800733f 	.word	0x0800733f
 8007300:	080073b3 	.word	0x080073b3
 8007304:	080073c1 	.word	0x080073c1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007308:	2300      	movs	r3, #0
 800730a:	73fb      	strb	r3, [r7, #15]
      break;
 800730c:	e06d      	b.n	80073ea <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f897 	bl	8007448 <SetLineCoding>
 800731a:	4603      	mov	r3, r0
 800731c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800731e:	7bbb      	ldrb	r3, [r7, #14]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d104      	bne.n	800732e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800732c:	e058      	b.n	80073e0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800732e:	7bbb      	ldrb	r3, [r7, #14]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d055      	beq.n	80073e0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2204      	movs	r2, #4
 8007338:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800733c:	e050      	b.n	80073e0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	3340      	adds	r3, #64	; 0x40
 8007342:	4619      	mov	r1, r3
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f860 	bl	800740a <GetLineCoding>
 800734a:	4603      	mov	r3, r0
 800734c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800734e:	7bbb      	ldrb	r3, [r7, #14]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d126      	bne.n	80073a2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007366:	791b      	ldrb	r3, [r3, #4]
 8007368:	429a      	cmp	r2, r3
 800736a:	d13b      	bne.n	80073e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007376:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007378:	429a      	cmp	r2, r3
 800737a:	d133      	bne.n	80073e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007386:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007388:	429a      	cmp	r2, r3
 800738a:	d12b      	bne.n	80073e4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007394:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d124      	bne.n	80073e4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f958 	bl	8007650 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80073a0:	e020      	b.n	80073e4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d01d      	beq.n	80073e4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2204      	movs	r2, #4
 80073ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80073b0:	e018      	b.n	80073e4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f867 	bl	8007486 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8da 	bl	8007572 <CDC_ProcessReception>
      break;
 80073be:	e014      	b.n	80073ea <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80073c0:	2100      	movs	r1, #0
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 ffe3 	bl	800838e <USBH_ClrFeature>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80073da:	e005      	b.n	80073e8 <USBH_CDC_Process+0x120>

    default:
      break;
 80073dc:	bf00      	nop
 80073de:	e004      	b.n	80073ea <USBH_CDC_Process+0x122>
      break;
 80073e0:	bf00      	nop
 80073e2:	e002      	b.n	80073ea <USBH_CDC_Process+0x122>
      break;
 80073e4:	bf00      	nop
 80073e6:	e000      	b.n	80073ea <USBH_CDC_Process+0x122>
      break;
 80073e8:	bf00      	nop

  }

  return status;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	370c      	adds	r7, #12
 8007402:	46bd      	mov	sp, r7
 8007404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007408:	4770      	bx	lr

0800740a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b082      	sub	sp, #8
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
 8007412:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	22a1      	movs	r2, #161	; 0xa1
 8007418:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2221      	movs	r2, #33	; 0x21
 800741e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2207      	movs	r2, #7
 8007430:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	2207      	movs	r2, #7
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 f988 	bl	800874e <USBH_CtlReq>
 800743e:	4603      	mov	r3, r0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2221      	movs	r2, #33	; 0x21
 8007456:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2207      	movs	r2, #7
 800746e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	2207      	movs	r2, #7
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f001 f969 	bl	800874e <USBH_CtlReq>
 800747c:	4603      	mov	r3, r0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af02      	add	r7, sp, #8
 800748c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007498:	2300      	movs	r3, #0
 800749a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d002      	beq.n	80074ac <CDC_ProcessTransmission+0x26>
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d023      	beq.n	80074f2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80074aa:	e05e      	b.n	800756a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	8b12      	ldrh	r2, [r2, #24]
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d90b      	bls.n	80074d0 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	69d9      	ldr	r1, [r3, #28]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	8b1a      	ldrh	r2, [r3, #24]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	7b5b      	ldrb	r3, [r3, #13]
 80074c4:	2001      	movs	r0, #1
 80074c6:	9000      	str	r0, [sp, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 fb4e 	bl	8008b6a <USBH_BulkSendData>
 80074ce:	e00b      	b.n	80074e8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80074d8:	b29a      	uxth	r2, r3
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	7b5b      	ldrb	r3, [r3, #13]
 80074de:	2001      	movs	r0, #1
 80074e0:	9000      	str	r0, [sp, #0]
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fb41 	bl	8008b6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074f0:	e03b      	b.n	800756a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	7b5b      	ldrb	r3, [r3, #13]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 fe65 	bl	80091c8 <USBH_LL_GetURBState>
 80074fe:	4603      	mov	r3, r0
 8007500:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d128      	bne.n	800755a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	8b12      	ldrh	r2, [r2, #24]
 8007510:	4293      	cmp	r3, r2
 8007512:	d90e      	bls.n	8007532 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	8b12      	ldrh	r2, [r2, #24]
 800751c:	1a9a      	subs	r2, r3, r2
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	68fa      	ldr	r2, [r7, #12]
 8007528:	8b12      	ldrh	r2, [r2, #24]
 800752a:	441a      	add	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	61da      	str	r2, [r3, #28]
 8007530:	e002      	b.n	8007538 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2201      	movs	r2, #1
 8007544:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007548:	e00e      	b.n	8007568 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f868 	bl	8007628 <USBH_CDC_TransmitCallback>
      break;
 8007558:	e006      	b.n	8007568 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	2b02      	cmp	r3, #2
 800755e:	d103      	bne.n	8007568 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007568:	bf00      	nop
  }
}
 800756a:	bf00      	nop
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af00      	add	r7, sp, #0
 8007578:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007580:	69db      	ldr	r3, [r3, #28]
 8007582:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007584:	2300      	movs	r3, #0
 8007586:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800758e:	2b03      	cmp	r3, #3
 8007590:	d002      	beq.n	8007598 <CDC_ProcessReception+0x26>
 8007592:	2b04      	cmp	r3, #4
 8007594:	d00e      	beq.n	80075b4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007596:	e043      	b.n	8007620 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	6a19      	ldr	r1, [r3, #32]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	8b5a      	ldrh	r2, [r3, #26]
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	7b1b      	ldrb	r3, [r3, #12]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f001 fb05 	bl	8008bb4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2204      	movs	r2, #4
 80075ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80075b2:	e035      	b.n	8007620 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	7b1b      	ldrb	r3, [r3, #12]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 fe04 	bl	80091c8 <USBH_LL_GetURBState>
 80075c0:	4603      	mov	r3, r0
 80075c2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80075c4:	7cfb      	ldrb	r3, [r7, #19]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d129      	bne.n	800761e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	7b1b      	ldrb	r3, [r3, #12]
 80075ce:	4619      	mov	r1, r3
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f001 fd67 	bl	80090a4 <USBH_LL_GetLastXferSize>
 80075d6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d016      	beq.n	8007610 <CDC_ProcessReception+0x9e>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	8b5b      	ldrh	r3, [r3, #26]
 80075e6:	461a      	mov	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d910      	bls.n	8007610 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1ad2      	subs	r2, r2, r3
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	6a1a      	ldr	r2, [r3, #32]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	441a      	add	r2, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2203      	movs	r2, #3
 800760a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800760e:	e006      	b.n	800761e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 f80f 	bl	800763c <USBH_CDC_ReceiveCallback>
      break;
 800761e:	bf00      	nop
  }
}
 8007620:	bf00      	nop
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	4613      	mov	r3, r2
 8007670:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007678:	2302      	movs	r3, #2
 800767a:	e029      	b.n	80076d0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	79fa      	ldrb	r2, [r7, #7]
 8007680:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f81f 	bl	80076d8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d003      	beq.n	80076c8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f001 fc37 	bl	8008f3c <USBH_LL_Init>

  return USBH_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3710      	adds	r7, #16
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	e009      	b.n	80076fe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80076ea:	687a      	ldr	r2, [r7, #4]
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	33e0      	adds	r3, #224	; 0xe0
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	4413      	add	r3, r2
 80076f4:	2200      	movs	r2, #0
 80076f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3301      	adds	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b0e      	cmp	r3, #14
 8007702:	d9f2      	bls.n	80076ea <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e009      	b.n	800771e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007714:	2200      	movs	r2, #0
 8007716:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007724:	d3f1      	bcc.n	800770a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2201      	movs	r2, #1
 8007736:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2240      	movs	r2, #64	; 0x40
 800774a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2200      	movs	r2, #0
 8007750:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007780:	b480      	push	{r7}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d016      	beq.n	80077c2 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10e      	bne.n	80077bc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80077a4:	1c59      	adds	r1, r3, #1
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	33de      	adds	r3, #222	; 0xde
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73fb      	strb	r3, [r7, #15]
 80077ba:	e004      	b.n	80077c6 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80077bc:	2302      	movs	r3, #2
 80077be:	73fb      	strb	r3, [r7, #15]
 80077c0:	e001      	b.n	80077c6 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80077c2:	2302      	movs	r3, #2
 80077c4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80077e0:	2300      	movs	r3, #0
 80077e2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80077ea:	78fa      	ldrb	r2, [r7, #3]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d204      	bcs.n	80077fa <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	78fa      	ldrb	r2, [r7, #3]
 80077f4:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80077f8:	e001      	b.n	80077fe <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80077fa:	2302      	movs	r3, #2
 80077fc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800780c:	b480      	push	{r7}
 800780e:	b087      	sub	sp, #28
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	4608      	mov	r0, r1
 8007816:	4611      	mov	r1, r2
 8007818:	461a      	mov	r2, r3
 800781a:	4603      	mov	r3, r0
 800781c:	70fb      	strb	r3, [r7, #3]
 800781e:	460b      	mov	r3, r1
 8007820:	70bb      	strb	r3, [r7, #2]
 8007822:	4613      	mov	r3, r2
 8007824:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800782a:	2300      	movs	r3, #0
 800782c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007834:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007836:	e025      	b.n	8007884 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007838:	7dfb      	ldrb	r3, [r7, #23]
 800783a:	221a      	movs	r2, #26
 800783c:	fb02 f303 	mul.w	r3, r2, r3
 8007840:	3308      	adds	r3, #8
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	3302      	adds	r3, #2
 8007848:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	795b      	ldrb	r3, [r3, #5]
 800784e:	78fa      	ldrb	r2, [r7, #3]
 8007850:	429a      	cmp	r2, r3
 8007852:	d002      	beq.n	800785a <USBH_FindInterface+0x4e>
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	2bff      	cmp	r3, #255	; 0xff
 8007858:	d111      	bne.n	800787e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800785e:	78ba      	ldrb	r2, [r7, #2]
 8007860:	429a      	cmp	r2, r3
 8007862:	d002      	beq.n	800786a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007864:	78bb      	ldrb	r3, [r7, #2]
 8007866:	2bff      	cmp	r3, #255	; 0xff
 8007868:	d109      	bne.n	800787e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800786e:	787a      	ldrb	r2, [r7, #1]
 8007870:	429a      	cmp	r2, r3
 8007872:	d002      	beq.n	800787a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007874:	787b      	ldrb	r3, [r7, #1]
 8007876:	2bff      	cmp	r3, #255	; 0xff
 8007878:	d101      	bne.n	800787e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
 800787c:	e006      	b.n	800788c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800787e:	7dfb      	ldrb	r3, [r7, #23]
 8007880:	3301      	adds	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007884:	7dfb      	ldrb	r3, [r7, #23]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d9d6      	bls.n	8007838 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800788a:	23ff      	movs	r3, #255	; 0xff
}
 800788c:	4618      	mov	r0, r3
 800788e:	371c      	adds	r7, #28
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 fb87 	bl	8008fb4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80078a6:	2101      	movs	r1, #1
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fca0 	bl	80091ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3708      	adds	r7, #8
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b088      	sub	sp, #32
 80078bc:	af04      	add	r7, sp, #16
 80078be:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80078c0:	2302      	movs	r3, #2
 80078c2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d102      	bne.n	80078da <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2203      	movs	r2, #3
 80078d8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b0b      	cmp	r3, #11
 80078e2:	f200 81b3 	bhi.w	8007c4c <USBH_Process+0x394>
 80078e6:	a201      	add	r2, pc, #4	; (adr r2, 80078ec <USBH_Process+0x34>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	0800791d 	.word	0x0800791d
 80078f0:	0800794f 	.word	0x0800794f
 80078f4:	080079b7 	.word	0x080079b7
 80078f8:	08007be7 	.word	0x08007be7
 80078fc:	08007c4d 	.word	0x08007c4d
 8007900:	08007a5b 	.word	0x08007a5b
 8007904:	08007b8d 	.word	0x08007b8d
 8007908:	08007a91 	.word	0x08007a91
 800790c:	08007ab1 	.word	0x08007ab1
 8007910:	08007ad1 	.word	0x08007ad1
 8007914:	08007aff 	.word	0x08007aff
 8007918:	08007bcf 	.word	0x08007bcf
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 8193 	beq.w	8007c50 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007930:	20c8      	movs	r0, #200	; 0xc8
 8007932:	f001 fca3 	bl	800927c <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f001 fb99 	bl	800906e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800794c:	e180      	b.n	8007c50 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007954:	2b01      	cmp	r3, #1
 8007956:	d107      	bne.n	8007968 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007966:	e182      	b.n	8007c6e <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800796e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007972:	d914      	bls.n	800799e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800797a:	3301      	adds	r3, #1
 800797c:	b2da      	uxtb	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800798a:	2b03      	cmp	r3, #3
 800798c:	d903      	bls.n	8007996 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	220d      	movs	r2, #13
 8007992:	701a      	strb	r2, [r3, #0]
      break;
 8007994:	e16b      	b.n	8007c6e <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
      break;
 800799c:	e167      	b.n	8007c6e <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80079a4:	f103 020a 	add.w	r2, r3, #10
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80079ae:	200a      	movs	r0, #10
 80079b0:	f001 fc64 	bl	800927c <USBH_Delay>
      break;
 80079b4:	e15b      	b.n	8007c6e <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d005      	beq.n	80079cc <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80079c6:	2104      	movs	r1, #4
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80079cc:	2064      	movs	r0, #100	; 0x64
 80079ce:	f001 fc55 	bl	800927c <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fb24 	bl	8009020 <USBH_LL_GetSpeed>
 80079d8:	4603      	mov	r3, r0
 80079da:	461a      	mov	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2205      	movs	r2, #5
 80079e6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80079e8:	2100      	movs	r1, #0
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f001 f92f 	bl	8008c4e <USBH_AllocPipe>
 80079f0:	4603      	mov	r3, r0
 80079f2:	461a      	mov	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80079f8:	2180      	movs	r1, #128	; 0x80
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f001 f927 	bl	8008c4e <USBH_AllocPipe>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7919      	ldrb	r1, [r3, #4]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007a1c:	b292      	uxth	r2, r2
 8007a1e:	9202      	str	r2, [sp, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	9201      	str	r2, [sp, #4]
 8007a24:	9300      	str	r3, [sp, #0]
 8007a26:	4603      	mov	r3, r0
 8007a28:	2280      	movs	r2, #128	; 0x80
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 f8e0 	bl	8008bf0 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	7959      	ldrb	r1, [r3, #5]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007a44:	b292      	uxth	r2, r2
 8007a46:	9202      	str	r2, [sp, #8]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	9201      	str	r2, [sp, #4]
 8007a4c:	9300      	str	r3, [sp, #0]
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2200      	movs	r2, #0
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 f8cc 	bl	8008bf0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007a58:	e109      	b.n	8007c6e <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f90c 	bl	8007c78 <USBH_HandleEnum>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 80f3 	bne.w	8007c54 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d103      	bne.n	8007a88 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2208      	movs	r2, #8
 8007a84:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007a86:	e0e5      	b.n	8007c54 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2207      	movs	r2, #7
 8007a8c:	701a      	strb	r2, [r3, #0]
      break;
 8007a8e:	e0e1      	b.n	8007c54 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 80de 	beq.w	8007c58 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007aa2:	2101      	movs	r1, #1
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2208      	movs	r2, #8
 8007aac:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007aae:	e0d3      	b.n	8007c58 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fc20 	bl	8008300 <USBH_SetCfg>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f040 80ca 	bne.w	8007c5c <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2209      	movs	r2, #9
 8007acc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007ace:	e0c5      	b.n	8007c5c <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8007ade:	2101      	movs	r1, #1
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fc30 	bl	8008346 <USBH_SetFeature>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	f040 80b9 	bne.w	8007c60 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	220a      	movs	r2, #10
 8007af2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007af4:	e0b4      	b.n	8007c60 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	220a      	movs	r2, #10
 8007afa:	701a      	strb	r2, [r3, #0]
      break;
 8007afc:	e0b0      	b.n	8007c60 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	f000 80ad 	beq.w	8007c64 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b12:	2300      	movs	r3, #0
 8007b14:	73fb      	strb	r3, [r7, #15]
 8007b16:	e016      	b.n	8007b46 <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007b18:	7bfa      	ldrb	r2, [r7, #15]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	32de      	adds	r2, #222	; 0xde
 8007b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b22:	791a      	ldrb	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d108      	bne.n	8007b40 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007b2e:	7bfa      	ldrb	r2, [r7, #15]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	32de      	adds	r2, #222	; 0xde
 8007b34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007b3e:	e005      	b.n	8007b4c <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	3301      	adds	r3, #1
 8007b44:	73fb      	strb	r3, [r7, #15]
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d0e5      	beq.n	8007b18 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d016      	beq.n	8007b84 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	4798      	blx	r3
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d109      	bne.n	8007b7c <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2206      	movs	r2, #6
 8007b6c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007b74:	2103      	movs	r1, #3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007b7a:	e073      	b.n	8007c64 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	220d      	movs	r2, #13
 8007b80:	701a      	strb	r2, [r3, #0]
      break;
 8007b82:	e06f      	b.n	8007c64 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	220d      	movs	r2, #13
 8007b88:	701a      	strb	r2, [r3, #0]
      break;
 8007b8a:	e06b      	b.n	8007c64 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d017      	beq.n	8007bc6 <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	220b      	movs	r2, #11
 8007bb2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007bb4:	e058      	b.n	8007c68 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 8007bb6:	7bbb      	ldrb	r3, [r7, #14]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b02      	cmp	r3, #2
 8007bbc:	d154      	bne.n	8007c68 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	220d      	movs	r2, #13
 8007bc2:	701a      	strb	r2, [r3, #0]
      break;
 8007bc4:	e050      	b.n	8007c68 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	220d      	movs	r2, #13
 8007bca:	701a      	strb	r2, [r3, #0]
      break;
 8007bcc:	e04c      	b.n	8007c68 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d049      	beq.n	8007c6c <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	4798      	blx	r3
      }
      break;
 8007be4:	e042      	b.n	8007c6c <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff fd72 	bl	80076d8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d009      	beq.n	8007c12 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d005      	beq.n	8007c28 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007c22:	2105      	movs	r1, #5
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d107      	bne.n	8007c44 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f7ff fe2b 	bl	8007898 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007c42:	e014      	b.n	8007c6e <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f9b5 	bl	8008fb4 <USBH_LL_Start>
      break;
 8007c4a:	e010      	b.n	8007c6e <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007c4c:	bf00      	nop
 8007c4e:	e00e      	b.n	8007c6e <USBH_Process+0x3b6>
      break;
 8007c50:	bf00      	nop
 8007c52:	e00c      	b.n	8007c6e <USBH_Process+0x3b6>
      break;
 8007c54:	bf00      	nop
 8007c56:	e00a      	b.n	8007c6e <USBH_Process+0x3b6>
    break;
 8007c58:	bf00      	nop
 8007c5a:	e008      	b.n	8007c6e <USBH_Process+0x3b6>
      break;
 8007c5c:	bf00      	nop
 8007c5e:	e006      	b.n	8007c6e <USBH_Process+0x3b6>
      break;
 8007c60:	bf00      	nop
 8007c62:	e004      	b.n	8007c6e <USBH_Process+0x3b6>
      break;
 8007c64:	bf00      	nop
 8007c66:	e002      	b.n	8007c6e <USBH_Process+0x3b6>
      break;
 8007c68:	bf00      	nop
 8007c6a:	e000      	b.n	8007c6e <USBH_Process+0x3b6>
      break;
 8007c6c:	bf00      	nop
  }
  return USBH_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b088      	sub	sp, #32
 8007c7c:	af04      	add	r7, sp, #16
 8007c7e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007c80:	2301      	movs	r3, #1
 8007c82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	2b07      	cmp	r3, #7
 8007c8e:	f200 81c1 	bhi.w	8008014 <USBH_HandleEnum+0x39c>
 8007c92:	a201      	add	r2, pc, #4	; (adr r2, 8007c98 <USBH_HandleEnum+0x20>)
 8007c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c98:	08007cb9 	.word	0x08007cb9
 8007c9c:	08007d77 	.word	0x08007d77
 8007ca0:	08007de1 	.word	0x08007de1
 8007ca4:	08007e6f 	.word	0x08007e6f
 8007ca8:	08007ed9 	.word	0x08007ed9
 8007cac:	08007f49 	.word	0x08007f49
 8007cb0:	08007f8f 	.word	0x08007f8f
 8007cb4:	08007fd5 	.word	0x08007fd5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007cb8:	2108      	movs	r1, #8
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa50 	bl	8008160 <USBH_Get_DevDesc>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d130      	bne.n	8007d2c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	7919      	ldrb	r1, [r3, #4]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007cee:	b292      	uxth	r2, r2
 8007cf0:	9202      	str	r2, [sp, #8]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	9201      	str	r2, [sp, #4]
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2280      	movs	r2, #128	; 0x80
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 ff77 	bl	8008bf0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	7959      	ldrb	r1, [r3, #5]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007d16:	b292      	uxth	r2, r2
 8007d18:	9202      	str	r2, [sp, #8]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	9201      	str	r2, [sp, #4]
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	4603      	mov	r3, r0
 8007d22:	2200      	movs	r2, #0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 ff63 	bl	8008bf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007d2a:	e175      	b.n	8008018 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	f040 8172 	bne.w	8008018 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	d903      	bls.n	8007d56 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	220d      	movs	r2, #13
 8007d52:	701a      	strb	r2, [r3, #0]
      break;
 8007d54:	e160      	b.n	8008018 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	795b      	ldrb	r3, [r3, #5]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 ff97 	bl	8008c90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	791b      	ldrb	r3, [r3, #4]
 8007d66:	4619      	mov	r1, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 ff91 	bl	8008c90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]
      break;
 8007d74:	e150      	b.n	8008018 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007d76:	2112      	movs	r1, #18
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 f9f1 	bl	8008160 <USBH_Get_DevDesc>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007d82:	7bbb      	ldrb	r3, [r7, #14]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007d8e:	e145      	b.n	800801c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	f040 8142 	bne.w	800801c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007d9e:	3301      	adds	r3, #1
 8007da0:	b2da      	uxtb	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d903      	bls.n	8007dba <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	220d      	movs	r2, #13
 8007db6:	701a      	strb	r2, [r3, #0]
      break;
 8007db8:	e130      	b.n	800801c <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	795b      	ldrb	r3, [r3, #5]
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 ff65 	bl	8008c90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	791b      	ldrb	r3, [r3, #4]
 8007dca:	4619      	mov	r1, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 ff5f 	bl	8008c90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
      break;
 8007dde:	e11d      	b.n	800801c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007de0:	2101      	movs	r1, #1
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fa68 	bl	80082b8 <USBH_SetAddress>
 8007de8:	4603      	mov	r3, r0
 8007dea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007dec:	7bbb      	ldrb	r3, [r7, #14]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d132      	bne.n	8007e58 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007df2:	2002      	movs	r0, #2
 8007df4:	f001 fa42 	bl	800927c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2203      	movs	r2, #3
 8007e04:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7919      	ldrb	r1, [r3, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007e1a:	b292      	uxth	r2, r2
 8007e1c:	9202      	str	r2, [sp, #8]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	9201      	str	r2, [sp, #4]
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	4603      	mov	r3, r0
 8007e26:	2280      	movs	r2, #128	; 0x80
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 fee1 	bl	8008bf0 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	7959      	ldrb	r1, [r3, #5]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007e42:	b292      	uxth	r2, r2
 8007e44:	9202      	str	r2, [sp, #8]
 8007e46:	2200      	movs	r2, #0
 8007e48:	9201      	str	r2, [sp, #4]
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2200      	movs	r2, #0
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fecd 	bl	8008bf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007e56:	e0e3      	b.n	8008020 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
 8007e5a:	2b03      	cmp	r3, #3
 8007e5c:	f040 80e0 	bne.w	8008020 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	220d      	movs	r2, #13
 8007e64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	705a      	strb	r2, [r3, #1]
      break;
 8007e6c:	e0d8      	b.n	8008020 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007e6e:	2109      	movs	r1, #9
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f99d 	bl	80081b0 <USBH_Get_CfgDesc>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d103      	bne.n	8007e88 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2204      	movs	r2, #4
 8007e84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007e86:	e0cd      	b.n	8008024 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	f040 80ca 	bne.w	8008024 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007e96:	3301      	adds	r3, #1
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	d903      	bls.n	8007eb2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	220d      	movs	r2, #13
 8007eae:	701a      	strb	r2, [r3, #0]
      break;
 8007eb0:	e0b8      	b.n	8008024 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	795b      	ldrb	r3, [r3, #5]
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fee9 	bl	8008c90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	791b      	ldrb	r3, [r3, #4]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fee3 	bl	8008c90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	701a      	strb	r2, [r3, #0]
      break;
 8007ed6:	e0a5      	b.n	8008024 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007ede:	4619      	mov	r1, r3
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f965 	bl	80081b0 <USBH_Get_CfgDesc>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007ef6:	e097      	b.n	8008028 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	f040 8094 	bne.w	8008028 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f06:	3301      	adds	r3, #1
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d903      	bls.n	8007f22 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	220d      	movs	r2, #13
 8007f1e:	701a      	strb	r2, [r3, #0]
      break;
 8007f20:	e082      	b.n	8008028 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	795b      	ldrb	r3, [r3, #5]
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 feb1 	bl	8008c90 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	791b      	ldrb	r3, [r3, #4]
 8007f32:	4619      	mov	r1, r3
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 feab 	bl	8008c90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	701a      	strb	r2, [r3, #0]
      break;
 8007f46:	e06f      	b.n	8008028 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d019      	beq.n	8007f86 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007f5e:	23ff      	movs	r3, #255	; 0xff
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 f949 	bl	80081f8 <USBH_Get_StringDesc>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d103      	bne.n	8007f78 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2206      	movs	r2, #6
 8007f74:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007f76:	e059      	b.n	800802c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007f78:	7bbb      	ldrb	r3, [r7, #14]
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d156      	bne.n	800802c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2206      	movs	r2, #6
 8007f82:	705a      	strb	r2, [r3, #1]
      break;
 8007f84:	e052      	b.n	800802c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2206      	movs	r2, #6
 8007f8a:	705a      	strb	r2, [r3, #1]
      break;
 8007f8c:	e04e      	b.n	800802c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d019      	beq.n	8007fcc <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007fa4:	23ff      	movs	r3, #255	; 0xff
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f926 	bl	80081f8 <USBH_Get_StringDesc>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007fb0:	7bbb      	ldrb	r3, [r7, #14]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d103      	bne.n	8007fbe <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2207      	movs	r2, #7
 8007fba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007fbc:	e038      	b.n	8008030 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007fbe:	7bbb      	ldrb	r3, [r7, #14]
 8007fc0:	2b03      	cmp	r3, #3
 8007fc2:	d135      	bne.n	8008030 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2207      	movs	r2, #7
 8007fc8:	705a      	strb	r2, [r3, #1]
      break;
 8007fca:	e031      	b.n	8008030 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2207      	movs	r2, #7
 8007fd0:	705a      	strb	r2, [r3, #1]
      break;
 8007fd2:	e02d      	b.n	8008030 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d017      	beq.n	800800e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007fea:	23ff      	movs	r3, #255	; 0xff
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 f903 	bl	80081f8 <USBH_Get_StringDesc>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007ff6:	7bbb      	ldrb	r3, [r7, #14]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008000:	e018      	b.n	8008034 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b03      	cmp	r3, #3
 8008006:	d115      	bne.n	8008034 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008008:	2300      	movs	r3, #0
 800800a:	73fb      	strb	r3, [r7, #15]
      break;
 800800c:	e012      	b.n	8008034 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	73fb      	strb	r3, [r7, #15]
      break;
 8008012:	e00f      	b.n	8008034 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008014:	bf00      	nop
 8008016:	e00e      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008018:	bf00      	nop
 800801a:	e00c      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 800801c:	bf00      	nop
 800801e:	e00a      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008020:	bf00      	nop
 8008022:	e008      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008024:	bf00      	nop
 8008026:	e006      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008028:	bf00      	nop
 800802a:	e004      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 800802c:	bf00      	nop
 800802e:	e002      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008030:	bf00      	nop
 8008032:	e000      	b.n	8008036 <USBH_HandleEnum+0x3be>
      break;
 8008034:	bf00      	nop
  }
  return Status;
 8008036:	7bfb      	ldrb	r3, [r7, #15]
}
 8008038:	4618      	mov	r0, r3
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	683a      	ldr	r2, [r7, #0]
 800804e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008052:	bf00      	nop
 8008054:	370c      	adds	r7, #12
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f804 	bl	8008082 <USBH_HandleSof>
}
 800807a:	bf00      	nop
 800807c:	3708      	adds	r7, #8
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b082      	sub	sp, #8
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b0b      	cmp	r3, #11
 8008092:	d10a      	bne.n	80080aa <USBH_HandleSof+0x28>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
  }
}
 80080aa:	bf00      	nop
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80080c2:	bf00      	nop
}
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80080de:	bf00      	nop
}
 80080e0:	370c      	adds	r7, #12
 80080e2:	46bd      	mov	sp, r7
 80080e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e8:	4770      	bx	lr

080080ea <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b083      	sub	sp, #12
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 ff56 	bl	8008fea <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	791b      	ldrb	r3, [r3, #4]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 fda3 	bl	8008c90 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	795b      	ldrb	r3, [r3, #5]
 800814e:	4619      	mov	r1, r3
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fd9d 	bl	8008c90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008156:	2300      	movs	r3, #0
}
 8008158:	4618      	mov	r0, r3
 800815a:	3708      	adds	r7, #8
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}

08008160 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b086      	sub	sp, #24
 8008164:	af02      	add	r7, sp, #8
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	460b      	mov	r3, r1
 800816a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	b29b      	uxth	r3, r3
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4613      	mov	r3, r2
 800817a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800817e:	2100      	movs	r1, #0
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f864 	bl	800824e <USBH_GetDescriptor>
 8008186:	4603      	mov	r3, r0
 8008188:	73fb      	strb	r3, [r7, #15]
 800818a:	7bfb      	ldrb	r3, [r7, #15]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d10a      	bne.n	80081a6 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800819c:	78fa      	ldrb	r2, [r7, #3]
 800819e:	b292      	uxth	r2, r2
 80081a0:	4619      	mov	r1, r3
 80081a2:	f000 f918 	bl	80083d6 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af02      	add	r7, sp, #8
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	460b      	mov	r3, r1
 80081ba:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	331c      	adds	r3, #28
 80081c0:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80081c2:	887b      	ldrh	r3, [r7, #2]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081cc:	2100      	movs	r1, #0
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f000 f83d 	bl	800824e <USBH_GetDescriptor>
 80081d4:	4603      	mov	r3, r0
 80081d6:	72fb      	strb	r3, [r7, #11]
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80081e4:	887a      	ldrh	r2, [r7, #2]
 80081e6:	68f9      	ldr	r1, [r7, #12]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 f964 	bl	80084b6 <USBH_ParseCfgDesc>
  }

  return status;
 80081ee:	7afb      	ldrb	r3, [r7, #11]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af02      	add	r7, sp, #8
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	607a      	str	r2, [r7, #4]
 8008202:	461a      	mov	r2, r3
 8008204:	460b      	mov	r3, r1
 8008206:	72fb      	strb	r3, [r7, #11]
 8008208:	4613      	mov	r3, r2
 800820a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800820c:	7afb      	ldrb	r3, [r7, #11]
 800820e:	b29b      	uxth	r3, r3
 8008210:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008214:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800821c:	893b      	ldrh	r3, [r7, #8]
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	460b      	mov	r3, r1
 8008222:	2100      	movs	r1, #0
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f000 f812 	bl	800824e <USBH_GetDescriptor>
 800822a:	4603      	mov	r3, r0
 800822c:	75fb      	strb	r3, [r7, #23]
 800822e:	7dfb      	ldrb	r3, [r7, #23]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d107      	bne.n	8008244 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800823a:	893a      	ldrh	r2, [r7, #8]
 800823c:	6879      	ldr	r1, [r7, #4]
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fa37 	bl	80086b2 <USBH_ParseStringDesc>
  }

  return status;
 8008244:	7dfb      	ldrb	r3, [r7, #23]
}
 8008246:	4618      	mov	r0, r3
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	607b      	str	r3, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	72fb      	strb	r3, [r7, #11]
 800825c:	4613      	mov	r3, r2
 800825e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	789b      	ldrb	r3, [r3, #2]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d11c      	bne.n	80082a2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008268:	7afb      	ldrb	r3, [r7, #11]
 800826a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800826e:	b2da      	uxtb	r2, r3
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2206      	movs	r2, #6
 8008278:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	893a      	ldrh	r2, [r7, #8]
 800827e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008280:	893b      	ldrh	r3, [r7, #8]
 8008282:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800828a:	d104      	bne.n	8008296 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f240 4209 	movw	r2, #1033	; 0x409
 8008292:	829a      	strh	r2, [r3, #20]
 8008294:	e002      	b.n	800829c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	8b3a      	ldrh	r2, [r7, #24]
 80082a0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80082a2:	8b3b      	ldrh	r3, [r7, #24]
 80082a4:	461a      	mov	r2, r3
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f000 fa50 	bl	800874e <USBH_CtlReq>
 80082ae:	4603      	mov	r3, r0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b082      	sub	sp, #8
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	460b      	mov	r3, r1
 80082c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	789b      	ldrb	r3, [r3, #2]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d10f      	bne.n	80082ec <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2205      	movs	r2, #5
 80082d6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80082d8:	78fb      	ldrb	r3, [r7, #3]
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80082ec:	2200      	movs	r2, #0
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fa2c 	bl	800874e <USBH_CtlReq>
 80082f6:	4603      	mov	r3, r0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3708      	adds	r7, #8
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b082      	sub	sp, #8
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	789b      	ldrb	r3, [r3, #2]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d10e      	bne.n	8008332 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2209      	movs	r2, #9
 800831e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	887a      	ldrh	r2, [r7, #2]
 8008324:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2200      	movs	r2, #0
 8008330:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa09 	bl	800874e <USBH_CtlReq>
 800833c:	4603      	mov	r3, r0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	460b      	mov	r3, r1
 8008350:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	789b      	ldrb	r3, [r3, #2]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d10f      	bne.n	800837a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2203      	movs	r2, #3
 8008364:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	b29a      	uxth	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800837a:	2200      	movs	r2, #0
 800837c:	2100      	movs	r1, #0
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f9e5 	bl	800874e <USBH_CtlReq>
 8008384:	4603      	mov	r3, r0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b082      	sub	sp, #8
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	789b      	ldrb	r3, [r3, #2]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d10f      	bne.n	80083c2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2202      	movs	r2, #2
 80083a6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80083c2:	2200      	movs	r2, #0
 80083c4:	2100      	movs	r1, #0
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f9c1 	bl	800874e <USBH_CtlReq>
 80083cc:	4603      	mov	r3, r0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80083d6:	b480      	push	{r7}
 80083d8:	b085      	sub	sp, #20
 80083da:	af00      	add	r7, sp, #0
 80083dc:	60f8      	str	r0, [r7, #12]
 80083de:	60b9      	str	r1, [r7, #8]
 80083e0:	4613      	mov	r3, r2
 80083e2:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	781a      	ldrb	r2, [r3, #0]
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	785a      	ldrb	r2, [r3, #1]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	3302      	adds	r3, #2
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3303      	adds	r3, #3
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	b29b      	uxth	r3, r3
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	b29b      	uxth	r3, r3
 8008408:	4313      	orrs	r3, r2
 800840a:	b29a      	uxth	r2, r3
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	791a      	ldrb	r2, [r3, #4]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	795a      	ldrb	r2, [r3, #5]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	799a      	ldrb	r2, [r3, #6]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	79da      	ldrb	r2, [r3, #7]
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008430:	88fb      	ldrh	r3, [r7, #6]
 8008432:	2b08      	cmp	r3, #8
 8008434:	d939      	bls.n	80084aa <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	3308      	adds	r3, #8
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	b29a      	uxth	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	3309      	adds	r3, #9
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	b29b      	uxth	r3, r3
 8008446:	021b      	lsls	r3, r3, #8
 8008448:	b29b      	uxth	r3, r3
 800844a:	4313      	orrs	r3, r2
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	330a      	adds	r3, #10
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	b29a      	uxth	r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	330b      	adds	r3, #11
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	021b      	lsls	r3, r3, #8
 8008464:	b29b      	uxth	r3, r3
 8008466:	4313      	orrs	r3, r2
 8008468:	b29a      	uxth	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	330c      	adds	r3, #12
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	b29a      	uxth	r2, r3
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	330d      	adds	r3, #13
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	b29b      	uxth	r3, r3
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	b29b      	uxth	r3, r3
 8008482:	4313      	orrs	r3, r2
 8008484:	b29a      	uxth	r2, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	7b9a      	ldrb	r2, [r3, #14]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	7bda      	ldrb	r2, [r3, #15]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	7c1a      	ldrb	r2, [r3, #16]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	7c5a      	ldrb	r2, [r3, #17]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	745a      	strb	r2, [r3, #17]
  }
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr

080084b6 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b08a      	sub	sp, #40	; 0x28
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	4613      	mov	r3, r2
 80084c2:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80084c8:	2300      	movs	r3, #0
 80084ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80084ce:	2300      	movs	r3, #0
 80084d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	781a      	ldrb	r2, [r3, #0]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	785a      	ldrb	r2, [r3, #1]
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	3302      	adds	r3, #2
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	b29a      	uxth	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3303      	adds	r3, #3
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	4313      	orrs	r3, r2
 80084fe:	b29a      	uxth	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	791a      	ldrb	r2, [r3, #4]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	795a      	ldrb	r2, [r3, #5]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	799a      	ldrb	r2, [r3, #6]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	79da      	ldrb	r2, [r3, #7]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	7a1a      	ldrb	r2, [r3, #8]
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800852c:	88fb      	ldrh	r3, [r7, #6]
 800852e:	2b09      	cmp	r3, #9
 8008530:	d95f      	bls.n	80085f2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008532:	2309      	movs	r3, #9
 8008534:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008536:	2300      	movs	r3, #0
 8008538:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800853a:	e051      	b.n	80085e0 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800853c:	f107 0316 	add.w	r3, r7, #22
 8008540:	4619      	mov	r1, r3
 8008542:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008544:	f000 f8e8 	bl	8008718 <USBH_GetNextDesc>
 8008548:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	785b      	ldrb	r3, [r3, #1]
 800854e:	2b04      	cmp	r3, #4
 8008550:	d146      	bne.n	80085e0 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008556:	221a      	movs	r2, #26
 8008558:	fb02 f303 	mul.w	r3, r2, r3
 800855c:	3308      	adds	r3, #8
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	3302      	adds	r3, #2
 8008564:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008568:	69f8      	ldr	r0, [r7, #28]
 800856a:	f000 f846 	bl	80085fa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008574:	2300      	movs	r3, #0
 8008576:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008578:	e022      	b.n	80085c0 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800857a:	f107 0316 	add.w	r3, r7, #22
 800857e:	4619      	mov	r1, r3
 8008580:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008582:	f000 f8c9 	bl	8008718 <USBH_GetNextDesc>
 8008586:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b05      	cmp	r3, #5
 800858e:	d117      	bne.n	80085c0 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008590:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008594:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008598:	3201      	adds	r2, #1
 800859a:	00d2      	lsls	r2, r2, #3
 800859c:	211a      	movs	r1, #26
 800859e:	fb01 f303 	mul.w	r3, r1, r3
 80085a2:	4413      	add	r3, r2
 80085a4:	3308      	adds	r3, #8
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	4413      	add	r3, r2
 80085aa:	3304      	adds	r3, #4
 80085ac:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80085ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085b0:	69b8      	ldr	r0, [r7, #24]
 80085b2:	f000 f851 	bl	8008658 <USBH_ParseEPDesc>
            ep_ix++;
 80085b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80085ba:	3301      	adds	r3, #1
 80085bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	791b      	ldrb	r3, [r3, #4]
 80085c4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d204      	bcs.n	80085d6 <USBH_ParseCfgDesc+0x120>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	885a      	ldrh	r2, [r3, #2]
 80085d0:	8afb      	ldrh	r3, [r7, #22]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d8d1      	bhi.n	800857a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80085d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085da:	3301      	adds	r3, #1
 80085dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80085e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d804      	bhi.n	80085f2 <USBH_ParseCfgDesc+0x13c>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	885a      	ldrh	r2, [r3, #2]
 80085ec:	8afb      	ldrh	r3, [r7, #22]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d8a4      	bhi.n	800853c <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80085f2:	bf00      	nop
 80085f4:	3728      	adds	r7, #40	; 0x28
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	785a      	ldrb	r2, [r3, #1]
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	789a      	ldrb	r2, [r3, #2]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	78da      	ldrb	r2, [r3, #3]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	791a      	ldrb	r2, [r3, #4]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	795a      	ldrb	r2, [r3, #5]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	799a      	ldrb	r2, [r3, #6]
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	79da      	ldrb	r2, [r3, #7]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	7a1a      	ldrb	r2, [r3, #8]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	721a      	strb	r2, [r3, #8]
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	781a      	ldrb	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	785a      	ldrb	r2, [r3, #1]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	789a      	ldrb	r2, [r3, #2]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	78da      	ldrb	r2, [r3, #3]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	3304      	adds	r3, #4
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	b29a      	uxth	r2, r3
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	3305      	adds	r3, #5
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	021b      	lsls	r3, r3, #8
 8008694:	b29b      	uxth	r3, r3
 8008696:	4313      	orrs	r3, r2
 8008698:	b29a      	uxth	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	799a      	ldrb	r2, [r3, #6]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	719a      	strb	r2, [r3, #6]
}
 80086a6:	bf00      	nop
 80086a8:	370c      	adds	r7, #12
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr

080086b2 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b087      	sub	sp, #28
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	60f8      	str	r0, [r7, #12]
 80086ba:	60b9      	str	r1, [r7, #8]
 80086bc:	4613      	mov	r3, r2
 80086be:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3301      	adds	r3, #1
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	2b03      	cmp	r3, #3
 80086c8:	d120      	bne.n	800870c <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	1e9a      	subs	r2, r3, #2
 80086d0:	88fb      	ldrh	r3, [r7, #6]
 80086d2:	4293      	cmp	r3, r2
 80086d4:	bf28      	it	cs
 80086d6:	4613      	movcs	r3, r2
 80086d8:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3302      	adds	r3, #2
 80086de:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086e0:	2300      	movs	r3, #0
 80086e2:	82fb      	strh	r3, [r7, #22]
 80086e4:	e00b      	b.n	80086fe <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086e6:	8afb      	ldrh	r3, [r7, #22]
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	4413      	add	r3, r2
 80086ec:	781a      	ldrb	r2, [r3, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	3301      	adds	r3, #1
 80086f6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086f8:	8afb      	ldrh	r3, [r7, #22]
 80086fa:	3302      	adds	r3, #2
 80086fc:	82fb      	strh	r3, [r7, #22]
 80086fe:	8afa      	ldrh	r2, [r7, #22]
 8008700:	8abb      	ldrh	r3, [r7, #20]
 8008702:	429a      	cmp	r2, r3
 8008704:	d3ef      	bcc.n	80086e6 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	2200      	movs	r2, #0
 800870a:	701a      	strb	r2, [r3, #0]
  }
}
 800870c:	bf00      	nop
 800870e:	371c      	adds	r7, #28
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	881a      	ldrh	r2, [r3, #0]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	b29b      	uxth	r3, r3
 800872c:	4413      	add	r3, r2
 800872e:	b29a      	uxth	r2, r3
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008740:	68fb      	ldr	r3, [r7, #12]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	60f8      	str	r0, [r7, #12]
 8008756:	60b9      	str	r1, [r7, #8]
 8008758:	4613      	mov	r3, r2
 800875a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800875c:	2301      	movs	r3, #1
 800875e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	789b      	ldrb	r3, [r3, #2]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d002      	beq.n	800876e <USBH_CtlReq+0x20>
 8008768:	2b02      	cmp	r3, #2
 800876a:	d00f      	beq.n	800878c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800876c:	e027      	b.n	80087be <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	88fa      	ldrh	r2, [r7, #6]
 8008778:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2201      	movs	r2, #1
 800877e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2202      	movs	r2, #2
 8008784:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008786:	2301      	movs	r3, #1
 8008788:	75fb      	strb	r3, [r7, #23]
      break;
 800878a:	e018      	b.n	80087be <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f81b 	bl	80087c8 <USBH_HandleControl>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <USBH_CtlReq+0x54>
 800879c:	7dfb      	ldrb	r3, [r7, #23]
 800879e:	2b03      	cmp	r3, #3
 80087a0:	d106      	bne.n	80087b0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2201      	movs	r2, #1
 80087a6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2200      	movs	r2, #0
 80087ac:	761a      	strb	r2, [r3, #24]
      break;
 80087ae:	e005      	b.n	80087bc <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d102      	bne.n	80087bc <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2201      	movs	r2, #1
 80087ba:	709a      	strb	r2, [r3, #2]
      break;
 80087bc:	bf00      	nop
  }
  return status;
 80087be:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3718      	adds	r7, #24
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b086      	sub	sp, #24
 80087cc:	af02      	add	r7, sp, #8
 80087ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087d4:	2300      	movs	r3, #0
 80087d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7e1b      	ldrb	r3, [r3, #24]
 80087dc:	3b01      	subs	r3, #1
 80087de:	2b0a      	cmp	r3, #10
 80087e0:	f200 8156 	bhi.w	8008a90 <USBH_HandleControl+0x2c8>
 80087e4:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <USBH_HandleControl+0x24>)
 80087e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ea:	bf00      	nop
 80087ec:	08008819 	.word	0x08008819
 80087f0:	08008833 	.word	0x08008833
 80087f4:	0800889d 	.word	0x0800889d
 80087f8:	080088c3 	.word	0x080088c3
 80087fc:	080088fb 	.word	0x080088fb
 8008800:	08008925 	.word	0x08008925
 8008804:	08008977 	.word	0x08008977
 8008808:	08008999 	.word	0x08008999
 800880c:	080089d5 	.word	0x080089d5
 8008810:	080089fb 	.word	0x080089fb
 8008814:	08008a39 	.word	0x08008a39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f103 0110 	add.w	r1, r3, #16
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	795b      	ldrb	r3, [r3, #5]
 8008822:	461a      	mov	r2, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f943 	bl	8008ab0 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2202      	movs	r2, #2
 800882e:	761a      	strb	r2, [r3, #24]
      break;
 8008830:	e139      	b.n	8008aa6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	795b      	ldrb	r3, [r3, #5]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f000 fcc5 	bl	80091c8 <USBH_LL_GetURBState>
 800883e:	4603      	mov	r3, r0
 8008840:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d11e      	bne.n	8008886 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	7c1b      	ldrb	r3, [r3, #16]
 800884c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008850:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	8adb      	ldrh	r3, [r3, #22]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00a      	beq.n	8008870 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800885a:	7b7b      	ldrb	r3, [r7, #13]
 800885c:	2b80      	cmp	r3, #128	; 0x80
 800885e:	d103      	bne.n	8008868 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2203      	movs	r2, #3
 8008864:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008866:	e115      	b.n	8008a94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2205      	movs	r2, #5
 800886c:	761a      	strb	r2, [r3, #24]
      break;
 800886e:	e111      	b.n	8008a94 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008870:	7b7b      	ldrb	r3, [r7, #13]
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d103      	bne.n	800887e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2209      	movs	r2, #9
 800887a:	761a      	strb	r2, [r3, #24]
      break;
 800887c:	e10a      	b.n	8008a94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2207      	movs	r2, #7
 8008882:	761a      	strb	r2, [r3, #24]
      break;
 8008884:	e106      	b.n	8008a94 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008886:	7bbb      	ldrb	r3, [r7, #14]
 8008888:	2b04      	cmp	r3, #4
 800888a:	d003      	beq.n	8008894 <USBH_HandleControl+0xcc>
 800888c:	7bbb      	ldrb	r3, [r7, #14]
 800888e:	2b02      	cmp	r3, #2
 8008890:	f040 8100 	bne.w	8008a94 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	220b      	movs	r2, #11
 8008898:	761a      	strb	r2, [r3, #24]
      break;
 800889a:	e0fb      	b.n	8008a94 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088a2:	b29a      	uxth	r2, r3
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6899      	ldr	r1, [r3, #8]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	899a      	ldrh	r2, [r3, #12]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	791b      	ldrb	r3, [r3, #4]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 f93a 	bl	8008b2e <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2204      	movs	r2, #4
 80088be:	761a      	strb	r2, [r3, #24]
      break;
 80088c0:	e0f1      	b.n	8008aa6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	791b      	ldrb	r3, [r3, #4]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fc7d 	bl	80091c8 <USBH_LL_GetURBState>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d102      	bne.n	80088de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2209      	movs	r2, #9
 80088dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80088de:	7bbb      	ldrb	r3, [r7, #14]
 80088e0:	2b05      	cmp	r3, #5
 80088e2:	d102      	bne.n	80088ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80088e4:	2303      	movs	r3, #3
 80088e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80088e8:	e0d6      	b.n	8008a98 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80088ea:	7bbb      	ldrb	r3, [r7, #14]
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	f040 80d3 	bne.w	8008a98 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	220b      	movs	r2, #11
 80088f6:	761a      	strb	r2, [r3, #24]
      break;
 80088f8:	e0ce      	b.n	8008a98 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6899      	ldr	r1, [r3, #8]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	899a      	ldrh	r2, [r3, #12]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	795b      	ldrb	r3, [r3, #5]
 8008906:	2001      	movs	r0, #1
 8008908:	9000      	str	r0, [sp, #0]
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 f8ea 	bl	8008ae4 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008916:	b29a      	uxth	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2206      	movs	r2, #6
 8008920:	761a      	strb	r2, [r3, #24]
      break;
 8008922:	e0c0      	b.n	8008aa6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	795b      	ldrb	r3, [r3, #5]
 8008928:	4619      	mov	r1, r3
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fc4c 	bl	80091c8 <USBH_LL_GetURBState>
 8008930:	4603      	mov	r3, r0
 8008932:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008934:	7bbb      	ldrb	r3, [r7, #14]
 8008936:	2b01      	cmp	r3, #1
 8008938:	d103      	bne.n	8008942 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2207      	movs	r2, #7
 800893e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008940:	e0ac      	b.n	8008a9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008942:	7bbb      	ldrb	r3, [r7, #14]
 8008944:	2b05      	cmp	r3, #5
 8008946:	d105      	bne.n	8008954 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	220c      	movs	r2, #12
 800894c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800894e:	2303      	movs	r3, #3
 8008950:	73fb      	strb	r3, [r7, #15]
      break;
 8008952:	e0a3      	b.n	8008a9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b02      	cmp	r3, #2
 8008958:	d103      	bne.n	8008962 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2205      	movs	r2, #5
 800895e:	761a      	strb	r2, [r3, #24]
      break;
 8008960:	e09c      	b.n	8008a9c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008962:	7bbb      	ldrb	r3, [r7, #14]
 8008964:	2b04      	cmp	r3, #4
 8008966:	f040 8099 	bne.w	8008a9c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	220b      	movs	r2, #11
 800896e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008970:	2302      	movs	r3, #2
 8008972:	73fb      	strb	r3, [r7, #15]
      break;
 8008974:	e092      	b.n	8008a9c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	791b      	ldrb	r3, [r3, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	2100      	movs	r1, #0
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f8d5 	bl	8008b2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800898a:	b29a      	uxth	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2208      	movs	r2, #8
 8008994:	761a      	strb	r2, [r3, #24]

      break;
 8008996:	e086      	b.n	8008aa6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	791b      	ldrb	r3, [r3, #4]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fc12 	bl	80091c8 <USBH_LL_GetURBState>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089a8:	7bbb      	ldrb	r3, [r7, #14]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d105      	bne.n	80089ba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	220d      	movs	r2, #13
 80089b2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80089b8:	e072      	b.n	8008aa0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80089ba:	7bbb      	ldrb	r3, [r7, #14]
 80089bc:	2b04      	cmp	r3, #4
 80089be:	d103      	bne.n	80089c8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	220b      	movs	r2, #11
 80089c4:	761a      	strb	r2, [r3, #24]
      break;
 80089c6:	e06b      	b.n	8008aa0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80089c8:	7bbb      	ldrb	r3, [r7, #14]
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	d168      	bne.n	8008aa0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80089ce:	2303      	movs	r3, #3
 80089d0:	73fb      	strb	r3, [r7, #15]
      break;
 80089d2:	e065      	b.n	8008aa0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	795b      	ldrb	r3, [r3, #5]
 80089d8:	2201      	movs	r2, #1
 80089da:	9200      	str	r2, [sp, #0]
 80089dc:	2200      	movs	r2, #0
 80089de:	2100      	movs	r1, #0
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 f87f 	bl	8008ae4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	220a      	movs	r2, #10
 80089f6:	761a      	strb	r2, [r3, #24]
      break;
 80089f8:	e055      	b.n	8008aa6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	795b      	ldrb	r3, [r3, #5]
 80089fe:	4619      	mov	r1, r3
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fbe1 	bl	80091c8 <USBH_LL_GetURBState>
 8008a06:	4603      	mov	r3, r0
 8008a08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d105      	bne.n	8008a1c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	220d      	movs	r2, #13
 8008a18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008a1a:	e043      	b.n	8008aa4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d103      	bne.n	8008a2a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2209      	movs	r2, #9
 8008a26:	761a      	strb	r2, [r3, #24]
      break;
 8008a28:	e03c      	b.n	8008aa4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	d139      	bne.n	8008aa4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	220b      	movs	r2, #11
 8008a34:	761a      	strb	r2, [r3, #24]
      break;
 8008a36:	e035      	b.n	8008aa4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	7e5b      	ldrb	r3, [r3, #25]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	765a      	strb	r2, [r3, #25]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	7e5b      	ldrb	r3, [r3, #25]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d806      	bhi.n	8008a5a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a58:	e025      	b.n	8008aa6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008a60:	2106      	movs	r1, #6
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	795b      	ldrb	r3, [r3, #5]
 8008a70:	4619      	mov	r1, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f90c 	bl	8008c90 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	791b      	ldrb	r3, [r3, #4]
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 f906 	bl	8008c90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a8a:	2302      	movs	r3, #2
 8008a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a8e:	e00a      	b.n	8008aa6 <USBH_HandleControl+0x2de>

    default:
      break;
 8008a90:	bf00      	nop
 8008a92:	e008      	b.n	8008aa6 <USBH_HandleControl+0x2de>
      break;
 8008a94:	bf00      	nop
 8008a96:	e006      	b.n	8008aa6 <USBH_HandleControl+0x2de>
      break;
 8008a98:	bf00      	nop
 8008a9a:	e004      	b.n	8008aa6 <USBH_HandleControl+0x2de>
      break;
 8008a9c:	bf00      	nop
 8008a9e:	e002      	b.n	8008aa6 <USBH_HandleControl+0x2de>
      break;
 8008aa0:	bf00      	nop
 8008aa2:	e000      	b.n	8008aa6 <USBH_HandleControl+0x2de>
      break;
 8008aa4:	bf00      	nop
  }

  return status;
 8008aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b088      	sub	sp, #32
 8008ab4:	af04      	add	r7, sp, #16
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008abe:	79f9      	ldrb	r1, [r7, #7]
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	9303      	str	r3, [sp, #12]
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	9302      	str	r3, [sp, #8]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	9301      	str	r3, [sp, #4]
 8008acc:	2300      	movs	r3, #0
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	68f8      	ldr	r0, [r7, #12]
 8008ad6:	f000 fb46 	bl	8009166 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	3710      	adds	r7, #16
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b088      	sub	sp, #32
 8008ae8:	af04      	add	r7, sp, #16
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	4611      	mov	r1, r2
 8008af0:	461a      	mov	r2, r3
 8008af2:	460b      	mov	r3, r1
 8008af4:	80fb      	strh	r3, [r7, #6]
 8008af6:	4613      	mov	r3, r2
 8008af8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b04:	2300      	movs	r3, #0
 8008b06:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b08:	7979      	ldrb	r1, [r7, #5]
 8008b0a:	7e3b      	ldrb	r3, [r7, #24]
 8008b0c:	9303      	str	r3, [sp, #12]
 8008b0e:	88fb      	ldrh	r3, [r7, #6]
 8008b10:	9302      	str	r3, [sp, #8]
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	2301      	movs	r3, #1
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 fb21 	bl	8009166 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}

08008b2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b088      	sub	sp, #32
 8008b32:	af04      	add	r7, sp, #16
 8008b34:	60f8      	str	r0, [r7, #12]
 8008b36:	60b9      	str	r1, [r7, #8]
 8008b38:	4611      	mov	r1, r2
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	80fb      	strh	r3, [r7, #6]
 8008b40:	4613      	mov	r3, r2
 8008b42:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b44:	7979      	ldrb	r1, [r7, #5]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9303      	str	r3, [sp, #12]
 8008b4a:	88fb      	ldrh	r3, [r7, #6]
 8008b4c:	9302      	str	r3, [sp, #8]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	2301      	movs	r3, #1
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	2300      	movs	r3, #0
 8008b58:	2201      	movs	r2, #1
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fb03 	bl	8009166 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008b60:	2300      	movs	r3, #0

}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b088      	sub	sp, #32
 8008b6e:	af04      	add	r7, sp, #16
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	4611      	mov	r1, r2
 8008b76:	461a      	mov	r2, r3
 8008b78:	460b      	mov	r3, r1
 8008b7a:	80fb      	strh	r3, [r7, #6]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d001      	beq.n	8008b8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008b8e:	7979      	ldrb	r1, [r7, #5]
 8008b90:	7e3b      	ldrb	r3, [r7, #24]
 8008b92:	9303      	str	r3, [sp, #12]
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	9301      	str	r3, [sp, #4]
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f000 fade 	bl	8009166 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af04      	add	r7, sp, #16
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	80fb      	strh	r3, [r7, #6]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008bca:	7979      	ldrb	r1, [r7, #5]
 8008bcc:	2300      	movs	r3, #0
 8008bce:	9303      	str	r3, [sp, #12]
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	9302      	str	r3, [sp, #8]
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	9301      	str	r3, [sp, #4]
 8008bd8:	2301      	movs	r3, #1
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	2302      	movs	r3, #2
 8008bde:	2201      	movs	r2, #1
 8008be0:	68f8      	ldr	r0, [r7, #12]
 8008be2:	f000 fac0 	bl	8009166 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af04      	add	r7, sp, #16
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	4603      	mov	r3, r0
 8008c00:	70fb      	strb	r3, [r7, #3]
 8008c02:	460b      	mov	r3, r1
 8008c04:	70bb      	strb	r3, [r7, #2]
 8008c06:	4613      	mov	r3, r2
 8008c08:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c0a:	7878      	ldrb	r0, [r7, #1]
 8008c0c:	78ba      	ldrb	r2, [r7, #2]
 8008c0e:	78f9      	ldrb	r1, [r7, #3]
 8008c10:	8b3b      	ldrh	r3, [r7, #24]
 8008c12:	9302      	str	r3, [sp, #8]
 8008c14:	7d3b      	ldrb	r3, [r7, #20]
 8008c16:	9301      	str	r3, [sp, #4]
 8008c18:	7c3b      	ldrb	r3, [r7, #16]
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa53 	bl	80090ca <USBH_LL_OpenPipe>

  return USBH_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
 8008c36:	460b      	mov	r3, r1
 8008c38:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fa72 	bl	8009128 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
 8008c56:	460b      	mov	r3, r1
 8008c58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f836 	bl	8008ccc <USBH_GetFreePipe>
 8008c60:	4603      	mov	r3, r0
 8008c62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c64:	89fb      	ldrh	r3, [r7, #14]
 8008c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00a      	beq.n	8008c84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008c6e:	78fa      	ldrb	r2, [r7, #3]
 8008c70:	89fb      	ldrh	r3, [r7, #14]
 8008c72:	f003 030f 	and.w	r3, r3, #15
 8008c76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	33e0      	adds	r3, #224	; 0xe0
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	440b      	add	r3, r1
 8008c82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c84:	89fb      	ldrh	r3, [r7, #14]
 8008c86:	b2db      	uxtb	r3, r3
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8008c9c:	78fb      	ldrb	r3, [r7, #3]
 8008c9e:	2b0a      	cmp	r3, #10
 8008ca0:	d80d      	bhi.n	8008cbe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	33e0      	adds	r3, #224	; 0xe0
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008cb4:	6879      	ldr	r1, [r7, #4]
 8008cb6:	33e0      	adds	r3, #224	; 0xe0
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	440b      	add	r3, r1
 8008cbc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
 8008cdc:	e00f      	b.n	8008cfe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008cde:	7bfb      	ldrb	r3, [r7, #15]
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	33e0      	adds	r3, #224	; 0xe0
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	4413      	add	r3, r2
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	e007      	b.n	8008d08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	73fb      	strb	r3, [r7, #15]
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	2b0a      	cmp	r3, #10
 8008d02:	d9ec      	bls.n	8008cde <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008d18:	2201      	movs	r2, #1
 8008d1a:	490e      	ldr	r1, [pc, #56]	; (8008d54 <MX_USB_HOST_Init+0x40>)
 8008d1c:	480e      	ldr	r0, [pc, #56]	; (8008d58 <MX_USB_HOST_Init+0x44>)
 8008d1e:	f7fe fca1 	bl	8007664 <USBH_Init>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d001      	beq.n	8008d2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008d28:	f7f7 fedc 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008d2c:	490b      	ldr	r1, [pc, #44]	; (8008d5c <MX_USB_HOST_Init+0x48>)
 8008d2e:	480a      	ldr	r0, [pc, #40]	; (8008d58 <MX_USB_HOST_Init+0x44>)
 8008d30:	f7fe fd26 	bl	8007780 <USBH_RegisterClass>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d001      	beq.n	8008d3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d3a:	f7f7 fed3 	bl	8000ae4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d3e:	4806      	ldr	r0, [pc, #24]	; (8008d58 <MX_USB_HOST_Init+0x44>)
 8008d40:	f7fe fdaa 	bl	8007898 <USBH_Start>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d001      	beq.n	8008d4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d4a:	f7f7 fecb 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d4e:	bf00      	nop
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	08008d75 	.word	0x08008d75
 8008d58:	20000480 	.word	0x20000480
 8008d5c:	2000000c 	.word	0x2000000c

08008d60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d64:	4802      	ldr	r0, [pc, #8]	; (8008d70 <MX_USB_HOST_Process+0x10>)
 8008d66:	f7fe fda7 	bl	80078b8 <USBH_Process>
}
 8008d6a:	bf00      	nop
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000480 	.word	0x20000480

08008d74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	2b04      	cmp	r3, #4
 8008d86:	d819      	bhi.n	8008dbc <USBH_UserProcess+0x48>
 8008d88:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <USBH_UserProcess+0x1c>)
 8008d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d8e:	bf00      	nop
 8008d90:	08008dbd 	.word	0x08008dbd
 8008d94:	08008dad 	.word	0x08008dad
 8008d98:	08008dbd 	.word	0x08008dbd
 8008d9c:	08008db5 	.word	0x08008db5
 8008da0:	08008da5 	.word	0x08008da5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008da4:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <USBH_UserProcess+0x58>)
 8008da6:	2203      	movs	r2, #3
 8008da8:	701a      	strb	r2, [r3, #0]
  break;
 8008daa:	e008      	b.n	8008dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008dac:	4b07      	ldr	r3, [pc, #28]	; (8008dcc <USBH_UserProcess+0x58>)
 8008dae:	2202      	movs	r2, #2
 8008db0:	701a      	strb	r2, [r3, #0]
  break;
 8008db2:	e004      	b.n	8008dbe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008db4:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <USBH_UserProcess+0x58>)
 8008db6:	2201      	movs	r2, #1
 8008db8:	701a      	strb	r2, [r3, #0]
  break;
 8008dba:	e000      	b.n	8008dbe <USBH_UserProcess+0x4a>

  default:
  break;
 8008dbc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008dbe:	bf00      	nop
 8008dc0:	370c      	adds	r7, #12
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	200000b0 	.word	0x200000b0

08008dd0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b08a      	sub	sp, #40	; 0x28
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dd8:	f107 0314 	add.w	r3, r7, #20
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
 8008de0:	605a      	str	r2, [r3, #4]
 8008de2:	609a      	str	r2, [r3, #8]
 8008de4:	60da      	str	r2, [r3, #12]
 8008de6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008df0:	d147      	bne.n	8008e82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	4b25      	ldr	r3, [pc, #148]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	4a24      	ldr	r2, [pc, #144]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	6313      	str	r3, [r2, #48]	; 0x30
 8008e02:	4b22      	ldr	r3, [pc, #136]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008e0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e14:	2300      	movs	r3, #0
 8008e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	4619      	mov	r1, r3
 8008e22:	481b      	ldr	r0, [pc, #108]	; (8008e90 <HAL_HCD_MspInit+0xc0>)
 8008e24:	f7f9 faea 	bl	80023fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e2e:	2302      	movs	r3, #2
 8008e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e32:	2300      	movs	r3, #0
 8008e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e36:	2300      	movs	r3, #0
 8008e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e3a:	230a      	movs	r3, #10
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e3e:	f107 0314 	add.w	r3, r7, #20
 8008e42:	4619      	mov	r1, r3
 8008e44:	4812      	ldr	r0, [pc, #72]	; (8008e90 <HAL_HCD_MspInit+0xc0>)
 8008e46:	f7f9 fad9 	bl	80023fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e4a:	4b10      	ldr	r3, [pc, #64]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e4e:	4a0f      	ldr	r2, [pc, #60]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e54:	6353      	str	r3, [r2, #52]	; 0x34
 8008e56:	2300      	movs	r3, #0
 8008e58:	60fb      	str	r3, [r7, #12]
 8008e5a:	4b0c      	ldr	r3, [pc, #48]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e5e:	4a0b      	ldr	r2, [pc, #44]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008e60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e64:	6453      	str	r3, [r2, #68]	; 0x44
 8008e66:	4b09      	ldr	r3, [pc, #36]	; (8008e8c <HAL_HCD_MspInit+0xbc>)
 8008e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e6e:	60fb      	str	r3, [r7, #12]
 8008e70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e72:	2200      	movs	r2, #0
 8008e74:	2100      	movs	r1, #0
 8008e76:	2043      	movs	r0, #67	; 0x43
 8008e78:	f7f8 fe31 	bl	8001ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e7c:	2043      	movs	r0, #67	; 0x43
 8008e7e:	f7f8 fe4a 	bl	8001b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e82:	bf00      	nop
 8008e84:	3728      	adds	r7, #40	; 0x28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	40023800 	.word	0x40023800
 8008e90:	40020000 	.word	0x40020000

08008e94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff f8db 	bl	800805e <USBH_LL_IncTimer>
}
 8008ea8:	bf00      	nop
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff f913 	bl	80080ea <USBH_LL_Connect>
}
 8008ec4:	bf00      	nop
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff f91c 	bl	8008118 <USBH_LL_Disconnect>
}
 8008ee0:	bf00      	nop
 8008ee2:	3708      	adds	r7, #8
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}

08008ee8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	70fb      	strb	r3, [r7, #3]
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff f8cd 	bl	80080b2 <USBH_LL_PortEnabled>
}
 8008f18:	bf00      	nop
 8008f1a:	3708      	adds	r7, #8
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff f8cd 	bl	80080ce <USBH_LL_PortDisabled>
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b082      	sub	sp, #8
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d12a      	bne.n	8008fa4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f4e:	4a18      	ldr	r2, [pc, #96]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a15      	ldr	r2, [pc, #84]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f5a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f5e:	4b14      	ldr	r3, [pc, #80]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f60:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f64:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f66:	4b12      	ldr	r3, [pc, #72]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f68:	2208      	movs	r2, #8
 8008f6a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f6c:	4b10      	ldr	r3, [pc, #64]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f72:	4b0f      	ldr	r3, [pc, #60]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f78:	4b0d      	ldr	r3, [pc, #52]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f84:	480a      	ldr	r0, [pc, #40]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f86:	f7f9 fbee 	bl	8002766 <HAL_HCD_Init>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d001      	beq.n	8008f94 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f90:	f7f7 fda8 	bl	8000ae4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f94:	4806      	ldr	r0, [pc, #24]	; (8008fb0 <USBH_LL_Init+0x74>)
 8008f96:	f7f9 ffd2 	bl	8002f3e <HAL_HCD_GetCurrentFrame>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f7ff f84e 	bl	8008040 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
 8008fae:	bf00      	nop
 8008fb0:	20000858 	.word	0x20000858

08008fb4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7f9 ff41 	bl	8002e52 <HAL_HCD_Start>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f000 f95c 	bl	8009294 <USBH_Get_USB_Status>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009000:	4618      	mov	r0, r3
 8009002:	f7f9 ff49 	bl	8002e98 <HAL_HCD_Stop>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	4618      	mov	r0, r3
 800900e:	f000 f941 	bl	8009294 <USBH_Get_USB_Status>
 8009012:	4603      	mov	r3, r0
 8009014:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009016:	7bbb      	ldrb	r3, [r7, #14]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3710      	adds	r7, #16
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009028:	2301      	movs	r3, #1
 800902a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009032:	4618      	mov	r0, r3
 8009034:	f7f9 ff91 	bl	8002f5a <HAL_HCD_GetCurrentSpeed>
 8009038:	4603      	mov	r3, r0
 800903a:	2b02      	cmp	r3, #2
 800903c:	d00c      	beq.n	8009058 <USBH_LL_GetSpeed+0x38>
 800903e:	2b02      	cmp	r3, #2
 8009040:	d80d      	bhi.n	800905e <USBH_LL_GetSpeed+0x3e>
 8009042:	2b00      	cmp	r3, #0
 8009044:	d002      	beq.n	800904c <USBH_LL_GetSpeed+0x2c>
 8009046:	2b01      	cmp	r3, #1
 8009048:	d003      	beq.n	8009052 <USBH_LL_GetSpeed+0x32>
 800904a:	e008      	b.n	800905e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800904c:	2300      	movs	r3, #0
 800904e:	73fb      	strb	r3, [r7, #15]
    break;
 8009050:	e008      	b.n	8009064 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009052:	2301      	movs	r3, #1
 8009054:	73fb      	strb	r3, [r7, #15]
    break;
 8009056:	e005      	b.n	8009064 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009058:	2302      	movs	r3, #2
 800905a:	73fb      	strb	r3, [r7, #15]
    break;
 800905c:	e002      	b.n	8009064 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800905e:	2301      	movs	r3, #1
 8009060:	73fb      	strb	r3, [r7, #15]
    break;
 8009062:	bf00      	nop
  }
  return  speed;
 8009064:	7bfb      	ldrb	r3, [r7, #15]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009084:	4618      	mov	r0, r3
 8009086:	f7f9 ff24 	bl	8002ed2 <HAL_HCD_ResetPort>
 800908a:	4603      	mov	r3, r0
 800908c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800908e:	7bfb      	ldrb	r3, [r7, #15]
 8009090:	4618      	mov	r0, r3
 8009092:	f000 f8ff 	bl	8009294 <USBH_Get_USB_Status>
 8009096:	4603      	mov	r3, r0
 8009098:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800909a:	7bbb      	ldrb	r3, [r7, #14]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b082      	sub	sp, #8
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80090b6:	78fa      	ldrb	r2, [r7, #3]
 80090b8:	4611      	mov	r1, r2
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7f9 ff2b 	bl	8002f16 <HAL_HCD_HC_GetXferCount>
 80090c0:	4603      	mov	r3, r0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80090ca:	b590      	push	{r4, r7, lr}
 80090cc:	b089      	sub	sp, #36	; 0x24
 80090ce:	af04      	add	r7, sp, #16
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	4608      	mov	r0, r1
 80090d4:	4611      	mov	r1, r2
 80090d6:	461a      	mov	r2, r3
 80090d8:	4603      	mov	r3, r0
 80090da:	70fb      	strb	r3, [r7, #3]
 80090dc:	460b      	mov	r3, r1
 80090de:	70bb      	strb	r3, [r7, #2]
 80090e0:	4613      	mov	r3, r2
 80090e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090e8:	2300      	movs	r3, #0
 80090ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80090f2:	787c      	ldrb	r4, [r7, #1]
 80090f4:	78ba      	ldrb	r2, [r7, #2]
 80090f6:	78f9      	ldrb	r1, [r7, #3]
 80090f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80090fa:	9302      	str	r3, [sp, #8]
 80090fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009100:	9301      	str	r3, [sp, #4]
 8009102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009106:	9300      	str	r3, [sp, #0]
 8009108:	4623      	mov	r3, r4
 800910a:	f7f9 fb8e 	bl	800282a <HAL_HCD_HC_Init>
 800910e:	4603      	mov	r3, r0
 8009110:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 f8bd 	bl	8009294 <USBH_Get_USB_Status>
 800911a:	4603      	mov	r3, r0
 800911c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800911e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	bd90      	pop	{r4, r7, pc}

08009128 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	460b      	mov	r3, r1
 8009132:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009142:	78fa      	ldrb	r2, [r7, #3]
 8009144:	4611      	mov	r1, r2
 8009146:	4618      	mov	r0, r3
 8009148:	f7f9 fbfe 	bl	8002948 <HAL_HCD_HC_Halt>
 800914c:	4603      	mov	r3, r0
 800914e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009150:	7bfb      	ldrb	r3, [r7, #15]
 8009152:	4618      	mov	r0, r3
 8009154:	f000 f89e 	bl	8009294 <USBH_Get_USB_Status>
 8009158:	4603      	mov	r3, r0
 800915a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800915c:	7bbb      	ldrb	r3, [r7, #14]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}

08009166 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009166:	b590      	push	{r4, r7, lr}
 8009168:	b089      	sub	sp, #36	; 0x24
 800916a:	af04      	add	r7, sp, #16
 800916c:	6078      	str	r0, [r7, #4]
 800916e:	4608      	mov	r0, r1
 8009170:	4611      	mov	r1, r2
 8009172:	461a      	mov	r2, r3
 8009174:	4603      	mov	r3, r0
 8009176:	70fb      	strb	r3, [r7, #3]
 8009178:	460b      	mov	r3, r1
 800917a:	70bb      	strb	r3, [r7, #2]
 800917c:	4613      	mov	r3, r2
 800917e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009180:	2300      	movs	r3, #0
 8009182:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009184:	2300      	movs	r3, #0
 8009186:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800918e:	787c      	ldrb	r4, [r7, #1]
 8009190:	78ba      	ldrb	r2, [r7, #2]
 8009192:	78f9      	ldrb	r1, [r7, #3]
 8009194:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009198:	9303      	str	r3, [sp, #12]
 800919a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800919c:	9302      	str	r3, [sp, #8]
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a0:	9301      	str	r3, [sp, #4]
 80091a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	4623      	mov	r3, r4
 80091aa:	f7f9 fbf1 	bl	8002990 <HAL_HCD_HC_SubmitRequest>
 80091ae:	4603      	mov	r3, r0
 80091b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	4618      	mov	r0, r3
 80091b6:	f000 f86d 	bl	8009294 <USBH_Get_USB_Status>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091be:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c0:	4618      	mov	r0, r3
 80091c2:	3714      	adds	r7, #20
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd90      	pop	{r4, r7, pc}

080091c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	460b      	mov	r3, r1
 80091d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80091da:	78fa      	ldrb	r2, [r7, #3]
 80091dc:	4611      	mov	r1, r2
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f9 fe85 	bl	8002eee <HAL_HCD_HC_GetURBState>
 80091e4:	4603      	mov	r3, r0
}
 80091e6:	4618      	mov	r0, r3
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}

080091ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091ee:	b580      	push	{r7, lr}
 80091f0:	b082      	sub	sp, #8
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009200:	2b01      	cmp	r3, #1
 8009202:	d103      	bne.n	800920c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	4618      	mov	r0, r3
 8009208:	f000 f870 	bl	80092ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800920c:	20c8      	movs	r0, #200	; 0xc8
 800920e:	f7f7 ff5f 	bl	80010d0 <HAL_Delay>
  return USBH_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	460b      	mov	r3, r1
 8009226:	70fb      	strb	r3, [r7, #3]
 8009228:	4613      	mov	r3, r2
 800922a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009232:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	212c      	movs	r1, #44	; 0x2c
 800923a:	fb01 f303 	mul.w	r3, r1, r3
 800923e:	4413      	add	r3, r2
 8009240:	333b      	adds	r3, #59	; 0x3b
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d009      	beq.n	800925c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	68fa      	ldr	r2, [r7, #12]
 800924c:	212c      	movs	r1, #44	; 0x2c
 800924e:	fb01 f303 	mul.w	r3, r1, r3
 8009252:	4413      	add	r3, r2
 8009254:	3354      	adds	r3, #84	; 0x54
 8009256:	78ba      	ldrb	r2, [r7, #2]
 8009258:	701a      	strb	r2, [r3, #0]
 800925a:	e008      	b.n	800926e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	212c      	movs	r1, #44	; 0x2c
 8009262:	fb01 f303 	mul.w	r3, r1, r3
 8009266:	4413      	add	r3, r2
 8009268:	3355      	adds	r3, #85	; 0x55
 800926a:	78ba      	ldrb	r2, [r7, #2]
 800926c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800926e:	2300      	movs	r3, #0
}
 8009270:	4618      	mov	r0, r3
 8009272:	3714      	adds	r7, #20
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr

0800927c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f7f7 ff23 	bl	80010d0 <HAL_Delay>
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
	...

08009294 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80092a2:	79fb      	ldrb	r3, [r7, #7]
 80092a4:	2b03      	cmp	r3, #3
 80092a6:	d817      	bhi.n	80092d8 <USBH_Get_USB_Status+0x44>
 80092a8:	a201      	add	r2, pc, #4	; (adr r2, 80092b0 <USBH_Get_USB_Status+0x1c>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092c1 	.word	0x080092c1
 80092b4:	080092c7 	.word	0x080092c7
 80092b8:	080092cd 	.word	0x080092cd
 80092bc:	080092d3 	.word	0x080092d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	73fb      	strb	r3, [r7, #15]
    break;
 80092c4:	e00b      	b.n	80092de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80092c6:	2302      	movs	r3, #2
 80092c8:	73fb      	strb	r3, [r7, #15]
    break;
 80092ca:	e008      	b.n	80092de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80092cc:	2301      	movs	r3, #1
 80092ce:	73fb      	strb	r3, [r7, #15]
    break;
 80092d0:	e005      	b.n	80092de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80092d2:	2302      	movs	r3, #2
 80092d4:	73fb      	strb	r3, [r7, #15]
    break;
 80092d6:	e002      	b.n	80092de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092d8:	2302      	movs	r3, #2
 80092da:	73fb      	strb	r3, [r7, #15]
    break;
 80092dc:	bf00      	nop
  }
  return usb_status;
 80092de:	7bfb      	ldrb	r3, [r7, #15]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3714      	adds	r7, #20
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr

080092ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	4603      	mov	r3, r0
 80092f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092fa:	79fb      	ldrb	r3, [r7, #7]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d102      	bne.n	8009306 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
 8009304:	e001      	b.n	800930a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009306:	2301      	movs	r3, #1
 8009308:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800930a:	7bfb      	ldrb	r3, [r7, #15]
 800930c:	461a      	mov	r2, r3
 800930e:	2101      	movs	r1, #1
 8009310:	4803      	ldr	r0, [pc, #12]	; (8009320 <MX_DriverVbusFS+0x34>)
 8009312:	f7f9 fa0f 	bl	8002734 <HAL_GPIO_WritePin>
}
 8009316:	bf00      	nop
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40020800 	.word	0x40020800

08009324 <__errno>:
 8009324:	4b01      	ldr	r3, [pc, #4]	; (800932c <__errno+0x8>)
 8009326:	6818      	ldr	r0, [r3, #0]
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	2000002c 	.word	0x2000002c

08009330 <__libc_init_array>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	4d0d      	ldr	r5, [pc, #52]	; (8009368 <__libc_init_array+0x38>)
 8009334:	4c0d      	ldr	r4, [pc, #52]	; (800936c <__libc_init_array+0x3c>)
 8009336:	1b64      	subs	r4, r4, r5
 8009338:	10a4      	asrs	r4, r4, #2
 800933a:	2600      	movs	r6, #0
 800933c:	42a6      	cmp	r6, r4
 800933e:	d109      	bne.n	8009354 <__libc_init_array+0x24>
 8009340:	4d0b      	ldr	r5, [pc, #44]	; (8009370 <__libc_init_array+0x40>)
 8009342:	4c0c      	ldr	r4, [pc, #48]	; (8009374 <__libc_init_array+0x44>)
 8009344:	f000 f8f8 	bl	8009538 <_init>
 8009348:	1b64      	subs	r4, r4, r5
 800934a:	10a4      	asrs	r4, r4, #2
 800934c:	2600      	movs	r6, #0
 800934e:	42a6      	cmp	r6, r4
 8009350:	d105      	bne.n	800935e <__libc_init_array+0x2e>
 8009352:	bd70      	pop	{r4, r5, r6, pc}
 8009354:	f855 3b04 	ldr.w	r3, [r5], #4
 8009358:	4798      	blx	r3
 800935a:	3601      	adds	r6, #1
 800935c:	e7ee      	b.n	800933c <__libc_init_array+0xc>
 800935e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009362:	4798      	blx	r3
 8009364:	3601      	adds	r6, #1
 8009366:	e7f2      	b.n	800934e <__libc_init_array+0x1e>
 8009368:	0800957c 	.word	0x0800957c
 800936c:	0800957c 	.word	0x0800957c
 8009370:	0800957c 	.word	0x0800957c
 8009374:	08009580 	.word	0x08009580

08009378 <malloc>:
 8009378:	4b02      	ldr	r3, [pc, #8]	; (8009384 <malloc+0xc>)
 800937a:	4601      	mov	r1, r0
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	f000 b863 	b.w	8009448 <_malloc_r>
 8009382:	bf00      	nop
 8009384:	2000002c 	.word	0x2000002c

08009388 <free>:
 8009388:	4b02      	ldr	r3, [pc, #8]	; (8009394 <free+0xc>)
 800938a:	4601      	mov	r1, r0
 800938c:	6818      	ldr	r0, [r3, #0]
 800938e:	f000 b80b 	b.w	80093a8 <_free_r>
 8009392:	bf00      	nop
 8009394:	2000002c 	.word	0x2000002c

08009398 <memset>:
 8009398:	4402      	add	r2, r0
 800939a:	4603      	mov	r3, r0
 800939c:	4293      	cmp	r3, r2
 800939e:	d100      	bne.n	80093a2 <memset+0xa>
 80093a0:	4770      	bx	lr
 80093a2:	f803 1b01 	strb.w	r1, [r3], #1
 80093a6:	e7f9      	b.n	800939c <memset+0x4>

080093a8 <_free_r>:
 80093a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093aa:	2900      	cmp	r1, #0
 80093ac:	d048      	beq.n	8009440 <_free_r+0x98>
 80093ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093b2:	9001      	str	r0, [sp, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f1a1 0404 	sub.w	r4, r1, #4
 80093ba:	bfb8      	it	lt
 80093bc:	18e4      	addlt	r4, r4, r3
 80093be:	f000 f8ad 	bl	800951c <__malloc_lock>
 80093c2:	4a20      	ldr	r2, [pc, #128]	; (8009444 <_free_r+0x9c>)
 80093c4:	9801      	ldr	r0, [sp, #4]
 80093c6:	6813      	ldr	r3, [r2, #0]
 80093c8:	4615      	mov	r5, r2
 80093ca:	b933      	cbnz	r3, 80093da <_free_r+0x32>
 80093cc:	6063      	str	r3, [r4, #4]
 80093ce:	6014      	str	r4, [r2, #0]
 80093d0:	b003      	add	sp, #12
 80093d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093d6:	f000 b8a7 	b.w	8009528 <__malloc_unlock>
 80093da:	42a3      	cmp	r3, r4
 80093dc:	d90b      	bls.n	80093f6 <_free_r+0x4e>
 80093de:	6821      	ldr	r1, [r4, #0]
 80093e0:	1862      	adds	r2, r4, r1
 80093e2:	4293      	cmp	r3, r2
 80093e4:	bf04      	itt	eq
 80093e6:	681a      	ldreq	r2, [r3, #0]
 80093e8:	685b      	ldreq	r3, [r3, #4]
 80093ea:	6063      	str	r3, [r4, #4]
 80093ec:	bf04      	itt	eq
 80093ee:	1852      	addeq	r2, r2, r1
 80093f0:	6022      	streq	r2, [r4, #0]
 80093f2:	602c      	str	r4, [r5, #0]
 80093f4:	e7ec      	b.n	80093d0 <_free_r+0x28>
 80093f6:	461a      	mov	r2, r3
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b10b      	cbz	r3, 8009400 <_free_r+0x58>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d9fa      	bls.n	80093f6 <_free_r+0x4e>
 8009400:	6811      	ldr	r1, [r2, #0]
 8009402:	1855      	adds	r5, r2, r1
 8009404:	42a5      	cmp	r5, r4
 8009406:	d10b      	bne.n	8009420 <_free_r+0x78>
 8009408:	6824      	ldr	r4, [r4, #0]
 800940a:	4421      	add	r1, r4
 800940c:	1854      	adds	r4, r2, r1
 800940e:	42a3      	cmp	r3, r4
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	d1dd      	bne.n	80093d0 <_free_r+0x28>
 8009414:	681c      	ldr	r4, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	6053      	str	r3, [r2, #4]
 800941a:	4421      	add	r1, r4
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	e7d7      	b.n	80093d0 <_free_r+0x28>
 8009420:	d902      	bls.n	8009428 <_free_r+0x80>
 8009422:	230c      	movs	r3, #12
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	e7d3      	b.n	80093d0 <_free_r+0x28>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf04      	itt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	bf04      	itt	eq
 8009438:	1949      	addeq	r1, r1, r5
 800943a:	6021      	streq	r1, [r4, #0]
 800943c:	6054      	str	r4, [r2, #4]
 800943e:	e7c7      	b.n	80093d0 <_free_r+0x28>
 8009440:	b003      	add	sp, #12
 8009442:	bd30      	pop	{r4, r5, pc}
 8009444:	200000b4 	.word	0x200000b4

08009448 <_malloc_r>:
 8009448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800944a:	1ccd      	adds	r5, r1, #3
 800944c:	f025 0503 	bic.w	r5, r5, #3
 8009450:	3508      	adds	r5, #8
 8009452:	2d0c      	cmp	r5, #12
 8009454:	bf38      	it	cc
 8009456:	250c      	movcc	r5, #12
 8009458:	2d00      	cmp	r5, #0
 800945a:	4606      	mov	r6, r0
 800945c:	db01      	blt.n	8009462 <_malloc_r+0x1a>
 800945e:	42a9      	cmp	r1, r5
 8009460:	d903      	bls.n	800946a <_malloc_r+0x22>
 8009462:	230c      	movs	r3, #12
 8009464:	6033      	str	r3, [r6, #0]
 8009466:	2000      	movs	r0, #0
 8009468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800946a:	f000 f857 	bl	800951c <__malloc_lock>
 800946e:	4921      	ldr	r1, [pc, #132]	; (80094f4 <_malloc_r+0xac>)
 8009470:	680a      	ldr	r2, [r1, #0]
 8009472:	4614      	mov	r4, r2
 8009474:	b99c      	cbnz	r4, 800949e <_malloc_r+0x56>
 8009476:	4f20      	ldr	r7, [pc, #128]	; (80094f8 <_malloc_r+0xb0>)
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	b923      	cbnz	r3, 8009486 <_malloc_r+0x3e>
 800947c:	4621      	mov	r1, r4
 800947e:	4630      	mov	r0, r6
 8009480:	f000 f83c 	bl	80094fc <_sbrk_r>
 8009484:	6038      	str	r0, [r7, #0]
 8009486:	4629      	mov	r1, r5
 8009488:	4630      	mov	r0, r6
 800948a:	f000 f837 	bl	80094fc <_sbrk_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d123      	bne.n	80094da <_malloc_r+0x92>
 8009492:	230c      	movs	r3, #12
 8009494:	6033      	str	r3, [r6, #0]
 8009496:	4630      	mov	r0, r6
 8009498:	f000 f846 	bl	8009528 <__malloc_unlock>
 800949c:	e7e3      	b.n	8009466 <_malloc_r+0x1e>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	1b5b      	subs	r3, r3, r5
 80094a2:	d417      	bmi.n	80094d4 <_malloc_r+0x8c>
 80094a4:	2b0b      	cmp	r3, #11
 80094a6:	d903      	bls.n	80094b0 <_malloc_r+0x68>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	441c      	add	r4, r3
 80094ac:	6025      	str	r5, [r4, #0]
 80094ae:	e004      	b.n	80094ba <_malloc_r+0x72>
 80094b0:	6863      	ldr	r3, [r4, #4]
 80094b2:	42a2      	cmp	r2, r4
 80094b4:	bf0c      	ite	eq
 80094b6:	600b      	streq	r3, [r1, #0]
 80094b8:	6053      	strne	r3, [r2, #4]
 80094ba:	4630      	mov	r0, r6
 80094bc:	f000 f834 	bl	8009528 <__malloc_unlock>
 80094c0:	f104 000b 	add.w	r0, r4, #11
 80094c4:	1d23      	adds	r3, r4, #4
 80094c6:	f020 0007 	bic.w	r0, r0, #7
 80094ca:	1ac2      	subs	r2, r0, r3
 80094cc:	d0cc      	beq.n	8009468 <_malloc_r+0x20>
 80094ce:	1a1b      	subs	r3, r3, r0
 80094d0:	50a3      	str	r3, [r4, r2]
 80094d2:	e7c9      	b.n	8009468 <_malloc_r+0x20>
 80094d4:	4622      	mov	r2, r4
 80094d6:	6864      	ldr	r4, [r4, #4]
 80094d8:	e7cc      	b.n	8009474 <_malloc_r+0x2c>
 80094da:	1cc4      	adds	r4, r0, #3
 80094dc:	f024 0403 	bic.w	r4, r4, #3
 80094e0:	42a0      	cmp	r0, r4
 80094e2:	d0e3      	beq.n	80094ac <_malloc_r+0x64>
 80094e4:	1a21      	subs	r1, r4, r0
 80094e6:	4630      	mov	r0, r6
 80094e8:	f000 f808 	bl	80094fc <_sbrk_r>
 80094ec:	3001      	adds	r0, #1
 80094ee:	d1dd      	bne.n	80094ac <_malloc_r+0x64>
 80094f0:	e7cf      	b.n	8009492 <_malloc_r+0x4a>
 80094f2:	bf00      	nop
 80094f4:	200000b4 	.word	0x200000b4
 80094f8:	200000b8 	.word	0x200000b8

080094fc <_sbrk_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4d06      	ldr	r5, [pc, #24]	; (8009518 <_sbrk_r+0x1c>)
 8009500:	2300      	movs	r3, #0
 8009502:	4604      	mov	r4, r0
 8009504:	4608      	mov	r0, r1
 8009506:	602b      	str	r3, [r5, #0]
 8009508:	f7f7 fcfe 	bl	8000f08 <_sbrk>
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	d102      	bne.n	8009516 <_sbrk_r+0x1a>
 8009510:	682b      	ldr	r3, [r5, #0]
 8009512:	b103      	cbz	r3, 8009516 <_sbrk_r+0x1a>
 8009514:	6023      	str	r3, [r4, #0]
 8009516:	bd38      	pop	{r3, r4, r5, pc}
 8009518:	20000b5c 	.word	0x20000b5c

0800951c <__malloc_lock>:
 800951c:	4801      	ldr	r0, [pc, #4]	; (8009524 <__malloc_lock+0x8>)
 800951e:	f000 b809 	b.w	8009534 <__retarget_lock_acquire_recursive>
 8009522:	bf00      	nop
 8009524:	20000b64 	.word	0x20000b64

08009528 <__malloc_unlock>:
 8009528:	4801      	ldr	r0, [pc, #4]	; (8009530 <__malloc_unlock+0x8>)
 800952a:	f000 b804 	b.w	8009536 <__retarget_lock_release_recursive>
 800952e:	bf00      	nop
 8009530:	20000b64 	.word	0x20000b64

08009534 <__retarget_lock_acquire_recursive>:
 8009534:	4770      	bx	lr

08009536 <__retarget_lock_release_recursive>:
 8009536:	4770      	bx	lr

08009538 <_init>:
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800953a:	bf00      	nop
 800953c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800953e:	bc08      	pop	{r3}
 8009540:	469e      	mov	lr, r3
 8009542:	4770      	bx	lr

08009544 <_fini>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	bf00      	nop
 8009548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800954a:	bc08      	pop	{r3}
 800954c:	469e      	mov	lr, r3
 800954e:	4770      	bx	lr
