
TP_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b10  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08009c98  08009c98  00019c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cbc  08009cbc  000200ac  2**0
                  CONTENTS
  4 .ARM          00000008  08009cbc  08009cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cc4  08009cc4  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cc4  08009cc4  00019cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009cc8  08009cc8  00019cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08009ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ac  2**0
                  CONTENTS
 10 .bss          00000ba8  200000ac  200000ac  000200ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000c54  20000c54  000200ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002074f  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043fd  00000000  00000000  0004082b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  00044c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001590  00000000  00000000  00046358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263d3  00000000  00000000  000478e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e514  00000000  00000000  0006dcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e04f5  00000000  00000000  0008c1cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016c6c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006428  00000000  00000000  0016c718  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ac 	.word	0x200000ac
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c80 	.word	0x08009c80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b0 	.word	0x200000b0
 80001c4:	08009c80 	.word	0x08009c80

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <HAL_ADC_ConvCpltCallback>:
		2023.090,
		-968.544}; // coefficients a
float valueE_n0, valueE_n1,valueE_n2,input_sig,sig_fil,sig_fil_V,valueS_n0, valueS_n1,valueS_n2;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	//static uint8_t index = 0;
	//adcBuffer[index++] = HAL_ADC_GetValue(hadc);
	//adcBuffer[index++] = dmaBuffer[0] + dmaBuffer[1] + ....;
	uint16_t adcSum = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<DMA_BUFFER_SIZE;i++)
 80004cc:	2300      	movs	r3, #0
 80004ce:	737b      	strb	r3, [r7, #13]
 80004d0:	e009      	b.n	80004e6 <HAL_ADC_ConvCpltCallback+0x26>
		adcSum += dmaBuffer[i];
 80004d2:	7b7b      	ldrb	r3, [r7, #13]
 80004d4:	4a0c      	ldr	r2, [pc, #48]	; (8000508 <HAL_ADC_ConvCpltCallback+0x48>)
 80004d6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80004da:	89fb      	ldrh	r3, [r7, #14]
 80004dc:	4413      	add	r3, r2
 80004de:	81fb      	strh	r3, [r7, #14]
	for(uint8_t i=0; i<DMA_BUFFER_SIZE;i++)
 80004e0:	7b7b      	ldrb	r3, [r7, #13]
 80004e2:	3301      	adds	r3, #1
 80004e4:	737b      	strb	r3, [r7, #13]
 80004e6:	7b7b      	ldrb	r3, [r7, #13]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d9f2      	bls.n	80004d2 <HAL_ADC_ConvCpltCallback+0x12>

	input_sig = adcSum;
 80004ec:	89fb      	ldrh	r3, [r7, #14]
 80004ee:	ee07 3a90 	vmov	s15, r3
 80004f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <HAL_ADC_ConvCpltCallback+0x4c>)
 80004f8:	edc3 7a00 	vstr	s15, [r3]
	//amplitude = (float)HAL_ADC_GetValue(hadc) * 0.00024414f; //[V]  // f => to be sure to be with a float and not double  // =>not precise enough
	//amplitude = (float)HAL_ADC_GetValue(hadc) / 4095.0f; // => convert to float  //=> 4095 is 2^8-1 to obtain Volts from numerical values.

	//for debugging
	//amplitude = 1.0f;
}
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	2000044c 	.word	0x2000044c
 800050c:	200000d8 	.word	0x200000d8

08000510 <filter>:

void filter(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	//on garde en memoire les valeurs en entree
	valueE_n2 = valueE_n1;
 8000514:	4b31      	ldr	r3, [pc, #196]	; (80005dc <filter+0xcc>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a31      	ldr	r2, [pc, #196]	; (80005e0 <filter+0xd0>)
 800051a:	6013      	str	r3, [r2, #0]
	valueE_n1 = valueE_n0;
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <filter+0xd4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a2e      	ldr	r2, [pc, #184]	; (80005dc <filter+0xcc>)
 8000522:	6013      	str	r3, [r2, #0]
	valueE_n0 = input_sig;
 8000524:	4b30      	ldr	r3, [pc, #192]	; (80005e8 <filter+0xd8>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a2e      	ldr	r2, [pc, #184]	; (80005e4 <filter+0xd4>)
 800052a:	6013      	str	r3, [r2, #0]

	//Calcul de sig_fil = signal filtre
	//sig_fil = coeff_b[0]*value_n0 + coeff_b[1]*value_n1 + coeff_b[2]*value_n2; // test FIR
	sig_fil = 1/coeff_a[0] * ( coeff_b[0]*valueE_n0 + coeff_b[1]*valueE_n1 + coeff_b[2]*valueE_n2 + coeff_a[1]*valueS_n1 + coeff_a[2]*valueS_n2); // test IIR
 800052c:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <filter+0xdc>)
 800052e:	edd3 7a00 	vldr	s15, [r3]
 8000532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800053a:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <filter+0xe0>)
 800053c:	edd3 6a00 	vldr	s13, [r3]
 8000540:	4b28      	ldr	r3, [pc, #160]	; (80005e4 <filter+0xd4>)
 8000542:	edd3 7a00 	vldr	s15, [r3]
 8000546:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <filter+0xe0>)
 800054c:	ed93 6a01 	vldr	s12, [r3, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <filter+0xcc>)
 8000552:	edd3 7a00 	vldr	s15, [r3]
 8000556:	ee66 7a27 	vmul.f32	s15, s12, s15
 800055a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <filter+0xe0>)
 8000560:	ed93 6a02 	vldr	s12, [r3, #8]
 8000564:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <filter+0xd0>)
 8000566:	edd3 7a00 	vldr	s15, [r3]
 800056a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800056e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000572:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <filter+0xdc>)
 8000574:	ed93 6a01 	vldr	s12, [r3, #4]
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <filter+0xe4>)
 800057a:	edd3 7a00 	vldr	s15, [r3]
 800057e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000582:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000586:	4b19      	ldr	r3, [pc, #100]	; (80005ec <filter+0xdc>)
 8000588:	ed93 6a02 	vldr	s12, [r3, #8]
 800058c:	4b1a      	ldr	r3, [pc, #104]	; (80005f8 <filter+0xe8>)
 800058e:	edd3 7a00 	vldr	s15, [r3]
 8000592:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800059a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <filter+0xec>)
 80005a0:	edc3 7a00 	vstr	s15, [r3]
	sig_fil_V = sig_fil/32768.0f;//valeur en tension pour debug
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <filter+0xec>)
 80005a6:	ed93 7a00 	vldr	s14, [r3]
 80005aa:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000600 <filter+0xf0>
 80005ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005b2:	4b14      	ldr	r3, [pc, #80]	; (8000604 <filter+0xf4>)
 80005b4:	edc3 7a00 	vstr	s15, [r3]

	//on garde en memoire les valeurs en sortie
	valueS_n2 = valueS_n1;
 80005b8:	4b0e      	ldr	r3, [pc, #56]	; (80005f4 <filter+0xe4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <filter+0xe8>)
 80005be:	6013      	str	r3, [r2, #0]
	valueS_n1 = valueS_n0;
 80005c0:	4b11      	ldr	r3, [pc, #68]	; (8000608 <filter+0xf8>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a0b      	ldr	r2, [pc, #44]	; (80005f4 <filter+0xe4>)
 80005c6:	6013      	str	r3, [r2, #0]
	valueS_n0 = sig_fil;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <filter+0xec>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <filter+0xf8>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	200003d0 	.word	0x200003d0
 80005e0:	200003e8 	.word	0x200003e8
 80005e4:	200002dc 	.word	0x200002dc
 80005e8:	200000d8 	.word	0x200000d8
 80005ec:	2000000c 	.word	0x2000000c
 80005f0:	20000000 	.word	0x20000000
 80005f4:	2000046c 	.word	0x2000046c
 80005f8:	20000560 	.word	0x20000560
 80005fc:	20000338 	.word	0x20000338
 8000600:	47000000 	.word	0x47000000
 8000604:	20000384 	.word	0x20000384
 8000608:	20000334 	.word	0x20000334

0800060c <HAL_TIM_PeriodElapsedCallback>:

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_L, dacvalue); //multiply by 3 to come bqck to the initial amplitude values [0V-3V]
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	if(htim == &htim2)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	4a0e      	ldr	r2, [pc, #56]	; (8000650 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d115      	bne.n	8000648 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		filter();
 800061c:	f7ff ff78 	bl	8000510 <filter>
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_L, sig_fil+SINE_TABLE_HALF_VAL);
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	ee07 3a90 	vmov	s15, r3
 8000628:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800062e:	edd3 7a00 	vldr	s15, [r3]
 8000632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063a:	ee17 3a90 	vmov	r3, s15
 800063e:	2204      	movs	r2, #4
 8000640:	2110      	movs	r1, #16
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000644:	f001 fd4d 	bl	80020e2 <HAL_DAC_SetValue>
		//dds_Function();
		//ddsFunction_AM();
		//ddsFunction_FM();
		//sinus_into_DMA();
	}
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000470 	.word	0x20000470
 8000654:	20000018 	.word	0x20000018
 8000658:	20000338 	.word	0x20000338
 800065c:	200003d4 	.word	0x200003d4

08000660 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000664:	f000 fe3c 	bl	80012e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000668:	f000 f834 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800066c:	f000 fa44 	bl	8000af8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000670:	f000 f916 	bl	80008a0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000674:	f000 f942 	bl	80008fc <MX_I2S3_Init>
  MX_USB_HOST_Init();
 8000678:	f008 fef0 	bl	800945c <MX_USB_HOST_Init>
  MX_DAC_Init();
 800067c:	f000 f8e6 	bl	800084c <MX_DAC_Init>
  MX_TIM3_Init();
 8000680:	f000 f9b8 	bl	80009f4 <MX_TIM3_Init>
  MX_DMA_Init();
 8000684:	f000 fa02 	bl	8000a8c <MX_DMA_Init>
  MX_ADC1_Init();
 8000688:	f000 f88e 	bl	80007a8 <MX_ADC1_Init>
  MX_TIM2_Init();
 800068c:	f000 f966 	bl	800095c <MX_TIM2_Init>


  /* USER CODE BEGIN 2 */
  MX_ADC1_Init();
 8000690:	f000 f88a 	bl	80007a8 <MX_ADC1_Init>
  HAL_ADC_Start_IT(&hadc1);
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <main+0x60>)
 8000696:	f000 fefd 	bl	8001494 <HAL_ADC_Start_IT>
  //HAL_TIM_Base_Start(&htim3);
  //HAL_TIM_Base_Start(&htim2);
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800069a:	2110      	movs	r1, #16
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <main+0x64>)
 800069e:	f001 fcce 	bl	800203e <HAL_DAC_Start>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)dmaBuffer,DMA_BUFFER_SIZE);
 80006a2:	2210      	movs	r2, #16
 80006a4:	4908      	ldr	r1, [pc, #32]	; (80006c8 <main+0x68>)
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <main+0x60>)
 80006a8:	f000 ffd2 	bl	8001650 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim3);
 80006ac:	4807      	ldr	r0, [pc, #28]	; (80006cc <main+0x6c>)
 80006ae:	f005 fbf7 	bl	8005ea0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80006b2:	4807      	ldr	r0, [pc, #28]	; (80006d0 <main+0x70>)
 80006b4:	f005 fbf4 	bl	8005ea0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80006b8:	f008 fef6 	bl	80094a8 <MX_USB_HOST_Process>
 80006bc:	e7fc      	b.n	80006b8 <main+0x58>
 80006be:	bf00      	nop
 80006c0:	20000388 	.word	0x20000388
 80006c4:	200003d4 	.word	0x200003d4
 80006c8:	2000044c 	.word	0x2000044c
 80006cc:	2000033c 	.word	0x2000033c
 80006d0:	20000470 	.word	0x20000470

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	2230      	movs	r2, #48	; 0x30
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f009 f9fc 	bl	8009ae0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
 80006fc:	4b28      	ldr	r3, [pc, #160]	; (80007a0 <SystemClock_Config+0xcc>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	4a27      	ldr	r2, [pc, #156]	; (80007a0 <SystemClock_Config+0xcc>)
 8000702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000706:	6413      	str	r3, [r2, #64]	; 0x40
 8000708:	4b25      	ldr	r3, [pc, #148]	; (80007a0 <SystemClock_Config+0xcc>)
 800070a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <SystemClock_Config+0xd0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemClock_Config+0xd0>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <SystemClock_Config+0xd0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000744:	2308      	movs	r3, #8
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000752:	2307      	movs	r3, #7
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f004 fdb0 	bl	80052c0 <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000766:	f000 fad5 	bl	8000d14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000776:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	2105      	movs	r1, #5
 8000788:	4618      	mov	r0, r3
 800078a:	f005 f811 	bl	80057b0 <HAL_RCC_ClockConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000794:	f000 fabe 	bl	8000d14 <Error_Handler>
  }
}
 8000798:	bf00      	nop
 800079a:	3750      	adds	r7, #80	; 0x50
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40007000 	.word	0x40007000

080007a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007bc:	4a22      	ldr	r2, [pc, #136]	; (8000848 <MX_ADC1_Init+0xa0>)
 80007be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c8:	4b1e      	ldr	r3, [pc, #120]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_ADC1_Init+0x9c>)
 80007fa:	2201      	movs	r2, #1
 80007fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_ADC1_Init+0x9c>)
 8000800:	2201      	movs	r2, #1
 8000802:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000806:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_ADC1_Init+0x9c>)
 8000808:	2201      	movs	r2, #1
 800080a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <MX_ADC1_Init+0x9c>)
 800080e:	f000 fdfd 	bl	800140c <HAL_ADC_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000818:	f000 fa7c 	bl	8000d14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800081c:	2301      	movs	r3, #1
 800081e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000824:	2300      	movs	r3, #0
 8000826:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_ADC1_Init+0x9c>)
 800082e:	f001 f833 	bl	8001898 <HAL_ADC_ConfigChannel>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000838:	f000 fa6c 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000388 	.word	0x20000388
 8000848:	40012000 	.word	0x40012000

0800084c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_DAC_Init+0x4c>)
 800085c:	4a0f      	ldr	r2, [pc, #60]	; (800089c <MX_DAC_Init+0x50>)
 800085e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_DAC_Init+0x4c>)
 8000862:	f001 fbca 	bl	8001ffa <HAL_DAC_Init>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800086c:	f000 fa52 	bl	8000d14 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000870:	2300      	movs	r3, #0
 8000872:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	2210      	movs	r2, #16
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_DAC_Init+0x4c>)
 8000880:	f001 fc54 	bl	800212c <HAL_DAC_ConfigChannel>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800088a:	f000 fa43 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200003d4 	.word	0x200003d4
 800089c:	40007400 	.word	0x40007400

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008a6:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <MX_I2C1_Init+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x58>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_I2C1_Init+0x50>)
 80008de:	f003 ff0b 	bl	80046f8 <HAL_I2C_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e8:	f000 fa14 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200002e0 	.word	0x200002e0
 80008f4:	40005400 	.word	0x40005400
 80008f8:	000186a0 	.word	0x000186a0

080008fc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_I2S3_Init+0x54>)
 8000902:	4a14      	ldr	r2, [pc, #80]	; (8000954 <MX_I2S3_Init+0x58>)
 8000904:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2S3_Init+0x54>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <MX_I2S3_Init+0x54>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <MX_I2S3_Init+0x54>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <MX_I2S3_Init+0x54>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_I2S3_Init+0x54>)
 8000924:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <MX_I2S3_Init+0x5c>)
 8000926:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_I2S3_Init+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_I2S3_Init+0x54>)
 8000930:	2200      	movs	r2, #0
 8000932:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_I2S3_Init+0x54>)
 8000936:	2200      	movs	r2, #0
 8000938:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_I2S3_Init+0x54>)
 800093c:	f004 f820 	bl	8004980 <HAL_I2S_Init>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000946:	f000 f9e5 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000518 	.word	0x20000518
 8000954:	40003c00 	.word	0x40003c00
 8000958:	00017700 	.word	0x00017700

0800095c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000962:	f107 0308 	add.w	r3, r7, #8
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <MX_TIM2_Init+0x94>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000980:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <MX_TIM2_Init+0x94>)
 8000982:	2253      	movs	r2, #83	; 0x53
 8000984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_TIM2_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <MX_TIM2_Init+0x94>)
 800098e:	2209      	movs	r2, #9
 8000990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <MX_TIM2_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <MX_TIM2_Init+0x94>)
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800099e:	4814      	ldr	r0, [pc, #80]	; (80009f0 <MX_TIM2_Init+0x94>)
 80009a0:	f005 fa2e 	bl	8005e00 <HAL_TIM_Base_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 f9b3 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_TIM2_Init+0x94>)
 80009bc:	f005 fbe8 	bl	8006190 <HAL_TIM_ConfigClockSource>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 f9a5 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80009ca:	2320      	movs	r3, #32
 80009cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_TIM2_Init+0x94>)
 80009d8:	f005 fe04 	bl	80065e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80009e2:	f000 f997 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3718      	adds	r7, #24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000470 	.word	0x20000470

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a08:	463b      	mov	r3, r7
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a10:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <MX_TIM3_Init+0x94>)
 8000a14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 103;
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a24:	2267      	movs	r2, #103	; 0x67
 8000a26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a36:	f005 f9e3 	bl	8005e00 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8000a40:	f000 f968 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a52:	f005 fb9d 	bl	8006190 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8000a5c:	f000 f95a 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a60:	2320      	movs	r3, #32
 8000a62:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_TIM3_Init+0x90>)
 8000a6e:	f005 fdb9 	bl	80065e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a78:	f000 f94c 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3718      	adds	r7, #24
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2000033c 	.word	0x2000033c
 8000a88:	40000400 	.word	0x40000400

08000a8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_DMA_Init+0x68>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4a16      	ldr	r2, [pc, #88]	; (8000af4 <MX_DMA_Init+0x68>)
 8000a9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_DMA_Init+0x68>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_DMA_Init+0x68>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <MX_DMA_Init+0x68>)
 8000ab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <MX_DMA_Init+0x68>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	2011      	movs	r0, #17
 8000ad0:	f001 fa5d 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ad4:	2011      	movs	r0, #17
 8000ad6:	f001 fa76 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2100      	movs	r1, #0
 8000ade:	2038      	movs	r0, #56	; 0x38
 8000ae0:	f001 fa55 	bl	8001f8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ae4:	2038      	movs	r0, #56	; 0x38
 8000ae6:	f001 fa6e 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afe:	f107 031c 	add.w	r3, r7, #28
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	4b7a      	ldr	r3, [pc, #488]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a79      	ldr	r2, [pc, #484]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b18:	f043 0310 	orr.w	r3, r3, #16
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b77      	ldr	r3, [pc, #476]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0310 	and.w	r3, r3, #16
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	4b73      	ldr	r3, [pc, #460]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a72      	ldr	r2, [pc, #456]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b34:	f043 0304 	orr.w	r3, r3, #4
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b70      	ldr	r3, [pc, #448]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	4b6c      	ldr	r3, [pc, #432]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a6b      	ldr	r2, [pc, #428]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b69      	ldr	r3, [pc, #420]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	4b65      	ldr	r3, [pc, #404]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a64      	ldr	r2, [pc, #400]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b62      	ldr	r3, [pc, #392]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b5e      	ldr	r3, [pc, #376]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a5d      	ldr	r2, [pc, #372]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b88:	f043 0302 	orr.w	r3, r3, #2
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b5b      	ldr	r3, [pc, #364]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0302 	and.w	r3, r3, #2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	4b57      	ldr	r3, [pc, #348]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a56      	ldr	r2, [pc, #344]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000ba4:	f043 0308 	orr.w	r3, r3, #8
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <MX_GPIO_Init+0x204>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0308 	and.w	r3, r3, #8
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2108      	movs	r1, #8
 8000bba:	4851      	ldr	r0, [pc, #324]	; (8000d00 <MX_GPIO_Init+0x208>)
 8000bbc:	f002 f812 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	484f      	ldr	r0, [pc, #316]	; (8000d04 <MX_GPIO_Init+0x20c>)
 8000bc6:	f002 f80d 	bl	8002be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000bd0:	484d      	ldr	r0, [pc, #308]	; (8000d08 <MX_GPIO_Init+0x210>)
 8000bd2:	f002 f807 	bl	8002be4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000bd6:	2308      	movs	r3, #8
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 031c 	add.w	r3, r7, #28
 8000bea:	4619      	mov	r1, r3
 8000bec:	4844      	ldr	r0, [pc, #272]	; (8000d00 <MX_GPIO_Init+0x208>)
 8000bee:	f001 fe5d 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 031c 	add.w	r3, r7, #28
 8000c06:	4619      	mov	r1, r3
 8000c08:	483e      	ldr	r0, [pc, #248]	; (8000d04 <MX_GPIO_Init+0x20c>)
 8000c0a:	f001 fe4f 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c12:	2302      	movs	r3, #2
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c1e:	2305      	movs	r3, #5
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c22:	f107 031c 	add.w	r3, r7, #28
 8000c26:	4619      	mov	r1, r3
 8000c28:	4836      	ldr	r0, [pc, #216]	; (8000d04 <MX_GPIO_Init+0x20c>)
 8000c2a:	f001 fe3f 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c32:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 031c 	add.w	r3, r7, #28
 8000c40:	4619      	mov	r1, r3
 8000c42:	4832      	ldr	r0, [pc, #200]	; (8000d0c <MX_GPIO_Init+0x214>)
 8000c44:	f001 fe32 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c48:	23c0      	movs	r3, #192	; 0xc0
 8000c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c58:	2305      	movs	r3, #5
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	482a      	ldr	r0, [pc, #168]	; (8000d0c <MX_GPIO_Init+0x214>)
 8000c64:	f001 fe22 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c74:	f107 031c 	add.w	r3, r7, #28
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4825      	ldr	r0, [pc, #148]	; (8000d10 <MX_GPIO_Init+0x218>)
 8000c7c:	f001 fe16 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c92:	2305      	movs	r3, #5
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	481c      	ldr	r0, [pc, #112]	; (8000d10 <MX_GPIO_Init+0x218>)
 8000c9e:	f001 fe05 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ca2:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ca6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_GPIO_Init+0x210>)
 8000cbc:	f001 fdf6 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000cc0:	2320      	movs	r3, #32
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480d      	ldr	r0, [pc, #52]	; (8000d08 <MX_GPIO_Init+0x210>)
 8000cd4:	f001 fdea 	bl	80028ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cdc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 031c 	add.w	r3, r7, #28
 8000cea:	4619      	mov	r1, r3
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_GPIO_Init+0x208>)
 8000cee:	f001 fddd 	bl	80028ac <HAL_GPIO_Init>

}
 8000cf2:	bf00      	nop
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40023800 	.word	0x40023800
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40020800 	.word	0x40020800
 8000d08:	40020c00 	.word	0x40020c00
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <Error_Handler+0x8>
	...

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a0f      	ldr	r2, [pc, #60]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4a:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d50:	6413      	str	r3, [r2, #64]	; 0x40
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5e:	2007      	movs	r0, #7
 8000d60:	f001 f90a 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d64:	bf00      	nop
 8000d66:	3708      	adds	r7, #8
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a2f      	ldr	r2, [pc, #188]	; (8000e4c <HAL_ADC_MspInit+0xdc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d157      	bne.n	8000e42 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da0:	6453      	str	r3, [r2, #68]	; 0x44
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000daa:	613b      	str	r3, [r7, #16]
 8000dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a26      	ldr	r2, [pc, #152]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000db8:	f043 0301 	orr.w	r3, r3, #1
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b24      	ldr	r3, [pc, #144]	; (8000e50 <HAL_ADC_MspInit+0xe0>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0301 	and.w	r3, r3, #1
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	481d      	ldr	r0, [pc, #116]	; (8000e54 <HAL_ADC_MspInit+0xe4>)
 8000dde:	f001 fd65 	bl	80028ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <HAL_ADC_MspInit+0xec>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000dfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e28:	f001 f9d0 	bl	80021cc <HAL_DMA_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e32:	f7ff ff6f 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_ADC_MspInit+0xe8>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012000 	.word	0x40012000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020000 	.word	0x40020000
 8000e58:	200003ec 	.word	0x200003ec
 8000e5c:	40026410 	.word	0x40026410

08000e60 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <HAL_DAC_MspInit+0xdc>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d158      	bne.n	8000f34 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b2e      	ldr	r3, [pc, #184]	; (8000f40 <HAL_DAC_MspInit+0xe0>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	; (8000f40 <HAL_DAC_MspInit+0xe0>)
 8000e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	4b2b      	ldr	r3, [pc, #172]	; (8000f40 <HAL_DAC_MspInit+0xe0>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_DAC_MspInit+0xe0>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_DAC_MspInit+0xe0>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_DAC_MspInit+0xe0>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000eba:	2320      	movs	r3, #32
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	481d      	ldr	r0, [pc, #116]	; (8000f44 <HAL_DAC_MspInit+0xe4>)
 8000ece:	f001 fced 	bl	80028ac <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000ed4:	4a1d      	ldr	r2, [pc, #116]	; (8000f4c <HAL_DAC_MspInit+0xec>)
 8000ed6:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000eda:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000ede:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000ee2:	2240      	movs	r2, #64	; 0x40
 8000ee4:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee6:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000eec:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef2:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000ef6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f02:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000f04:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0a:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8000f0c:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000f18:	480b      	ldr	r0, [pc, #44]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000f1a:	f001 f957 	bl	80021cc <HAL_DMA_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8000f24:	f7ff fef6 	bl	8000d14 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a07      	ldr	r2, [pc, #28]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	4a06      	ldr	r2, [pc, #24]	; (8000f48 <HAL_DAC_MspInit+0xe8>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000f34:	bf00      	nop
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40007400 	.word	0x40007400
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	200004b8 	.word	0x200004b8
 8000f4c:	400260a0 	.word	0x400260a0

08000f50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a19      	ldr	r2, [pc, #100]	; (8000fd4 <HAL_I2C_MspInit+0x84>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d12c      	bne.n	8000fcc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f94:	2312      	movs	r3, #18
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <HAL_I2C_MspInit+0x8c>)
 8000fac:	f001 fc7e 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_I2C_MspInit+0x88>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	3728      	adds	r7, #40	; 0x28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40005400 	.word	0x40005400
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020400 	.word	0x40020400

08000fe0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <HAL_I2S_MspInit+0xf0>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d15a      	bne.n	80010c6 <HAL_I2S_MspInit+0xe6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001014:	23c0      	movs	r3, #192	; 0xc0
 8001016:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4618      	mov	r0, r3
 8001022:	f004 fdad 	bl	8005b80 <HAL_RCCEx_PeriphCLKConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800102c:	f7ff fe72 	bl	8000d14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	4b27      	ldr	r3, [pc, #156]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a26      	ldr	r2, [pc, #152]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 800103a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 8001052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001054:	4a1f      	ldr	r2, [pc, #124]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6313      	str	r3, [r2, #48]	; 0x30
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	4a18      	ldr	r2, [pc, #96]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6313      	str	r3, [r2, #48]	; 0x30
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <HAL_I2S_MspInit+0xf4>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001084:	2310      	movs	r3, #16
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001094:	2306      	movs	r3, #6
 8001096:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	480e      	ldr	r0, [pc, #56]	; (80010d8 <HAL_I2S_MspInit+0xf8>)
 80010a0:	f001 fc04 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80010a4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80010b6:	2306      	movs	r3, #6
 80010b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010be:	4619      	mov	r1, r3
 80010c0:	4806      	ldr	r0, [pc, #24]	; (80010dc <HAL_I2S_MspInit+0xfc>)
 80010c2:	f001 fbf3 	bl	80028ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3738      	adds	r7, #56	; 0x38
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40003c00 	.word	0x40003c00
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40020800 	.word	0x40020800

080010e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010f0:	d116      	bne.n	8001120 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_TIM_Base_MspInit+0x70>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_TIM_Base_MspInit+0x70>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <HAL_TIM_Base_MspInit+0x70>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	201c      	movs	r0, #28
 8001114:	f000 ff3b 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001118:	201c      	movs	r0, #28
 800111a:	f000 ff54 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800111e:	e012      	b.n	8001146 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_TIM_Base_MspInit+0x74>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10d      	bne.n	8001146 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <HAL_TIM_Base_MspInit+0x70>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	4a07      	ldr	r2, [pc, #28]	; (8001150 <HAL_TIM_Base_MspInit+0x70>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6413      	str	r3, [r2, #64]	; 0x40
 800113a:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_TIM_Base_MspInit+0x70>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
}
 8001146:	bf00      	nop
 8001148:	3710      	adds	r7, #16
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	40000400 	.word	0x40000400

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f8ee 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}

080011ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <DMA1_Stream6_IRQHandler+0x10>)
 80011b2:	f001 f911 	bl	80023d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200004b8 	.word	0x200004b8

080011c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <TIM2_IRQHandler+0x10>)
 80011c6:	f004 fedb 	bl	8005f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000470 	.word	0x20000470

080011d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <DMA2_Stream0_IRQHandler+0x10>)
 80011da:	f001 f8fd 	bl	80023d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200003ec 	.word	0x200003ec

080011e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <OTG_FS_IRQHandler+0x10>)
 80011ee:	f001 ff7d 	bl	80030ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000940 	.word	0x20000940

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	; (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	; (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f008 fc1e 	bl	8009a6c <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	; (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20020000 	.word	0x20020000
 800125c:	00000400 	.word	0x00000400
 8001260:	200000c8 	.word	0x200000c8
 8001264:	20000c58 	.word	0x20000c58

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001290:	480d      	ldr	r0, [pc, #52]	; (80012c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001292:	490e      	ldr	r1, [pc, #56]	; (80012cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001294:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a8:	4c0b      	ldr	r4, [pc, #44]	; (80012d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012b6:	f7ff ffd7 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f008 fbdd 	bl	8009a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff f9cf 	bl	8000660 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80012d0:	08009ccc 	.word	0x08009ccc
  ldr r2, =_sbss
 80012d4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80012d8:	20000c54 	.word	0x20000c54

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012e4:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_Init+0x40>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a0d      	ldr	r2, [pc, #52]	; (8001320 <HAL_Init+0x40>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012f0:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_Init+0x40>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_Init+0x40>)
 80012f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <HAL_Init+0x40>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a07      	ldr	r2, [pc, #28]	; (8001320 <HAL_Init+0x40>)
 8001302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001308:	2003      	movs	r0, #3
 800130a:	f000 fe35 	bl	8001f78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800130e:	2000      	movs	r0, #0
 8001310:	f000 f808 	bl	8001324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001314:	f7ff fd04 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023c00 	.word	0x40023c00

08001324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <HAL_InitTick+0x54>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_InitTick+0x58>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4619      	mov	r1, r3
 8001336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133a:	fbb3 f3f1 	udiv	r3, r3, r1
 800133e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fe4d 	bl	8001fe2 <HAL_SYSTICK_Config>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e00e      	b.n	8001370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b0f      	cmp	r3, #15
 8001356:	d80a      	bhi.n	800136e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001358:	2200      	movs	r2, #0
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f000 fe15 	bl	8001f8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4a06      	ldr	r2, [pc, #24]	; (8001380 <HAL_InitTick+0x5c>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000001c 	.word	0x2000001c
 800137c:	20000024 	.word	0x20000024
 8001380:	20000020 	.word	0x20000020

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	; (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000024 	.word	0x20000024
 80013a8:	20000564 	.word	0x20000564

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000564 	.word	0x20000564

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000024 	.word	0x20000024

0800140c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e033      	b.n	800148a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d109      	bne.n	800143e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fca0 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	d118      	bne.n	800147c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001452:	f023 0302 	bic.w	r3, r3, #2
 8001456:	f043 0202 	orr.w	r2, r3, #2
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fb3c 	bl	8001adc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f023 0303 	bic.w	r3, r3, #3
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	641a      	str	r2, [r3, #64]	; 0x40
 800147a:	e001      	b.n	8001480 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
	...

08001494 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADC_Start_IT+0x1a>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e0bd      	b.n	800162a <HAL_ADC_Start_IT+0x196>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0301 	and.w	r3, r3, #1
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d018      	beq.n	80014f6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689a      	ldr	r2, [r3, #8]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014d4:	4b58      	ldr	r3, [pc, #352]	; (8001638 <HAL_ADC_Start_IT+0x1a4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a58      	ldr	r2, [pc, #352]	; (800163c <HAL_ADC_Start_IT+0x1a8>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	0c9a      	lsrs	r2, r3, #18
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014e8:	e002      	b.n	80014f0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	3b01      	subs	r3, #1
 80014ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f9      	bne.n	80014ea <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	f040 8085 	bne.w	8001610 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800150e:	f023 0301 	bic.w	r3, r3, #1
 8001512:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001524:	2b00      	cmp	r3, #0
 8001526:	d007      	beq.n	8001538 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001530:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001544:	d106      	bne.n	8001554 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154a:	f023 0206 	bic.w	r2, r3, #6
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	645a      	str	r2, [r3, #68]	; 0x44
 8001552:	e002      	b.n	800155a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2200      	movs	r2, #0
 8001558:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001562:	4b37      	ldr	r3, [pc, #220]	; (8001640 <HAL_ADC_Start_IT+0x1ac>)
 8001564:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800156e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6812      	ldr	r2, [r2, #0]
 800157a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800157e:	f043 0320 	orr.w	r3, r3, #32
 8001582:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 031f 	and.w	r3, r3, #31
 800158c:	2b00      	cmp	r3, #0
 800158e:	d12a      	bne.n	80015e6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a2b      	ldr	r2, [pc, #172]	; (8001644 <HAL_ADC_Start_IT+0x1b0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d015      	beq.n	80015c6 <HAL_ADC_Start_IT+0x132>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a2a      	ldr	r2, [pc, #168]	; (8001648 <HAL_ADC_Start_IT+0x1b4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d105      	bne.n	80015b0 <HAL_ADC_Start_IT+0x11c>
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <HAL_ADC_Start_IT+0x1ac>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00a      	beq.n	80015c6 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a25      	ldr	r2, [pc, #148]	; (800164c <HAL_ADC_Start_IT+0x1b8>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d136      	bne.n	8001628 <HAL_ADC_Start_IT+0x194>
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_ADC_Start_IT+0x1ac>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d130      	bne.n	8001628 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d129      	bne.n	8001628 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	e020      	b.n	8001628 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a16      	ldr	r2, [pc, #88]	; (8001644 <HAL_ADC_Start_IT+0x1b0>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d11b      	bne.n	8001628 <HAL_ADC_Start_IT+0x194>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d114      	bne.n	8001628 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	e00b      	b.n	8001628 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001614:	f043 0210 	orr.w	r2, r3, #16
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	2000001c 	.word	0x2000001c
 800163c:	431bde83 	.word	0x431bde83
 8001640:	40012300 	.word	0x40012300
 8001644:	40012000 	.word	0x40012000
 8001648:	40012100 	.word	0x40012100
 800164c:	40012200 	.word	0x40012200

08001650 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_ADC_Start_DMA+0x1e>
 800166a:	2302      	movs	r3, #2
 800166c:	e0e9      	b.n	8001842 <HAL_ADC_Start_DMA+0x1f2>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	2b01      	cmp	r3, #1
 8001682:	d018      	beq.n	80016b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001694:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_ADC_Start_DMA+0x1fc>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a6d      	ldr	r2, [pc, #436]	; (8001850 <HAL_ADC_Start_DMA+0x200>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0c9a      	lsrs	r2, r3, #18
 80016a0:	4613      	mov	r3, r2
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	4413      	add	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016a8:	e002      	b.n	80016b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f9      	bne.n	80016aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c4:	d107      	bne.n	80016d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	f040 80a1 	bne.w	8001828 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016ee:	f023 0301 	bic.w	r3, r3, #1
 80016f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d007      	beq.n	8001718 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001710:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001724:	d106      	bne.n	8001734 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f023 0206 	bic.w	r2, r3, #6
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
 8001732:	e002      	b.n	800173a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <HAL_ADC_Start_DMA+0x204>)
 8001744:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	4a43      	ldr	r2, [pc, #268]	; (8001858 <HAL_ADC_Start_DMA+0x208>)
 800174c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001752:	4a42      	ldr	r2, [pc, #264]	; (800185c <HAL_ADC_Start_DMA+0x20c>)
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175a:	4a41      	ldr	r2, [pc, #260]	; (8001860 <HAL_ADC_Start_DMA+0x210>)
 800175c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001766:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	685a      	ldr	r2, [r3, #4]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001776:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001786:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	334c      	adds	r3, #76	; 0x4c
 8001792:	4619      	mov	r1, r3
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f000 fdc6 	bl	8002328 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d12a      	bne.n	80017fe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <HAL_ADC_Start_DMA+0x214>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d015      	beq.n	80017de <HAL_ADC_Start_DMA+0x18e>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <HAL_ADC_Start_DMA+0x218>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d105      	bne.n	80017c8 <HAL_ADC_Start_DMA+0x178>
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_ADC_Start_DMA+0x204>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 031f 	and.w	r3, r3, #31
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00a      	beq.n	80017de <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a27      	ldr	r2, [pc, #156]	; (800186c <HAL_ADC_Start_DMA+0x21c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d136      	bne.n	8001840 <HAL_ADC_Start_DMA+0x1f0>
 80017d2:	4b20      	ldr	r3, [pc, #128]	; (8001854 <HAL_ADC_Start_DMA+0x204>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 0310 	and.w	r3, r3, #16
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d130      	bne.n	8001840 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d129      	bne.n	8001840 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	e020      	b.n	8001840 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a18      	ldr	r2, [pc, #96]	; (8001864 <HAL_ADC_Start_DMA+0x214>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d11b      	bne.n	8001840 <HAL_ADC_Start_DMA+0x1f0>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d114      	bne.n	8001840 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689a      	ldr	r2, [r3, #8]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	e00b      	b.n	8001840 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f043 0210 	orr.w	r2, r3, #16
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	f043 0201 	orr.w	r2, r3, #1
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	2000001c 	.word	0x2000001c
 8001850:	431bde83 	.word	0x431bde83
 8001854:	40012300 	.word	0x40012300
 8001858:	08001cd5 	.word	0x08001cd5
 800185c:	08001d8f 	.word	0x08001d8f
 8001860:	08001dab 	.word	0x08001dab
 8001864:	40012000 	.word	0x40012000
 8001868:	40012100 	.word	0x40012100
 800186c:	40012200 	.word	0x40012200

08001870 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1c>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e105      	b.n	8001ac0 <HAL_ADC_ConfigChannel+0x228>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b09      	cmp	r3, #9
 80018c2:	d925      	bls.n	8001910 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	4613      	mov	r3, r2
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	4413      	add	r3, r2
 80018d8:	3b1e      	subs	r3, #30
 80018da:	2207      	movs	r2, #7
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43da      	mvns	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	400a      	ands	r2, r1
 80018e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68d9      	ldr	r1, [r3, #12]
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	4603      	mov	r3, r0
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4403      	add	r3, r0
 8001902:	3b1e      	subs	r3, #30
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	e022      	b.n	8001956 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6919      	ldr	r1, [r3, #16]
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	b29b      	uxth	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	2207      	movs	r2, #7
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43da      	mvns	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	400a      	ands	r2, r1
 8001932:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6919      	ldr	r1, [r3, #16]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	4603      	mov	r3, r0
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4403      	add	r3, r0
 800194c:	409a      	lsls	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	430a      	orrs	r2, r1
 8001954:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b06      	cmp	r3, #6
 800195c:	d824      	bhi.n	80019a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	3b05      	subs	r3, #5
 8001970:	221f      	movs	r2, #31
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	400a      	ands	r2, r1
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	b29b      	uxth	r3, r3
 800198c:	4618      	mov	r0, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	3b05      	subs	r3, #5
 800199a:	fa00 f203 	lsl.w	r2, r0, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	635a      	str	r2, [r3, #52]	; 0x34
 80019a6:	e04c      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b0c      	cmp	r3, #12
 80019ae:	d824      	bhi.n	80019fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b23      	subs	r3, #35	; 0x23
 80019c2:	221f      	movs	r2, #31
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43da      	mvns	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	400a      	ands	r2, r1
 80019d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b23      	subs	r3, #35	; 0x23
 80019ec:	fa00 f203 	lsl.w	r2, r0, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	631a      	str	r2, [r3, #48]	; 0x30
 80019f8:	e023      	b.n	8001a42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	3b41      	subs	r3, #65	; 0x41
 8001a0c:	221f      	movs	r2, #31
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	400a      	ands	r2, r1
 8001a1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	4618      	mov	r0, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	3b41      	subs	r3, #65	; 0x41
 8001a36:	fa00 f203 	lsl.w	r2, r0, r3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a42:	4b22      	ldr	r3, [pc, #136]	; (8001acc <HAL_ADC_ConfigChannel+0x234>)
 8001a44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_ADC_ConfigChannel+0x238>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1cc>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b12      	cmp	r3, #18
 8001a56:	d105      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a19      	ldr	r2, [pc, #100]	; (8001ad0 <HAL_ADC_ConfigChannel+0x238>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d123      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x21e>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b10      	cmp	r3, #16
 8001a74:	d003      	beq.n	8001a7e <HAL_ADC_ConfigChannel+0x1e6>
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b11      	cmp	r3, #17
 8001a7c:	d11b      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d111      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_ADC_ConfigChannel+0x23c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <HAL_ADC_ConfigChannel+0x240>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	0c9a      	lsrs	r2, r3, #18
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001aa8:	e002      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f9      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40012300 	.word	0x40012300
 8001ad0:	40012000 	.word	0x40012000
 8001ad4:	2000001c 	.word	0x2000001c
 8001ad8:	431bde83 	.word	0x431bde83

08001adc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ae4:	4b79      	ldr	r3, [pc, #484]	; (8001ccc <ADC_Init+0x1f0>)
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	021a      	lsls	r2, r3, #8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685a      	ldr	r2, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6859      	ldr	r1, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	6899      	ldr	r1, [r3, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68da      	ldr	r2, [r3, #12]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6e:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <ADC_Init+0x1f4>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6899      	ldr	r1, [r3, #8]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689a      	ldr	r2, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	6899      	ldr	r1, [r3, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e00f      	b.n	8001bda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bd8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0202 	bic.w	r2, r2, #2
 8001be8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6899      	ldr	r1, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	7e1b      	ldrb	r3, [r3, #24]
 8001bf4:	005a      	lsls	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d01b      	beq.n	8001c40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001c26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6859      	ldr	r1, [r3, #4]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	3b01      	subs	r3, #1
 8001c34:	035a      	lsls	r2, r3, #13
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	e007      	b.n	8001c50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	051a      	lsls	r2, r3, #20
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	430a      	orrs	r2, r1
 8001c74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6899      	ldr	r1, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c92:	025a      	lsls	r2, r3, #9
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	689a      	ldr	r2, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001caa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	6899      	ldr	r1, [r3, #8]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	029a      	lsls	r2, r3, #10
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	609a      	str	r2, [r3, #8]
}
 8001cc0:	bf00      	nop
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40012300 	.word	0x40012300
 8001cd0:	0f000001 	.word	0x0f000001

08001cd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d13c      	bne.n	8001d68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d12b      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d127      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d119      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0220 	bic.w	r2, r2, #32
 8001d3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d105      	bne.n	8001d60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	f043 0201 	orr.w	r2, r3, #1
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7fe fbad 	bl	80004c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d66:	e00e      	b.n	8001d86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	f003 0310 	and.w	r3, r3, #16
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d003      	beq.n	8001d7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff fd85 	bl	8001884 <HAL_ADC_ErrorCallback>
}
 8001d7a:	e004      	b.n	8001d86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fd67 	bl	8001870 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b084      	sub	sp, #16
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2240      	movs	r2, #64	; 0x40
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f043 0204 	orr.w	r2, r3, #4
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f7ff fd5a 	bl	8001884 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x44>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e24:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <__NVIC_GetPriorityGrouping+0x18>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	0a1b      	lsrs	r3, r3, #8
 8001e2a:	f003 0307 	and.w	r3, r3, #7
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	e000ed00 	.word	0xe000ed00

08001e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	db0b      	blt.n	8001e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f003 021f 	and.w	r2, r3, #31
 8001e54:	4907      	ldr	r1, [pc, #28]	; (8001e74 <__NVIC_EnableIRQ+0x38>)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	095b      	lsrs	r3, r3, #5
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	db0a      	blt.n	8001ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	490c      	ldr	r1, [pc, #48]	; (8001ec4 <__NVIC_SetPriority+0x4c>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	0112      	lsls	r2, r2, #4
 8001e98:	b2d2      	uxtb	r2, r2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea0:	e00a      	b.n	8001eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	4908      	ldr	r1, [pc, #32]	; (8001ec8 <__NVIC_SetPriority+0x50>)
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	3b04      	subs	r3, #4
 8001eb0:	0112      	lsls	r2, r2, #4
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	761a      	strb	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	e000e100 	.word	0xe000e100
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b089      	sub	sp, #36	; 0x24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	f1c3 0307 	rsb	r3, r3, #7
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	bf28      	it	cs
 8001eea:	2304      	movcs	r3, #4
 8001eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	2b06      	cmp	r3, #6
 8001ef4:	d902      	bls.n	8001efc <NVIC_EncodePriority+0x30>
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3b03      	subs	r3, #3
 8001efa:	e000      	b.n	8001efe <NVIC_EncodePriority+0x32>
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	f04f 32ff 	mov.w	r2, #4294967295
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	401a      	ands	r2, r3
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f24:	4313      	orrs	r3, r2
         );
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f44:	d301      	bcc.n	8001f4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f46:	2301      	movs	r3, #1
 8001f48:	e00f      	b.n	8001f6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <SysTick_Config+0x40>)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f52:	210f      	movs	r1, #15
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f7ff ff8e 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <SysTick_Config+0x40>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <SysTick_Config+0x40>)
 8001f64:	2207      	movs	r2, #7
 8001f66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ff29 	bl	8001dd8 <__NVIC_SetPriorityGrouping>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b086      	sub	sp, #24
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	60b9      	str	r1, [r7, #8]
 8001f98:	607a      	str	r2, [r7, #4]
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff3e 	bl	8001e20 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff8e 	bl	8001ecc <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5d 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff31 	bl	8001e3c <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa2 	bl	8001f34 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d101      	bne.n	800200c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e014      	b.n	8002036 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	791b      	ldrb	r3, [r3, #4]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe ff1f 	bl	8000e60 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2200      	movs	r2, #0
 800202c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002034:	2300      	movs	r3, #0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
 8002046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	795b      	ldrb	r3, [r3, #5]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_DAC_Start+0x16>
 8002050:	2302      	movs	r3, #2
 8002052:	e040      	b.n	80020d6 <HAL_DAC_Start+0x98>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2202      	movs	r2, #2
 800205e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6819      	ldr	r1, [r3, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2201      	movs	r2, #1
 800206e:	409a      	lsls	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10f      	bne.n	800209e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002088:	2b3c      	cmp	r3, #60	; 0x3c
 800208a:	d11d      	bne.n	80020c8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	e014      	b.n	80020c8 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	213c      	movs	r1, #60	; 0x3c
 80020b0:	fa01 f303 	lsl.w	r3, r1, r3
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d107      	bne.n	80020c8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0202 	orr.w	r2, r2, #2
 80020c6:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b087      	sub	sp, #28
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
 80020ee:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4413      	add	r3, r2
 8002106:	3308      	adds	r3, #8
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e004      	b.n	8002116 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800210c:	697a      	ldr	r2, [r7, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	3314      	adds	r3, #20
 8002114:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	461a      	mov	r2, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	795b      	ldrb	r3, [r3, #5]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <HAL_DAC_ConfigChannel+0x18>
 8002140:	2302      	movs	r3, #2
 8002142:	e03c      	b.n	80021be <HAL_DAC_ConfigChannel+0x92>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2201      	movs	r2, #1
 8002148:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2202      	movs	r2, #2
 800214e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	4013      	ands	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4313      	orrs	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6819      	ldr	r1, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	22c0      	movs	r2, #192	; 0xc0
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43da      	mvns	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	400a      	ands	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2201      	movs	r2, #1
 80021b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	371c      	adds	r7, #28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021d8:	f7ff f8e8 	bl	80013ac <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e099      	b.n	800231c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f022 0201 	bic.w	r2, r2, #1
 8002206:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002208:	e00f      	b.n	800222a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220a:	f7ff f8cf 	bl	80013ac <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b05      	cmp	r3, #5
 8002216:	d908      	bls.n	800222a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2203      	movs	r2, #3
 8002222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e078      	b.n	800231c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e8      	bne.n	800220a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	4b38      	ldr	r3, [pc, #224]	; (8002324 <HAL_DMA_Init+0x158>)
 8002244:	4013      	ands	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002256:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	691b      	ldr	r3, [r3, #16]
 800225c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002262:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800226e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	2b04      	cmp	r3, #4
 8002282:	d107      	bne.n	8002294 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	4313      	orrs	r3, r2
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f023 0307 	bic.w	r3, r3, #7
 80022aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d117      	bne.n	80022ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00e      	beq.n	80022ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fa6f 	bl	80027b4 <DMA_CheckFifoParam>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d008      	beq.n	80022ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2240      	movs	r2, #64	; 0x40
 80022e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022ea:	2301      	movs	r3, #1
 80022ec:	e016      	b.n	800231c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 fa26 	bl	8002748 <DMA_CalcBaseAndBitshift>
 80022fc:	4603      	mov	r3, r0
 80022fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	223f      	movs	r2, #63	; 0x3f
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2201      	movs	r2, #1
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	f010803f 	.word	0xf010803f

08002328 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_DMA_Start_IT+0x26>
 800234a:	2302      	movs	r3, #2
 800234c:	e040      	b.n	80023d0 <HAL_DMA_Start_IT+0xa8>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	d12f      	bne.n	80023c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2202      	movs	r2, #2
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2200      	movs	r2, #0
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f9b8 	bl	80026ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	223f      	movs	r2, #63	; 0x3f
 8002382:	409a      	lsls	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0216 	orr.w	r2, r2, #22
 8002396:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d007      	beq.n	80023b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0208 	orr.w	r2, r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0201 	orr.w	r2, r2, #1
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	e005      	b.n	80023ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023ca:	2302      	movs	r3, #2
 80023cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023e4:	4b92      	ldr	r3, [pc, #584]	; (8002630 <HAL_DMA_IRQHandler+0x258>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a92      	ldr	r2, [pc, #584]	; (8002634 <HAL_DMA_IRQHandler+0x25c>)
 80023ea:	fba2 2303 	umull	r2, r3, r2, r3
 80023ee:	0a9b      	lsrs	r3, r3, #10
 80023f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002402:	2208      	movs	r2, #8
 8002404:	409a      	lsls	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4013      	ands	r3, r2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d01a      	beq.n	8002444 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d013      	beq.n	8002444 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0204 	bic.w	r2, r2, #4
 800242a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002430:	2208      	movs	r2, #8
 8002432:	409a      	lsls	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f043 0201 	orr.w	r2, r3, #1
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	2201      	movs	r2, #1
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4013      	ands	r3, r2
 8002450:	2b00      	cmp	r3, #0
 8002452:	d012      	beq.n	800247a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695b      	ldr	r3, [r3, #20]
 800245a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00b      	beq.n	800247a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002466:	2201      	movs	r2, #1
 8002468:	409a      	lsls	r2, r3
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f043 0202 	orr.w	r2, r3, #2
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	2204      	movs	r2, #4
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4013      	ands	r3, r2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d012      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00b      	beq.n	80024b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800249c:	2204      	movs	r2, #4
 800249e:	409a      	lsls	r2, r3
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f043 0204 	orr.w	r2, r3, #4
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	2210      	movs	r2, #16
 80024b6:	409a      	lsls	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d043      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d03c      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2210      	movs	r2, #16
 80024d4:	409a      	lsls	r2, r3
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d018      	beq.n	800251a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d108      	bne.n	8002508 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d024      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	4798      	blx	r3
 8002506:	e01f      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250c:	2b00      	cmp	r3, #0
 800250e:	d01b      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	4798      	blx	r3
 8002518:	e016      	b.n	8002548 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002524:	2b00      	cmp	r3, #0
 8002526:	d107      	bne.n	8002538 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0208 	bic.w	r2, r2, #8
 8002536:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	2220      	movs	r2, #32
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 808e 	beq.w	8002676 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8086 	beq.w	8002676 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2220      	movs	r2, #32
 8002570:	409a      	lsls	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b05      	cmp	r3, #5
 8002580:	d136      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0216 	bic.w	r2, r2, #22
 8002590:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	695a      	ldr	r2, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d103      	bne.n	80025b2 <HAL_DMA_IRQHandler+0x1da>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0208 	bic.w	r2, r2, #8
 80025c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c6:	223f      	movs	r2, #63	; 0x3f
 80025c8:	409a      	lsls	r2, r3
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d07d      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	4798      	blx	r3
        }
        return;
 80025ee:	e078      	b.n	80026e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d01c      	beq.n	8002638 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d108      	bne.n	800261e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	2b00      	cmp	r3, #0
 8002612:	d030      	beq.n	8002676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e02b      	b.n	8002676 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	2b00      	cmp	r3, #0
 8002624:	d027      	beq.n	8002676 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	4798      	blx	r3
 800262e:	e022      	b.n	8002676 <HAL_DMA_IRQHandler+0x29e>
 8002630:	2000001c 	.word	0x2000001c
 8002634:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0210 	bic.w	r2, r2, #16
 8002654:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267a:	2b00      	cmp	r3, #0
 800267c:	d032      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d022      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2205      	movs	r2, #5
 800268e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	3301      	adds	r3, #1
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d307      	bcc.n	80026be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f2      	bne.n	80026a2 <HAL_DMA_IRQHandler+0x2ca>
 80026bc:	e000      	b.n	80026c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026be:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d005      	beq.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e000      	b.n	80026e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026e2:	bf00      	nop
    }
  }
}
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop

080026ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002708:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d108      	bne.n	800272c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800272a:	e007      	b.n	800273c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	3b10      	subs	r3, #16
 8002758:	4a14      	ldr	r2, [pc, #80]	; (80027ac <DMA_CalcBaseAndBitshift+0x64>)
 800275a:	fba2 2303 	umull	r2, r3, r2, r3
 800275e:	091b      	lsrs	r3, r3, #4
 8002760:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002762:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <DMA_CalcBaseAndBitshift+0x68>)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	461a      	mov	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d909      	bls.n	800278a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800277e:	f023 0303 	bic.w	r3, r3, #3
 8002782:	1d1a      	adds	r2, r3, #4
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	659a      	str	r2, [r3, #88]	; 0x58
 8002788:	e007      	b.n	800279a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3714      	adds	r7, #20
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	aaaaaaab 	.word	0xaaaaaaab
 80027b0:	08009cb4 	.word	0x08009cb4

080027b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11f      	bne.n	800280e <DMA_CheckFifoParam+0x5a>
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d856      	bhi.n	8002882 <DMA_CheckFifoParam+0xce>
 80027d4:	a201      	add	r2, pc, #4	; (adr r2, 80027dc <DMA_CheckFifoParam+0x28>)
 80027d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027da:	bf00      	nop
 80027dc:	080027ed 	.word	0x080027ed
 80027e0:	080027ff 	.word	0x080027ff
 80027e4:	080027ed 	.word	0x080027ed
 80027e8:	08002883 	.word	0x08002883
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d046      	beq.n	8002886 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fc:	e043      	b.n	8002886 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002806:	d140      	bne.n	800288a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800280c:	e03d      	b.n	800288a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002816:	d121      	bne.n	800285c <DMA_CheckFifoParam+0xa8>
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	2b03      	cmp	r3, #3
 800281c:	d837      	bhi.n	800288e <DMA_CheckFifoParam+0xda>
 800281e:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <DMA_CheckFifoParam+0x70>)
 8002820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002824:	08002835 	.word	0x08002835
 8002828:	0800283b 	.word	0x0800283b
 800282c:	08002835 	.word	0x08002835
 8002830:	0800284d 	.word	0x0800284d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	73fb      	strb	r3, [r7, #15]
      break;
 8002838:	e030      	b.n	800289c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d025      	beq.n	8002892 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284a:	e022      	b.n	8002892 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002854:	d11f      	bne.n	8002896 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800285a:	e01c      	b.n	8002896 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d903      	bls.n	800286a <DMA_CheckFifoParam+0xb6>
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d003      	beq.n	8002870 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002868:	e018      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	73fb      	strb	r3, [r7, #15]
      break;
 800286e:	e015      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00e      	beq.n	800289a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	73fb      	strb	r3, [r7, #15]
      break;
 8002880:	e00b      	b.n	800289a <DMA_CheckFifoParam+0xe6>
      break;
 8002882:	bf00      	nop
 8002884:	e00a      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 8002886:	bf00      	nop
 8002888:	e008      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 800288a:	bf00      	nop
 800288c:	e006      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 800288e:	bf00      	nop
 8002890:	e004      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
 8002894:	e002      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;   
 8002896:	bf00      	nop
 8002898:	e000      	b.n	800289c <DMA_CheckFifoParam+0xe8>
      break;
 800289a:	bf00      	nop
    }
  } 
  
  return status; 
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e16b      	b.n	8002ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 815a 	bne.w	8002b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d005      	beq.n	80028fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d130      	bne.n	8002960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0201 	and.w	r2, r3, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b03      	cmp	r3, #3
 800296a:	d017      	beq.n	800299c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d123      	bne.n	80029f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80b4 	beq.w	8002b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_GPIO_Init+0x314>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <HAL_GPIO_Init+0x226>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_GPIO_Init+0x318>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x222>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a50      	ldr	r2, [pc, #320]	; (8002bc8 <HAL_GPIO_Init+0x31c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x21e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_GPIO_Init+0x320>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4e      	ldr	r2, [pc, #312]	; (8002bd0 <HAL_GPIO_Init+0x324>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x216>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_GPIO_Init+0x328>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x212>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4c      	ldr	r2, [pc, #304]	; (8002bd8 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x20e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x20a>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00e      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e00c      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e00a      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e008      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f002 0203 	and.w	r2, r2, #3
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	4093      	lsls	r3, r2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae4:	4935      	ldr	r1, [pc, #212]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b16:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	f67f ae90 	bls.w	80028c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40021400 	.word	0x40021400
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40021c00 	.word	0x40021c00
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	460b      	mov	r3, r1
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf4:	787b      	ldrb	r3, [r7, #1]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c00:	e003      	b.n	8002c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c02:	887b      	ldrh	r3, [r7, #2]
 8002c04:	041a      	lsls	r2, r3, #16
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	619a      	str	r2, [r3, #24]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002c16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c18:	b08f      	sub	sp, #60	; 0x3c
 8002c1a:	af0a      	add	r7, sp, #40	; 0x28
 8002c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e054      	b.n	8002cd2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d106      	bne.n	8002c48 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f006 fc68 	bl	8009518 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f003 fdbe 	bl	80067e8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	603b      	str	r3, [r7, #0]
 8002c72:	687e      	ldr	r6, [r7, #4]
 8002c74:	466d      	mov	r5, sp
 8002c76:	f106 0410 	add.w	r4, r6, #16
 8002c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c86:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c8a:	1d33      	adds	r3, r6, #4
 8002c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	f003 fd38 	bl	8006704 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 fdb5 	bl	800680a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	687e      	ldr	r6, [r7, #4]
 8002ca8:	466d      	mov	r5, sp
 8002caa:	f106 0410 	add.w	r4, r6, #16
 8002cae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cba:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cbe:	1d33      	adds	r3, r6, #4
 8002cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cc2:	6838      	ldr	r0, [r7, #0]
 8002cc4:	f003 ff1c 	bl	8006b00 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cda <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002cda:	b590      	push	{r4, r7, lr}
 8002cdc:	b089      	sub	sp, #36	; 0x24
 8002cde:	af04      	add	r7, sp, #16
 8002ce0:	6078      	str	r0, [r7, #4]
 8002ce2:	4608      	mov	r0, r1
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	70fb      	strb	r3, [r7, #3]
 8002cec:	460b      	mov	r3, r1
 8002cee:	70bb      	strb	r3, [r7, #2]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_HCD_HC_Init+0x28>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e076      	b.n	8002df0 <HAL_HCD_HC_Init+0x116>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002d0a:	78fb      	ldrb	r3, [r7, #3]
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	333d      	adds	r3, #61	; 0x3d
 8002d18:	2200      	movs	r2, #0
 8002d1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	212c      	movs	r1, #44	; 0x2c
 8002d22:	fb01 f303 	mul.w	r3, r1, r3
 8002d26:	4413      	add	r3, r2
 8002d28:	3338      	adds	r3, #56	; 0x38
 8002d2a:	787a      	ldrb	r2, [r7, #1]
 8002d2c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002d2e:	78fb      	ldrb	r3, [r7, #3]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	212c      	movs	r1, #44	; 0x2c
 8002d34:	fb01 f303 	mul.w	r3, r1, r3
 8002d38:	4413      	add	r3, r2
 8002d3a:	3340      	adds	r3, #64	; 0x40
 8002d3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002d3e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3339      	adds	r3, #57	; 0x39
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	212c      	movs	r1, #44	; 0x2c
 8002d58:	fb01 f303 	mul.w	r3, r1, r3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	333f      	adds	r3, #63	; 0x3f
 8002d60:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002d64:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	78ba      	ldrb	r2, [r7, #2]
 8002d6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d6e:	b2d0      	uxtb	r0, r2
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	212c      	movs	r1, #44	; 0x2c
 8002d74:	fb01 f303 	mul.w	r3, r1, r3
 8002d78:	4413      	add	r3, r2
 8002d7a:	333a      	adds	r3, #58	; 0x3a
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002d80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	da09      	bge.n	8002d9c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	333b      	adds	r3, #59	; 0x3b
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e008      	b.n	8002dae <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	212c      	movs	r1, #44	; 0x2c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	333b      	adds	r3, #59	; 0x3b
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	333c      	adds	r3, #60	; 0x3c
 8002dbc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002dc0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	787c      	ldrb	r4, [r7, #1]
 8002dc8:	78ba      	ldrb	r2, [r7, #2]
 8002dca:	78f9      	ldrb	r1, [r7, #3]
 8002dcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	4623      	mov	r3, r4
 8002dde:	f004 f809 	bl	8006df4 <USB_HC_Init>
 8002de2:	4603      	mov	r3, r0
 8002de4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}

08002df8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_HCD_HC_Halt+0x1e>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e00f      	b.n	8002e36 <HAL_HCD_HC_Halt+0x3e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	4611      	mov	r1, r2
 8002e26:	4618      	mov	r0, r3
 8002e28:	f004 fa45 	bl	80072b6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	4608      	mov	r0, r1
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	70fb      	strb	r3, [r7, #3]
 8002e52:	460b      	mov	r3, r1
 8002e54:	70bb      	strb	r3, [r7, #2]
 8002e56:	4613      	mov	r3, r2
 8002e58:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	212c      	movs	r1, #44	; 0x2c
 8002e60:	fb01 f303 	mul.w	r3, r1, r3
 8002e64:	4413      	add	r3, r2
 8002e66:	333b      	adds	r3, #59	; 0x3b
 8002e68:	78ba      	ldrb	r2, [r7, #2]
 8002e6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	333f      	adds	r3, #63	; 0x3f
 8002e7a:	787a      	ldrb	r2, [r7, #1]
 8002e7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002e7e:	7c3b      	ldrb	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d112      	bne.n	8002eaa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3342      	adds	r3, #66	; 0x42
 8002e92:	2203      	movs	r2, #3
 8002e94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002e96:	78fb      	ldrb	r3, [r7, #3]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	333d      	adds	r3, #61	; 0x3d
 8002ea4:	7f3a      	ldrb	r2, [r7, #28]
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e008      	b.n	8002ebc <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	212c      	movs	r1, #44	; 0x2c
 8002eb0:	fb01 f303 	mul.w	r3, r1, r3
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3342      	adds	r3, #66	; 0x42
 8002eb8:	2202      	movs	r2, #2
 8002eba:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	f200 80c6 	bhi.w	8003050 <HAL_HCD_HC_SubmitRequest+0x210>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	0800303d 	.word	0x0800303d
 8002ed4:	08002f41 	.word	0x08002f41
 8002ed8:	08002fbf 	.word	0x08002fbf
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002edc:	7c3b      	ldrb	r3, [r7, #16]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 80b8 	bne.w	8003054 <HAL_HCD_HC_SubmitRequest+0x214>
 8002ee4:	78bb      	ldrb	r3, [r7, #2]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	f040 80b4 	bne.w	8003054 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002eec:	8b3b      	ldrh	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d108      	bne.n	8002f04 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	3355      	adds	r3, #85	; 0x55
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3355      	adds	r3, #85	; 0x55
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3342      	adds	r3, #66	; 0x42
 8002f26:	2200      	movs	r2, #0
 8002f28:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002f2a:	e093      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	212c      	movs	r1, #44	; 0x2c
 8002f32:	fb01 f303 	mul.w	r3, r1, r3
 8002f36:	4413      	add	r3, r2
 8002f38:	3342      	adds	r3, #66	; 0x42
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	701a      	strb	r2, [r3, #0]
      break;
 8002f3e:	e089      	b.n	8003054 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002f40:	78bb      	ldrb	r3, [r7, #2]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d11d      	bne.n	8002f82 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	212c      	movs	r1, #44	; 0x2c
 8002f4c:	fb01 f303 	mul.w	r3, r1, r3
 8002f50:	4413      	add	r3, r2
 8002f52:	3355      	adds	r3, #85	; 0x55
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d109      	bne.n	8002f6e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	212c      	movs	r1, #44	; 0x2c
 8002f60:	fb01 f303 	mul.w	r3, r1, r3
 8002f64:	4413      	add	r3, r2
 8002f66:	3342      	adds	r3, #66	; 0x42
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f6c:	e073      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f6e:	78fb      	ldrb	r3, [r7, #3]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	3342      	adds	r3, #66	; 0x42
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	701a      	strb	r2, [r3, #0]
      break;
 8002f80:	e069      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f82:	78fb      	ldrb	r3, [r7, #3]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3354      	adds	r3, #84	; 0x54
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d109      	bne.n	8002faa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3342      	adds	r3, #66	; 0x42
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
      break;
 8002fa8:	e055      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	212c      	movs	r1, #44	; 0x2c
 8002fb0:	fb01 f303 	mul.w	r3, r1, r3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3342      	adds	r3, #66	; 0x42
 8002fb8:	2202      	movs	r2, #2
 8002fba:	701a      	strb	r2, [r3, #0]
      break;
 8002fbc:	e04b      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002fbe:	78bb      	ldrb	r3, [r7, #2]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d11d      	bne.n	8003000 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fc4:	78fb      	ldrb	r3, [r7, #3]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	212c      	movs	r1, #44	; 0x2c
 8002fca:	fb01 f303 	mul.w	r3, r1, r3
 8002fce:	4413      	add	r3, r2
 8002fd0:	3355      	adds	r3, #85	; 0x55
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d109      	bne.n	8002fec <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	212c      	movs	r1, #44	; 0x2c
 8002fde:	fb01 f303 	mul.w	r3, r1, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3342      	adds	r3, #66	; 0x42
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fea:	e034      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fec:	78fb      	ldrb	r3, [r7, #3]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	212c      	movs	r1, #44	; 0x2c
 8002ff2:	fb01 f303 	mul.w	r3, r1, r3
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3342      	adds	r3, #66	; 0x42
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	701a      	strb	r2, [r3, #0]
      break;
 8002ffe:	e02a      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	212c      	movs	r1, #44	; 0x2c
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	4413      	add	r3, r2
 800300c:	3354      	adds	r3, #84	; 0x54
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d109      	bne.n	8003028 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	212c      	movs	r1, #44	; 0x2c
 800301a:	fb01 f303 	mul.w	r3, r1, r3
 800301e:	4413      	add	r3, r2
 8003020:	3342      	adds	r3, #66	; 0x42
 8003022:	2200      	movs	r2, #0
 8003024:	701a      	strb	r2, [r3, #0]
      break;
 8003026:	e016      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	212c      	movs	r1, #44	; 0x2c
 800302e:	fb01 f303 	mul.w	r3, r1, r3
 8003032:	4413      	add	r3, r2
 8003034:	3342      	adds	r3, #66	; 0x42
 8003036:	2202      	movs	r2, #2
 8003038:	701a      	strb	r2, [r3, #0]
      break;
 800303a:	e00c      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3342      	adds	r3, #66	; 0x42
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
      break;
 800304e:	e002      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003050:	bf00      	nop
 8003052:	e000      	b.n	8003056 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003054:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003056:	78fb      	ldrb	r3, [r7, #3]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3344      	adds	r3, #68	; 0x44
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	8b3a      	ldrh	r2, [r7, #24]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	202c      	movs	r0, #44	; 0x2c
 8003070:	fb00 f303 	mul.w	r3, r0, r3
 8003074:	440b      	add	r3, r1
 8003076:	334c      	adds	r3, #76	; 0x4c
 8003078:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	212c      	movs	r1, #44	; 0x2c
 8003080:	fb01 f303 	mul.w	r3, r1, r3
 8003084:	4413      	add	r3, r2
 8003086:	3360      	adds	r3, #96	; 0x60
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	212c      	movs	r1, #44	; 0x2c
 8003092:	fb01 f303 	mul.w	r3, r1, r3
 8003096:	4413      	add	r3, r2
 8003098:	3350      	adds	r3, #80	; 0x50
 800309a:	2200      	movs	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3339      	adds	r3, #57	; 0x39
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	212c      	movs	r1, #44	; 0x2c
 80030b6:	fb01 f303 	mul.w	r3, r1, r3
 80030ba:	4413      	add	r3, r2
 80030bc:	3361      	adds	r3, #97	; 0x61
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	222c      	movs	r2, #44	; 0x2c
 80030ca:	fb02 f303 	mul.w	r3, r2, r3
 80030ce:	3338      	adds	r3, #56	; 0x38
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	18d1      	adds	r1, r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	461a      	mov	r2, r3
 80030dc:	f003 ff98 	bl	8007010 <USB_HC_StartXfer>
 80030e0:	4603      	mov	r3, r0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop

080030ec <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f003 fcbb 	bl	8006a7e <USB_GetMode>
 8003108:	4603      	mov	r3, r0
 800310a:	2b01      	cmp	r3, #1
 800310c:	f040 80f6 	bne.w	80032fc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f003 fc9f 	bl	8006a58 <USB_ReadInterrupts>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80ec 	beq.w	80032fa <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fc96 	bl	8006a58 <USB_ReadInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003132:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003136:	d104      	bne.n	8003142 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003140:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f003 fc86 	bl	8006a58 <USB_ReadInterrupts>
 800314c:	4603      	mov	r3, r0
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003156:	d104      	bne.n	8003162 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003160:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fc76 	bl	8006a58 <USB_ReadInterrupts>
 800316c:	4603      	mov	r3, r0
 800316e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003172:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003176:	d104      	bne.n	8003182 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003180:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f003 fc66 	bl	8006a58 <USB_ReadInterrupts>
 800318c:	4603      	mov	r3, r0
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d103      	bne.n	800319e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2202      	movs	r2, #2
 800319c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f003 fc58 	bl	8006a58 <USB_ReadInterrupts>
 80031a8:	4603      	mov	r3, r0
 80031aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031b2:	d11c      	bne.n	80031ee <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80031bc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10f      	bne.n	80031ee <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80031ce:	2110      	movs	r1, #16
 80031d0:	6938      	ldr	r0, [r7, #16]
 80031d2:	f003 fb67 	bl	80068a4 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80031d6:	6938      	ldr	r0, [r7, #16]
 80031d8:	f003 fb88 	bl	80068ec <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f003 fd40 	bl	8006c68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f006 fa13 	bl	8009614 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 fc30 	bl	8006a58 <USB_ReadInterrupts>
 80031f8:	4603      	mov	r3, r0
 80031fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003202:	d102      	bne.n	800320a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f001 fa03 	bl	8004610 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fc22 	bl	8006a58 <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f003 0308 	and.w	r3, r3, #8
 800321a:	2b08      	cmp	r3, #8
 800321c:	d106      	bne.n	800322c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f006 f9dc 	bl	80095dc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2208      	movs	r2, #8
 800322a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4618      	mov	r0, r3
 8003232:	f003 fc11 	bl	8006a58 <USB_ReadInterrupts>
 8003236:	4603      	mov	r3, r0
 8003238:	f003 0310 	and.w	r3, r3, #16
 800323c:	2b10      	cmp	r3, #16
 800323e:	d101      	bne.n	8003244 <HAL_HCD_IRQHandler+0x158>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <HAL_HCD_IRQHandler+0x15a>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d012      	beq.n	8003270 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699a      	ldr	r2, [r3, #24]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0210 	bic.w	r2, r2, #16
 8003258:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f001 f906 	bl	800446c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0210 	orr.w	r2, r2, #16
 800326e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f003 fbef 	bl	8006a58 <USB_ReadInterrupts>
 800327a:	4603      	mov	r3, r0
 800327c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003280:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003284:	d13a      	bne.n	80032fc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f004 f802 	bl	8007294 <USB_HC_ReadInterrupt>
 8003290:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	e025      	b.n	80032e4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d018      	beq.n	80032de <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d106      	bne.n	80032d2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	b2db      	uxtb	r3, r3
 80032c8:	4619      	mov	r1, r3
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f8ab 	bl	8003426 <HCD_HC_IN_IRQHandler>
 80032d0:	e005      	b.n	80032de <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fcc6 	bl	8003c6a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	3301      	adds	r3, #1
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d3d4      	bcc.n	8003298 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032f6:	615a      	str	r2, [r3, #20]
 80032f8:	e000      	b.n	80032fc <HAL_HCD_IRQHandler+0x210>
      return;
 80032fa:	bf00      	nop
    }
  }
}
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_HCD_Start+0x16>
 8003314:	2302      	movs	r3, #2
 8003316:	e013      	b.n	8003340 <HAL_HCD_Start+0x3e>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2101      	movs	r1, #1
 8003326:	4618      	mov	r0, r3
 8003328:	f003 fd02 	bl	8006d30 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f003 fa48 	bl	80067c6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_HCD_Stop+0x16>
 800335a:	2302      	movs	r3, #2
 800335c:	e00d      	b.n	800337a <HAL_HCD_Stop+0x32>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f004 f8fc 	bl	8007568 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4618      	mov	r0, r3
 8003390:	f003 fca4 	bl	8006cdc <USB_ResetPort>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80033aa:	78fb      	ldrb	r3, [r7, #3]
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	212c      	movs	r1, #44	; 0x2c
 80033b0:	fb01 f303 	mul.w	r3, r1, r3
 80033b4:	4413      	add	r3, r2
 80033b6:	3360      	adds	r3, #96	; 0x60
 80033b8:	781b      	ldrb	r3, [r3, #0]
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
 80033ce:	460b      	mov	r3, r1
 80033d0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033d2:	78fb      	ldrb	r3, [r7, #3]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	3350      	adds	r3, #80	; 0x50
 80033e0:	681b      	ldr	r3, [r3, #0]
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b082      	sub	sp, #8
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fce8 	bl	8006dd0 <USB_GetCurrentFrame>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b082      	sub	sp, #8
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f003 fcc3 	bl	8006da2 <USB_GetHostSpeed>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b086      	sub	sp, #24
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	4413      	add	r3, r2
 8003448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	2b04      	cmp	r3, #4
 8003454:	d119      	bne.n	800348a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	4413      	add	r3, r2
 800345e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003462:	461a      	mov	r2, r3
 8003464:	2304      	movs	r3, #4
 8003466:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	4413      	add	r3, r2
 8003470:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	0151      	lsls	r1, r2, #5
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	440a      	add	r2, r1
 800347e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	60d3      	str	r3, [r2, #12]
 8003488:	e101      	b.n	800368e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	015a      	lsls	r2, r3, #5
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800349c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a0:	d12b      	bne.n	80034fa <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	015a      	lsls	r2, r3, #5
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	4413      	add	r3, r2
 80034aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ae:	461a      	mov	r2, r3
 80034b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034b4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	212c      	movs	r1, #44	; 0x2c
 80034bc:	fb01 f303 	mul.w	r3, r1, r3
 80034c0:	4413      	add	r3, r2
 80034c2:	3361      	adds	r3, #97	; 0x61
 80034c4:	2207      	movs	r2, #7
 80034c6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	015a      	lsls	r2, r3, #5
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	4413      	add	r3, r2
 80034d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	0151      	lsls	r1, r2, #5
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	440a      	add	r2, r1
 80034de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034e2:	f043 0302 	orr.w	r3, r3, #2
 80034e6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	4611      	mov	r1, r2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f003 fedf 	bl	80072b6 <USB_HC_Halt>
 80034f8:	e0c9      	b.n	800368e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4413      	add	r3, r2
 8003502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b20      	cmp	r3, #32
 800350e:	d109      	bne.n	8003524 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351c:	461a      	mov	r2, r3
 800351e:	2320      	movs	r3, #32
 8003520:	6093      	str	r3, [r2, #8]
 8003522:	e0b4      	b.n	800368e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	015a      	lsls	r2, r3, #5
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	4413      	add	r3, r2
 800352c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b08      	cmp	r3, #8
 8003538:	d133      	bne.n	80035a2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	0151      	lsls	r1, r2, #5
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	440a      	add	r2, r1
 8003550:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3361      	adds	r3, #97	; 0x61
 8003568:	2205      	movs	r2, #5
 800356a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	2310      	movs	r3, #16
 800357c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4413      	add	r3, r2
 8003586:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358a:	461a      	mov	r2, r3
 800358c:	2308      	movs	r3, #8
 800358e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	4611      	mov	r1, r2
 800359a:	4618      	mov	r0, r3
 800359c:	f003 fe8b 	bl	80072b6 <USB_HC_Halt>
 80035a0:	e075      	b.n	800368e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b8:	d134      	bne.n	8003624 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	0151      	lsls	r1, r2, #5
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	440a      	add	r2, r1
 80035d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035d4:	f043 0302 	orr.w	r3, r3, #2
 80035d8:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	212c      	movs	r1, #44	; 0x2c
 80035e0:	fb01 f303 	mul.w	r3, r1, r3
 80035e4:	4413      	add	r3, r2
 80035e6:	3361      	adds	r3, #97	; 0x61
 80035e8:	2208      	movs	r2, #8
 80035ea:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	461a      	mov	r2, r3
 80035fa:	2310      	movs	r3, #16
 80035fc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003610:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fe4a 	bl	80072b6 <USB_HC_Halt>
 8003622:	e034      	b.n	800368e <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003636:	2b80      	cmp	r3, #128	; 0x80
 8003638:	d129      	bne.n	800368e <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	0151      	lsls	r1, r2, #5
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	440a      	add	r2, r1
 8003650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003654:	f043 0302 	orr.w	r3, r3, #2
 8003658:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	3361      	adds	r3, #97	; 0x61
 8003668:	2206      	movs	r2, #6
 800366a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	4611      	mov	r1, r2
 8003676:	4618      	mov	r0, r3
 8003678:	f003 fe1d 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	2380      	movs	r3, #128	; 0x80
 800368c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a4:	d122      	bne.n	80036ec <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	0151      	lsls	r1, r2, #5
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	440a      	add	r2, r1
 80036bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f003 fdf0 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e2:	461a      	mov	r2, r3
 80036e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80036ea:	e2ba      	b.n	8003c62 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	f040 811b 	bne.w	800393a <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d019      	beq.n	8003740 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	212c      	movs	r1, #44	; 0x2c
 8003712:	fb01 f303 	mul.w	r3, r1, r3
 8003716:	4413      	add	r3, r2
 8003718:	3348      	adds	r3, #72	; 0x48
 800371a:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	0159      	lsls	r1, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	440b      	add	r3, r1
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800372e:	1ad2      	subs	r2, r2, r3
 8003730:	6879      	ldr	r1, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	202c      	movs	r0, #44	; 0x2c
 8003736:	fb00 f303 	mul.w	r3, r0, r3
 800373a:	440b      	add	r3, r1
 800373c:	3350      	adds	r3, #80	; 0x50
 800373e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	212c      	movs	r1, #44	; 0x2c
 8003746:	fb01 f303 	mul.w	r3, r1, r3
 800374a:	4413      	add	r3, r2
 800374c:	3361      	adds	r3, #97	; 0x61
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	212c      	movs	r1, #44	; 0x2c
 8003758:	fb01 f303 	mul.w	r3, r1, r3
 800375c:	4413      	add	r3, r2
 800375e:	335c      	adds	r3, #92	; 0x5c
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4413      	add	r3, r2
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	461a      	mov	r2, r3
 8003772:	2301      	movs	r3, #1
 8003774:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	212c      	movs	r1, #44	; 0x2c
 800377c:	fb01 f303 	mul.w	r3, r1, r3
 8003780:	4413      	add	r3, r2
 8003782:	333f      	adds	r3, #63	; 0x3f
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	333f      	adds	r3, #63	; 0x3f
 8003798:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800379a:	2b02      	cmp	r3, #2
 800379c:	d121      	bne.n	80037e2 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	0151      	lsls	r1, r2, #5
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	440a      	add	r2, r1
 80037b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	4611      	mov	r1, r2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f003 fd74 	bl	80072b6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	015a      	lsls	r2, r3, #5
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	4413      	add	r3, r2
 80037d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037da:	461a      	mov	r2, r3
 80037dc:	2310      	movs	r3, #16
 80037de:	6093      	str	r3, [r2, #8]
 80037e0:	e066      	b.n	80038b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	212c      	movs	r1, #44	; 0x2c
 80037e8:	fb01 f303 	mul.w	r3, r1, r3
 80037ec:	4413      	add	r3, r2
 80037ee:	333f      	adds	r3, #63	; 0x3f
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d127      	bne.n	8003846 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	015a      	lsls	r2, r3, #5
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4413      	add	r3, r2
 80037fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	0151      	lsls	r1, r2, #5
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	440a      	add	r2, r1
 800380c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003810:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003814:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	212c      	movs	r1, #44	; 0x2c
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	4413      	add	r3, r2
 8003822:	3360      	adds	r3, #96	; 0x60
 8003824:	2201      	movs	r2, #1
 8003826:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	b2d9      	uxtb	r1, r3
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	202c      	movs	r0, #44	; 0x2c
 8003832:	fb00 f303 	mul.w	r3, r0, r3
 8003836:	4413      	add	r3, r2
 8003838:	3360      	adds	r3, #96	; 0x60
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f005 fef6 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003844:	e034      	b.n	80038b0 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	212c      	movs	r1, #44	; 0x2c
 800384c:	fb01 f303 	mul.w	r3, r1, r3
 8003850:	4413      	add	r3, r2
 8003852:	333f      	adds	r3, #63	; 0x3f
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d12a      	bne.n	80038b0 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	212c      	movs	r1, #44	; 0x2c
 8003860:	fb01 f303 	mul.w	r3, r1, r3
 8003864:	4413      	add	r3, r2
 8003866:	3360      	adds	r3, #96	; 0x60
 8003868:	2201      	movs	r2, #1
 800386a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	212c      	movs	r1, #44	; 0x2c
 8003872:	fb01 f303 	mul.w	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3354      	adds	r3, #84	; 0x54
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	f083 0301 	eor.w	r3, r3, #1
 8003880:	b2d8      	uxtb	r0, r3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3354      	adds	r3, #84	; 0x54
 8003890:	4602      	mov	r2, r0
 8003892:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	b2d9      	uxtb	r1, r3
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	202c      	movs	r0, #44	; 0x2c
 800389e:	fb00 f303 	mul.w	r3, r0, r3
 80038a2:	4413      	add	r3, r2
 80038a4:	3360      	adds	r3, #96	; 0x60
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f005 fec0 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d12b      	bne.n	8003910 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	212c      	movs	r1, #44	; 0x2c
 80038be:	fb01 f303 	mul.w	r3, r1, r3
 80038c2:	4413      	add	r3, r2
 80038c4:	3348      	adds	r3, #72	; 0x48
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	202c      	movs	r0, #44	; 0x2c
 80038ce:	fb00 f202 	mul.w	r2, r0, r2
 80038d2:	440a      	add	r2, r1
 80038d4:	3240      	adds	r2, #64	; 0x40
 80038d6:	8812      	ldrh	r2, [r2, #0]
 80038d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 81be 	beq.w	8003c62 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3354      	adds	r3, #84	; 0x54
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	f083 0301 	eor.w	r3, r3, #1
 80038fa:	b2d8      	uxtb	r0, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3354      	adds	r3, #84	; 0x54
 800390a:	4602      	mov	r2, r0
 800390c:	701a      	strb	r2, [r3, #0]
}
 800390e:	e1a8      	b.n	8003c62 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3354      	adds	r3, #84	; 0x54
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	f083 0301 	eor.w	r3, r3, #1
 8003924:	b2d8      	uxtb	r0, r3
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	212c      	movs	r1, #44	; 0x2c
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	3354      	adds	r3, #84	; 0x54
 8003934:	4602      	mov	r2, r0
 8003936:	701a      	strb	r2, [r3, #0]
}
 8003938:	e193      	b.n	8003c62 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b02      	cmp	r3, #2
 800394e:	f040 8106 	bne.w	8003b5e <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	0151      	lsls	r1, r2, #5
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	440a      	add	r2, r1
 8003968:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800396c:	f023 0302 	bic.w	r3, r3, #2
 8003970:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	212c      	movs	r1, #44	; 0x2c
 8003978:	fb01 f303 	mul.w	r3, r1, r3
 800397c:	4413      	add	r3, r2
 800397e:	3361      	adds	r3, #97	; 0x61
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d109      	bne.n	800399a <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	212c      	movs	r1, #44	; 0x2c
 800398c:	fb01 f303 	mul.w	r3, r1, r3
 8003990:	4413      	add	r3, r2
 8003992:	3360      	adds	r3, #96	; 0x60
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e0c9      	b.n	8003b2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	212c      	movs	r1, #44	; 0x2c
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	3361      	adds	r3, #97	; 0x61
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b05      	cmp	r3, #5
 80039ac:	d109      	bne.n	80039c2 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	212c      	movs	r1, #44	; 0x2c
 80039b4:	fb01 f303 	mul.w	r3, r1, r3
 80039b8:	4413      	add	r3, r2
 80039ba:	3360      	adds	r3, #96	; 0x60
 80039bc:	2205      	movs	r2, #5
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	e0b5      	b.n	8003b2e <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	212c      	movs	r1, #44	; 0x2c
 80039c8:	fb01 f303 	mul.w	r3, r1, r3
 80039cc:	4413      	add	r3, r2
 80039ce:	3361      	adds	r3, #97	; 0x61
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d009      	beq.n	80039ea <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	3361      	adds	r3, #97	; 0x61
 80039e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80039e6:	2b08      	cmp	r3, #8
 80039e8:	d150      	bne.n	8003a8c <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	335c      	adds	r3, #92	; 0x5c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	1c5a      	adds	r2, r3, #1
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	202c      	movs	r0, #44	; 0x2c
 8003a02:	fb00 f303 	mul.w	r3, r0, r3
 8003a06:	440b      	add	r3, r1
 8003a08:	335c      	adds	r3, #92	; 0x5c
 8003a0a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	212c      	movs	r1, #44	; 0x2c
 8003a12:	fb01 f303 	mul.w	r3, r1, r3
 8003a16:	4413      	add	r3, r2
 8003a18:	335c      	adds	r3, #92	; 0x5c
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d912      	bls.n	8003a46 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	335c      	adds	r3, #92	; 0x5c
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	212c      	movs	r1, #44	; 0x2c
 8003a38:	fb01 f303 	mul.w	r3, r1, r3
 8003a3c:	4413      	add	r3, r2
 8003a3e:	3360      	adds	r3, #96	; 0x60
 8003a40:	2204      	movs	r2, #4
 8003a42:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a44:	e073      	b.n	8003b2e <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3360      	adds	r3, #96	; 0x60
 8003a54:	2202      	movs	r2, #2
 8003a56:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a6e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a76:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	461a      	mov	r2, r3
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003a8a:	e050      	b.n	8003b2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	212c      	movs	r1, #44	; 0x2c
 8003a92:	fb01 f303 	mul.w	r3, r1, r3
 8003a96:	4413      	add	r3, r2
 8003a98:	3361      	adds	r3, #97	; 0x61
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d122      	bne.n	8003ae6 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	212c      	movs	r1, #44	; 0x2c
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	4413      	add	r3, r2
 8003aac:	3360      	adds	r3, #96	; 0x60
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ac8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ad0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	015a      	lsls	r2, r3, #5
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4413      	add	r3, r2
 8003ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e023      	b.n	8003b2e <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	212c      	movs	r1, #44	; 0x2c
 8003aec:	fb01 f303 	mul.w	r3, r1, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	3361      	adds	r3, #97	; 0x61
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b07      	cmp	r3, #7
 8003af8:	d119      	bne.n	8003b2e <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	212c      	movs	r1, #44	; 0x2c
 8003b00:	fb01 f303 	mul.w	r3, r1, r3
 8003b04:	4413      	add	r3, r2
 8003b06:	335c      	adds	r3, #92	; 0x5c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	202c      	movs	r0, #44	; 0x2c
 8003b12:	fb00 f303 	mul.w	r3, r0, r3
 8003b16:	440b      	add	r3, r1
 8003b18:	335c      	adds	r3, #92	; 0x5c
 8003b1a:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	212c      	movs	r1, #44	; 0x2c
 8003b22:	fb01 f303 	mul.w	r3, r1, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	3360      	adds	r3, #96	; 0x60
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	015a      	lsls	r2, r3, #5
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4413      	add	r3, r2
 8003b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	b2d9      	uxtb	r1, r3
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	202c      	movs	r0, #44	; 0x2c
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	4413      	add	r3, r2
 8003b50:	3360      	adds	r3, #96	; 0x60
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	461a      	mov	r2, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f005 fd6a 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b5c:	e081      	b.n	8003c62 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d176      	bne.n	8003c62 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	333f      	adds	r3, #63	; 0x3f
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d121      	bne.n	8003bcc <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	335c      	adds	r3, #92	; 0x5c
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	0151      	lsls	r1, r2, #5
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	440a      	add	r2, r1
 8003bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f003 fb76 	bl	80072b6 <USB_HC_Halt>
 8003bca:	e041      	b.n	8003c50 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	212c      	movs	r1, #44	; 0x2c
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	333f      	adds	r3, #63	; 0x3f
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	212c      	movs	r1, #44	; 0x2c
 8003be6:	fb01 f303 	mul.w	r3, r1, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	333f      	adds	r3, #63	; 0x3f
 8003bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d12d      	bne.n	8003c50 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	335c      	adds	r3, #92	; 0x5c
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d120      	bne.n	8003c50 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	212c      	movs	r1, #44	; 0x2c
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	4413      	add	r3, r2
 8003c1a:	3361      	adds	r3, #97	; 0x61
 8003c1c:	2203      	movs	r2, #3
 8003c1e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3a:	f043 0302 	orr.w	r3, r3, #2
 8003c3e:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	4611      	mov	r1, r2
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f003 fb33 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	015a      	lsls	r2, r3, #5
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4413      	add	r3, r2
 8003c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2310      	movs	r3, #16
 8003c60:	6093      	str	r3, [r2, #8]
}
 8003c62:	bf00      	nop
 8003c64:	3718      	adds	r7, #24
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b088      	sub	sp, #32
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d119      	bne.n	8003cce <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	015a      	lsls	r2, r3, #5
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	2304      	movs	r3, #4
 8003caa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	0151      	lsls	r1, r2, #5
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	440a      	add	r2, r1
 8003cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cc6:	f043 0302 	orr.w	r3, r3, #2
 8003cca:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003ccc:	e3ca      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	015a      	lsls	r2, r3, #5
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0320 	and.w	r3, r3, #32
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d13e      	bne.n	8003d62 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2320      	movs	r3, #32
 8003cf4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	333d      	adds	r3, #61	; 0x3d
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 83ac 	bne.w	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	212c      	movs	r1, #44	; 0x2c
 8003d12:	fb01 f303 	mul.w	r3, r1, r3
 8003d16:	4413      	add	r3, r2
 8003d18:	333d      	adds	r3, #61	; 0x3d
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	3360      	adds	r3, #96	; 0x60
 8003d2c:	2202      	movs	r2, #2
 8003d2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	015a      	lsls	r2, r3, #5
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	4413      	add	r3, r2
 8003d38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	0151      	lsls	r1, r2, #5
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	440a      	add	r2, r1
 8003d46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d4a:	f043 0302 	orr.w	r3, r3, #2
 8003d4e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	4611      	mov	r1, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f003 faab 	bl	80072b6 <USB_HC_Halt>
}
 8003d60:	e380      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d78:	d122      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	0151      	lsls	r1, r2, #5
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	440a      	add	r2, r1
 8003d90:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	b2d2      	uxtb	r2, r2
 8003da2:	4611      	mov	r1, r2
 8003da4:	4618      	mov	r0, r3
 8003da6:	f003 fa86 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	015a      	lsls	r2, r3, #5
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4413      	add	r3, r2
 8003db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db6:	461a      	mov	r2, r3
 8003db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003dbc:	6093      	str	r3, [r2, #8]
}
 8003dbe:	e351      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d150      	bne.n	8003e78 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	212c      	movs	r1, #44	; 0x2c
 8003ddc:	fb01 f303 	mul.w	r3, r1, r3
 8003de0:	4413      	add	r3, r2
 8003de2:	335c      	adds	r3, #92	; 0x5c
 8003de4:	2200      	movs	r2, #0
 8003de6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfa:	2b40      	cmp	r3, #64	; 0x40
 8003dfc:	d111      	bne.n	8003e22 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	212c      	movs	r1, #44	; 0x2c
 8003e04:	fb01 f303 	mul.w	r3, r1, r3
 8003e08:	4413      	add	r3, r2
 8003e0a:	333d      	adds	r3, #61	; 0x3d
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2340      	movs	r3, #64	; 0x40
 8003e20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	0151      	lsls	r1, r2, #5
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	440a      	add	r2, r1
 8003e38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e3c:	f043 0302 	orr.w	r3, r3, #2
 8003e40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 fa32 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5e:	461a      	mov	r2, r3
 8003e60:	2301      	movs	r3, #1
 8003e62:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	212c      	movs	r1, #44	; 0x2c
 8003e6a:	fb01 f303 	mul.w	r3, r1, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	3361      	adds	r3, #97	; 0x61
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]
}
 8003e76:	e2f5      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8a:	2b40      	cmp	r3, #64	; 0x40
 8003e8c:	d13c      	bne.n	8003f08 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	212c      	movs	r1, #44	; 0x2c
 8003e94:	fb01 f303 	mul.w	r3, r1, r3
 8003e98:	4413      	add	r3, r2
 8003e9a:	3361      	adds	r3, #97	; 0x61
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	212c      	movs	r1, #44	; 0x2c
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	4413      	add	r3, r2
 8003eac:	333d      	adds	r3, #61	; 0x3d
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	212c      	movs	r1, #44	; 0x2c
 8003eb8:	fb01 f303 	mul.w	r3, r1, r3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	335c      	adds	r3, #92	; 0x5c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f003 f9e1 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f00:	461a      	mov	r2, r3
 8003f02:	2340      	movs	r3, #64	; 0x40
 8003f04:	6093      	str	r3, [r2, #8]
}
 8003f06:	e2ad      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b08      	cmp	r3, #8
 8003f1c:	d12a      	bne.n	8003f74 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	4611      	mov	r1, r2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f003 f9ab 	bl	80072b6 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3361      	adds	r3, #97	; 0x61
 8003f6e:	2205      	movs	r2, #5
 8003f70:	701a      	strb	r2, [r3, #0]
}
 8003f72:	e277      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d150      	bne.n	800402c <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	212c      	movs	r1, #44	; 0x2c
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	4413      	add	r3, r2
 8003f96:	335c      	adds	r3, #92	; 0x5c
 8003f98:	2200      	movs	r2, #0
 8003f9a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	212c      	movs	r1, #44	; 0x2c
 8003fa2:	fb01 f303 	mul.w	r3, r1, r3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3361      	adds	r3, #97	; 0x61
 8003faa:	2203      	movs	r2, #3
 8003fac:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	212c      	movs	r1, #44	; 0x2c
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	333d      	adds	r3, #61	; 0x3d
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d112      	bne.n	8003fe8 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	212c      	movs	r1, #44	; 0x2c
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	333c      	adds	r3, #60	; 0x3c
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d108      	bne.n	8003fe8 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	212c      	movs	r1, #44	; 0x2c
 8003fdc:	fb01 f303 	mul.w	r3, r1, r3
 8003fe0:	4413      	add	r3, r2
 8003fe2:	333d      	adds	r3, #61	; 0x3d
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	69ba      	ldr	r2, [r7, #24]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004002:	f043 0302 	orr.w	r3, r3, #2
 8004006:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	4611      	mov	r1, r2
 8004012:	4618      	mov	r0, r3
 8004014:	f003 f94f 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	4413      	add	r3, r2
 8004020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004024:	461a      	mov	r2, r3
 8004026:	2310      	movs	r3, #16
 8004028:	6093      	str	r3, [r2, #8]
}
 800402a:	e21b      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b80      	cmp	r3, #128	; 0x80
 8004040:	d174      	bne.n	800412c <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d121      	bne.n	800408e <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	3361      	adds	r3, #97	; 0x61
 8004058:	2206      	movs	r2, #6
 800405a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	4413      	add	r3, r2
 8004064:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	440a      	add	r2, r1
 8004072:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004076:	f043 0302 	orr.w	r3, r3, #2
 800407a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f003 f915 	bl	80072b6 <USB_HC_Halt>
 800408c:	e044      	b.n	8004118 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	212c      	movs	r1, #44	; 0x2c
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	4413      	add	r3, r2
 800409a:	335c      	adds	r3, #92	; 0x5c
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	202c      	movs	r0, #44	; 0x2c
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	440b      	add	r3, r1
 80040ac:	335c      	adds	r3, #92	; 0x5c
 80040ae:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	335c      	adds	r3, #92	; 0x5c
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d920      	bls.n	8004106 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	335c      	adds	r3, #92	; 0x5c
 80040d2:	2200      	movs	r2, #0
 80040d4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	212c      	movs	r1, #44	; 0x2c
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	3360      	adds	r3, #96	; 0x60
 80040e4:	2204      	movs	r2, #4
 80040e6:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	b2d9      	uxtb	r1, r3
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	202c      	movs	r0, #44	; 0x2c
 80040f2:	fb00 f303 	mul.w	r3, r0, r3
 80040f6:	4413      	add	r3, r2
 80040f8:	3360      	adds	r3, #96	; 0x60
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	461a      	mov	r2, r3
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f005 fa96 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004104:	e008      	b.n	8004118 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	212c      	movs	r1, #44	; 0x2c
 800410c:	fb01 f303 	mul.w	r3, r1, r3
 8004110:	4413      	add	r3, r2
 8004112:	3360      	adds	r3, #96	; 0x60
 8004114:	2202      	movs	r2, #2
 8004116:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	4413      	add	r3, r2
 8004120:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004124:	461a      	mov	r2, r3
 8004126:	2380      	movs	r3, #128	; 0x80
 8004128:	6093      	str	r3, [r2, #8]
}
 800412a:	e19b      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800413e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004142:	d134      	bne.n	80041ae <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	0151      	lsls	r1, r2, #5
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	440a      	add	r2, r1
 800415a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800415e:	f043 0302 	orr.w	r3, r3, #2
 8004162:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f003 f8a1 	bl	80072b6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	015a      	lsls	r2, r3, #5
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	4413      	add	r3, r2
 800417c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004180:	461a      	mov	r2, r3
 8004182:	2310      	movs	r3, #16
 8004184:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	461a      	mov	r2, r3
 8004194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004198:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	212c      	movs	r1, #44	; 0x2c
 80041a0:	fb01 f303 	mul.w	r3, r1, r3
 80041a4:	4413      	add	r3, r2
 80041a6:	3361      	adds	r3, #97	; 0x61
 80041a8:	2208      	movs	r2, #8
 80041aa:	701a      	strb	r2, [r3, #0]
}
 80041ac:	e15a      	b.n	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	f040 814f 	bne.w	8004464 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	0151      	lsls	r1, r2, #5
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	440a      	add	r2, r1
 80041dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041e0:	f023 0302 	bic.w	r3, r3, #2
 80041e4:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	212c      	movs	r1, #44	; 0x2c
 80041ec:	fb01 f303 	mul.w	r3, r1, r3
 80041f0:	4413      	add	r3, r2
 80041f2:	3361      	adds	r3, #97	; 0x61
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d17d      	bne.n	80042f6 <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	212c      	movs	r1, #44	; 0x2c
 8004200:	fb01 f303 	mul.w	r3, r1, r3
 8004204:	4413      	add	r3, r2
 8004206:	3360      	adds	r3, #96	; 0x60
 8004208:	2201      	movs	r2, #1
 800420a:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	333f      	adds	r3, #63	; 0x3f
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b02      	cmp	r3, #2
 800421e:	d00a      	beq.n	8004236 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	212c      	movs	r1, #44	; 0x2c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4413      	add	r3, r2
 800422c:	333f      	adds	r3, #63	; 0x3f
 800422e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004230:	2b03      	cmp	r3, #3
 8004232:	f040 8100 	bne.w	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d113      	bne.n	8004266 <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	212c      	movs	r1, #44	; 0x2c
 8004244:	fb01 f303 	mul.w	r3, r1, r3
 8004248:	4413      	add	r3, r2
 800424a:	3355      	adds	r3, #85	; 0x55
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	f083 0301 	eor.w	r3, r3, #1
 8004252:	b2d8      	uxtb	r0, r3
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	212c      	movs	r1, #44	; 0x2c
 800425a:	fb01 f303 	mul.w	r3, r1, r3
 800425e:	4413      	add	r3, r2
 8004260:	3355      	adds	r3, #85	; 0x55
 8004262:	4602      	mov	r2, r0
 8004264:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b01      	cmp	r3, #1
 800426c:	f040 80e3 	bne.w	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	334c      	adds	r3, #76	; 0x4c
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 80d8 	beq.w	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	212c      	movs	r1, #44	; 0x2c
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4413      	add	r3, r2
 8004292:	334c      	adds	r3, #76	; 0x4c
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6879      	ldr	r1, [r7, #4]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	202c      	movs	r0, #44	; 0x2c
 800429c:	fb00 f202 	mul.w	r2, r0, r2
 80042a0:	440a      	add	r2, r1
 80042a2:	3240      	adds	r2, #64	; 0x40
 80042a4:	8812      	ldrh	r2, [r2, #0]
 80042a6:	4413      	add	r3, r2
 80042a8:	3b01      	subs	r3, #1
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	202c      	movs	r0, #44	; 0x2c
 80042b0:	fb00 f202 	mul.w	r2, r0, r2
 80042b4:	440a      	add	r2, r1
 80042b6:	3240      	adds	r2, #64	; 0x40
 80042b8:	8812      	ldrh	r2, [r2, #0]
 80042ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80042be:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80b5 	beq.w	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	212c      	movs	r1, #44	; 0x2c
 80042d2:	fb01 f303 	mul.w	r3, r1, r3
 80042d6:	4413      	add	r3, r2
 80042d8:	3355      	adds	r3, #85	; 0x55
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	f083 0301 	eor.w	r3, r3, #1
 80042e0:	b2d8      	uxtb	r0, r3
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	212c      	movs	r1, #44	; 0x2c
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	3355      	adds	r3, #85	; 0x55
 80042f0:	4602      	mov	r2, r0
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	e09f      	b.n	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3361      	adds	r3, #97	; 0x61
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b03      	cmp	r3, #3
 8004308:	d109      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	212c      	movs	r1, #44	; 0x2c
 8004310:	fb01 f303 	mul.w	r3, r1, r3
 8004314:	4413      	add	r3, r2
 8004316:	3360      	adds	r3, #96	; 0x60
 8004318:	2202      	movs	r2, #2
 800431a:	701a      	strb	r2, [r3, #0]
 800431c:	e08b      	b.n	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	212c      	movs	r1, #44	; 0x2c
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	4413      	add	r3, r2
 800432a:	3361      	adds	r3, #97	; 0x61
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b04      	cmp	r3, #4
 8004330:	d109      	bne.n	8004346 <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	212c      	movs	r1, #44	; 0x2c
 8004338:	fb01 f303 	mul.w	r3, r1, r3
 800433c:	4413      	add	r3, r2
 800433e:	3360      	adds	r3, #96	; 0x60
 8004340:	2202      	movs	r2, #2
 8004342:	701a      	strb	r2, [r3, #0]
 8004344:	e077      	b.n	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	3361      	adds	r3, #97	; 0x61
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b05      	cmp	r3, #5
 8004358:	d109      	bne.n	800436e <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	212c      	movs	r1, #44	; 0x2c
 8004360:	fb01 f303 	mul.w	r3, r1, r3
 8004364:	4413      	add	r3, r2
 8004366:	3360      	adds	r3, #96	; 0x60
 8004368:	2205      	movs	r2, #5
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e063      	b.n	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	212c      	movs	r1, #44	; 0x2c
 8004374:	fb01 f303 	mul.w	r3, r1, r3
 8004378:	4413      	add	r3, r2
 800437a:	3361      	adds	r3, #97	; 0x61
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b06      	cmp	r3, #6
 8004380:	d009      	beq.n	8004396 <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	212c      	movs	r1, #44	; 0x2c
 8004388:	fb01 f303 	mul.w	r3, r1, r3
 800438c:	4413      	add	r3, r2
 800438e:	3361      	adds	r3, #97	; 0x61
 8004390:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004392:	2b08      	cmp	r3, #8
 8004394:	d14f      	bne.n	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	212c      	movs	r1, #44	; 0x2c
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	4413      	add	r3, r2
 80043a2:	335c      	adds	r3, #92	; 0x5c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	1c5a      	adds	r2, r3, #1
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	202c      	movs	r0, #44	; 0x2c
 80043ae:	fb00 f303 	mul.w	r3, r0, r3
 80043b2:	440b      	add	r3, r1
 80043b4:	335c      	adds	r3, #92	; 0x5c
 80043b6:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	212c      	movs	r1, #44	; 0x2c
 80043be:	fb01 f303 	mul.w	r3, r1, r3
 80043c2:	4413      	add	r3, r2
 80043c4:	335c      	adds	r3, #92	; 0x5c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d912      	bls.n	80043f2 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	335c      	adds	r3, #92	; 0x5c
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	212c      	movs	r1, #44	; 0x2c
 80043e4:	fb01 f303 	mul.w	r3, r1, r3
 80043e8:	4413      	add	r3, r2
 80043ea:	3360      	adds	r3, #96	; 0x60
 80043ec:	2204      	movs	r2, #4
 80043ee:	701a      	strb	r2, [r3, #0]
 80043f0:	e021      	b.n	8004436 <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	212c      	movs	r1, #44	; 0x2c
 80043f8:	fb01 f303 	mul.w	r3, r1, r3
 80043fc:	4413      	add	r3, r2
 80043fe:	3360      	adds	r3, #96	; 0x60
 8004400:	2202      	movs	r2, #2
 8004402:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800441a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004422:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004430:	461a      	mov	r2, r3
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	4413      	add	r3, r2
 800443e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004442:	461a      	mov	r2, r3
 8004444:	2302      	movs	r3, #2
 8004446:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	b2d9      	uxtb	r1, r3
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	202c      	movs	r0, #44	; 0x2c
 8004452:	fb00 f303 	mul.w	r3, r0, r3
 8004456:	4413      	add	r3, r2
 8004458:	3360      	adds	r3, #96	; 0x60
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	461a      	mov	r2, r3
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f005 f8e6 	bl	8009630 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004464:	bf00      	nop
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	f003 030f 	and.w	r3, r3, #15
 800448c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	0c5b      	lsrs	r3, r3, #17
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	091b      	lsrs	r3, r3, #4
 800449c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044a0:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d004      	beq.n	80044b2 <HCD_RXQLVL_IRQHandler+0x46>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b05      	cmp	r3, #5
 80044ac:	f000 80a9 	beq.w	8004602 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80044b0:	e0aa      	b.n	8004608 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 80a6 	beq.w	8004606 <HCD_RXQLVL_IRQHandler+0x19a>
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	69bb      	ldr	r3, [r7, #24]
 80044be:	212c      	movs	r1, #44	; 0x2c
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	4413      	add	r3, r2
 80044c6:	3344      	adds	r3, #68	; 0x44
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 809b 	beq.w	8004606 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	212c      	movs	r1, #44	; 0x2c
 80044d6:	fb01 f303 	mul.w	r3, r1, r3
 80044da:	4413      	add	r3, r2
 80044dc:	3350      	adds	r3, #80	; 0x50
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	441a      	add	r2, r3
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	202c      	movs	r0, #44	; 0x2c
 80044ea:	fb00 f303 	mul.w	r3, r0, r3
 80044ee:	440b      	add	r3, r1
 80044f0:	334c      	adds	r3, #76	; 0x4c
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d87a      	bhi.n	80045ee <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6818      	ldr	r0, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3344      	adds	r3, #68	; 0x44
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	b292      	uxth	r2, r2
 8004510:	4619      	mov	r1, r3
 8004512:	f002 fa49 	bl	80069a8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	3344      	adds	r3, #68	; 0x44
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	441a      	add	r2, r3
 800452a:	6879      	ldr	r1, [r7, #4]
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	202c      	movs	r0, #44	; 0x2c
 8004530:	fb00 f303 	mul.w	r3, r0, r3
 8004534:	440b      	add	r3, r1
 8004536:	3344      	adds	r3, #68	; 0x44
 8004538:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	212c      	movs	r1, #44	; 0x2c
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	4413      	add	r3, r2
 8004546:	3350      	adds	r3, #80	; 0x50
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	441a      	add	r2, r3
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	202c      	movs	r0, #44	; 0x2c
 8004554:	fb00 f303 	mul.w	r3, r0, r3
 8004558:	440b      	add	r3, r1
 800455a:	3350      	adds	r3, #80	; 0x50
 800455c:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	4413      	add	r3, r2
 8004566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	0cdb      	lsrs	r3, r3, #19
 800456e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004572:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3340      	adds	r3, #64	; 0x40
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4293      	cmp	r3, r2
 800458a:	d13c      	bne.n	8004606 <HCD_RXQLVL_IRQHandler+0x19a>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d039      	beq.n	8004606 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	4413      	add	r3, r2
 800459a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045a8:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045b0:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045be:	461a      	mov	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3354      	adds	r3, #84	; 0x54
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f083 0301 	eor.w	r3, r3, #1
 80045d8:	b2d8      	uxtb	r0, r3
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	212c      	movs	r1, #44	; 0x2c
 80045e0:	fb01 f303 	mul.w	r3, r1, r3
 80045e4:	4413      	add	r3, r2
 80045e6:	3354      	adds	r3, #84	; 0x54
 80045e8:	4602      	mov	r2, r0
 80045ea:	701a      	strb	r2, [r3, #0]
      break;
 80045ec:	e00b      	b.n	8004606 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	3360      	adds	r3, #96	; 0x60
 80045fc:	2204      	movs	r2, #4
 80045fe:	701a      	strb	r2, [r3, #0]
      break;
 8004600:	e001      	b.n	8004606 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004602:	bf00      	nop
 8004604:	e000      	b.n	8004608 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004606:	bf00      	nop
  }
}
 8004608:	bf00      	nop
 800460a:	3728      	adds	r7, #40	; 0x28
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800463c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b02      	cmp	r3, #2
 8004646:	d10b      	bne.n	8004660 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b01      	cmp	r3, #1
 8004650:	d102      	bne.n	8004658 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f004 ffd0 	bl	80095f8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f043 0302 	orr.w	r3, r3, #2
 800465e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f003 0308 	and.w	r3, r3, #8
 8004666:	2b08      	cmp	r3, #8
 8004668:	d132      	bne.n	80046d0 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f043 0308 	orr.w	r3, r3, #8
 8004670:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d126      	bne.n	80046ca <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	2b02      	cmp	r3, #2
 8004682:	d113      	bne.n	80046ac <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800468a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800468e:	d106      	bne.n	800469e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2102      	movs	r1, #2
 8004696:	4618      	mov	r0, r3
 8004698:	f002 fae6 	bl	8006c68 <USB_InitFSLSPClkSel>
 800469c:	e011      	b.n	80046c2 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2101      	movs	r1, #1
 80046a4:	4618      	mov	r0, r3
 80046a6:	f002 fadf 	bl	8006c68 <USB_InitFSLSPClkSel>
 80046aa:	e00a      	b.n	80046c2 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d106      	bne.n	80046c2 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046ba:	461a      	mov	r2, r3
 80046bc:	f64e 2360 	movw	r3, #60000	; 0xea60
 80046c0:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f004 ffc2 	bl	800964c <HAL_HCD_PortEnabled_Callback>
 80046c8:	e002      	b.n	80046d0 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f004 ffcc 	bl	8009668 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	d103      	bne.n	80046e2 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	f043 0320 	orr.w	r3, r3, #32
 80046e0:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80046e8:	461a      	mov	r2, r3
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	6013      	str	r3, [r2, #0]
}
 80046ee:	bf00      	nop
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
	...

080046f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e12b      	b.n	8004962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fc16 	bl	8000f50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0201 	bic.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800474a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800475a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800475c:	f001 f9fc 	bl	8005b58 <HAL_RCC_GetPCLK1Freq>
 8004760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a81      	ldr	r2, [pc, #516]	; (800496c <HAL_I2C_Init+0x274>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d807      	bhi.n	800477c <HAL_I2C_Init+0x84>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a80      	ldr	r2, [pc, #512]	; (8004970 <HAL_I2C_Init+0x278>)
 8004770:	4293      	cmp	r3, r2
 8004772:	bf94      	ite	ls
 8004774:	2301      	movls	r3, #1
 8004776:	2300      	movhi	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e006      	b.n	800478a <HAL_I2C_Init+0x92>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	4a7d      	ldr	r2, [pc, #500]	; (8004974 <HAL_I2C_Init+0x27c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	bf94      	ite	ls
 8004784:	2301      	movls	r3, #1
 8004786:	2300      	movhi	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e0e7      	b.n	8004962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4a78      	ldr	r2, [pc, #480]	; (8004978 <HAL_I2C_Init+0x280>)
 8004796:	fba2 2303 	umull	r2, r3, r2, r3
 800479a:	0c9b      	lsrs	r3, r3, #18
 800479c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	4a6a      	ldr	r2, [pc, #424]	; (800496c <HAL_I2C_Init+0x274>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d802      	bhi.n	80047cc <HAL_I2C_Init+0xd4>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	3301      	adds	r3, #1
 80047ca:	e009      	b.n	80047e0 <HAL_I2C_Init+0xe8>
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	4a69      	ldr	r2, [pc, #420]	; (800497c <HAL_I2C_Init+0x284>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	099b      	lsrs	r3, r3, #6
 80047de:	3301      	adds	r3, #1
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80047f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	495c      	ldr	r1, [pc, #368]	; (800496c <HAL_I2C_Init+0x274>)
 80047fc:	428b      	cmp	r3, r1
 80047fe:	d819      	bhi.n	8004834 <HAL_I2C_Init+0x13c>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1e59      	subs	r1, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	fbb1 f3f3 	udiv	r3, r1, r3
 800480e:	1c59      	adds	r1, r3, #1
 8004810:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004814:	400b      	ands	r3, r1
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00a      	beq.n	8004830 <HAL_I2C_Init+0x138>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	1e59      	subs	r1, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fbb1 f3f3 	udiv	r3, r1, r3
 8004828:	3301      	adds	r3, #1
 800482a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800482e:	e051      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 8004830:	2304      	movs	r3, #4
 8004832:	e04f      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d111      	bne.n	8004860 <HAL_I2C_Init+0x168>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	1e58      	subs	r0, r3, #1
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6859      	ldr	r1, [r3, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	440b      	add	r3, r1
 800484a:	fbb0 f3f3 	udiv	r3, r0, r3
 800484e:	3301      	adds	r3, #1
 8004850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004854:	2b00      	cmp	r3, #0
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	e012      	b.n	8004886 <HAL_I2C_Init+0x18e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	1e58      	subs	r0, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6859      	ldr	r1, [r3, #4]
 8004868:	460b      	mov	r3, r1
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	440b      	add	r3, r1
 800486e:	0099      	lsls	r1, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	fbb0 f3f3 	udiv	r3, r0, r3
 8004876:	3301      	adds	r3, #1
 8004878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800487c:	2b00      	cmp	r3, #0
 800487e:	bf0c      	ite	eq
 8004880:	2301      	moveq	r3, #1
 8004882:	2300      	movne	r3, #0
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <HAL_I2C_Init+0x196>
 800488a:	2301      	movs	r3, #1
 800488c:	e022      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10e      	bne.n	80048b4 <HAL_I2C_Init+0x1bc>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1e58      	subs	r0, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	440b      	add	r3, r1
 80048a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80048a8:	3301      	adds	r3, #1
 80048aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048b2:	e00f      	b.n	80048d4 <HAL_I2C_Init+0x1dc>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	1e58      	subs	r0, r3, #1
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6859      	ldr	r1, [r3, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	0099      	lsls	r1, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048ca:	3301      	adds	r3, #1
 80048cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	6809      	ldr	r1, [r1, #0]
 80048d8:	4313      	orrs	r3, r2
 80048da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	69da      	ldr	r2, [r3, #28]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004902:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	6911      	ldr	r1, [r2, #16]
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	68d2      	ldr	r2, [r2, #12]
 800490e:	4311      	orrs	r1, r2
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6812      	ldr	r2, [r2, #0]
 8004914:	430b      	orrs	r3, r1
 8004916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	000186a0 	.word	0x000186a0
 8004970:	001e847f 	.word	0x001e847f
 8004974:	003d08ff 	.word	0x003d08ff
 8004978:	431bde83 	.word	0x431bde83
 800497c:	10624dd3 	.word	0x10624dd3

08004980 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e128      	b.n	8004be4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d109      	bne.n	80049b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a90      	ldr	r2, [pc, #576]	; (8004bec <HAL_I2S_Init+0x26c>)
 80049aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7fc fb17 	bl	8000fe0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2202      	movs	r2, #2
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049c8:	f023 030f 	bic.w	r3, r3, #15
 80049cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2202      	movs	r2, #2
 80049d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d060      	beq.n	8004aa0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80049e6:	2310      	movs	r3, #16
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	e001      	b.n	80049f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80049ec:	2320      	movs	r3, #32
 80049ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b20      	cmp	r3, #32
 80049f6:	d802      	bhi.n	80049fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	005b      	lsls	r3, r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80049fe:	2001      	movs	r0, #1
 8004a00:	f001 f9a0 	bl	8005d44 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a04:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0e:	d125      	bne.n	8004a5c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d010      	beq.n	8004a3a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a22:	4613      	mov	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a34:	3305      	adds	r3, #5
 8004a36:	613b      	str	r3, [r7, #16]
 8004a38:	e01f      	b.n	8004a7a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a56:	3305      	adds	r3, #5
 8004a58:	613b      	str	r3, [r7, #16]
 8004a5a:	e00e      	b.n	8004a7a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a76:	3305      	adds	r3, #5
 8004a78:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4a5c      	ldr	r2, [pc, #368]	; (8004bf0 <HAL_I2S_Init+0x270>)
 8004a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	f003 0301 	and.w	r3, r3, #1
 8004a8c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	021b      	lsls	r3, r3, #8
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	e003      	b.n	8004aa8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d902      	bls.n	8004ab4 <HAL_I2S_Init+0x134>
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	2bff      	cmp	r3, #255	; 0xff
 8004ab2:	d907      	bls.n	8004ac4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab8:	f043 0210 	orr.w	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e08f      	b.n	8004be4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	ea42 0103 	orr.w	r1, r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ae2:	f023 030f 	bic.w	r3, r3, #15
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6851      	ldr	r1, [r2, #4]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6892      	ldr	r2, [r2, #8]
 8004aee:	4311      	orrs	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	68d2      	ldr	r2, [r2, #12]
 8004af4:	4311      	orrs	r1, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6992      	ldr	r2, [r2, #24]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b06:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6a1b      	ldr	r3, [r3, #32]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d161      	bne.n	8004bd4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a38      	ldr	r2, [pc, #224]	; (8004bf4 <HAL_I2S_Init+0x274>)
 8004b14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a37      	ldr	r2, [pc, #220]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d101      	bne.n	8004b24 <HAL_I2S_Init+0x1a4>
 8004b20:	4b36      	ldr	r3, [pc, #216]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b22:	e001      	b.n	8004b28 <HAL_I2S_Init+0x1a8>
 8004b24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b28:	69db      	ldr	r3, [r3, #28]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	4932      	ldr	r1, [pc, #200]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b30:	428a      	cmp	r2, r1
 8004b32:	d101      	bne.n	8004b38 <HAL_I2S_Init+0x1b8>
 8004b34:	4a31      	ldr	r2, [pc, #196]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b36:	e001      	b.n	8004b3c <HAL_I2S_Init+0x1bc>
 8004b38:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b3c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b40:	f023 030f 	bic.w	r3, r3, #15
 8004b44:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a2b      	ldr	r2, [pc, #172]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_I2S_Init+0x1d4>
 8004b50:	4b2a      	ldr	r3, [pc, #168]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b52:	e001      	b.n	8004b58 <HAL_I2S_Init+0x1d8>
 8004b54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b58:	2202      	movs	r2, #2
 8004b5a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a25      	ldr	r2, [pc, #148]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d101      	bne.n	8004b6a <HAL_I2S_Init+0x1ea>
 8004b66:	4b25      	ldr	r3, [pc, #148]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004b68:	e001      	b.n	8004b6e <HAL_I2S_Init+0x1ee>
 8004b6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b6e:	69db      	ldr	r3, [r3, #28]
 8004b70:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b7a:	d003      	beq.n	8004b84 <HAL_I2S_Init+0x204>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d103      	bne.n	8004b8c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b88:	613b      	str	r3, [r7, #16]
 8004b8a:	e001      	b.n	8004b90 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	897b      	ldrh	r3, [r7, #10]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bbc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a0d      	ldr	r2, [pc, #52]	; (8004bf8 <HAL_I2S_Init+0x278>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d101      	bne.n	8004bcc <HAL_I2S_Init+0x24c>
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <HAL_I2S_Init+0x27c>)
 8004bca:	e001      	b.n	8004bd0 <HAL_I2S_Init+0x250>
 8004bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd0:	897a      	ldrh	r2, [r7, #10]
 8004bd2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3720      	adds	r7, #32
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	08004cf7 	.word	0x08004cf7
 8004bf0:	cccccccd 	.word	0xcccccccd
 8004bf4:	08004e0d 	.word	0x08004e0d
 8004bf8:	40003800 	.word	0x40003800
 8004bfc:	40003400 	.word	0x40003400

08004c00 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	881a      	ldrh	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	1c9a      	adds	r2, r3, #2
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10e      	bne.n	8004c90 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004c80:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ffb8 	bl	8004c00 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c90:	bf00      	nop
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	b292      	uxth	r2, r2
 8004cac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	1c9a      	adds	r2, r3, #2
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10e      	bne.n	8004cee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cde:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff ff93 	bl	8004c14 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b086      	sub	sp, #24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d13a      	bne.n	8004d88 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d109      	bne.n	8004d30 <I2S_IRQHandler+0x3a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b40      	cmp	r3, #64	; 0x40
 8004d28:	d102      	bne.n	8004d30 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff ffb4 	bl	8004c98 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b40      	cmp	r3, #64	; 0x40
 8004d38:	d126      	bne.n	8004d88 <I2S_IRQHandler+0x92>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b20      	cmp	r3, #32
 8004d46:	d11f      	bne.n	8004d88 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685a      	ldr	r2, [r3, #4]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d56:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d58:	2300      	movs	r3, #0
 8004d5a:	613b      	str	r3, [r7, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d7a:	f043 0202 	orr.w	r2, r3, #2
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff ff50 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d136      	bne.n	8004e02 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d109      	bne.n	8004db2 <I2S_IRQHandler+0xbc>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d102      	bne.n	8004db2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f7ff ff45 	bl	8004c3c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d122      	bne.n	8004e02 <I2S_IRQHandler+0x10c>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d11b      	bne.n	8004e02 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004dd8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004dda:	2300      	movs	r3, #0
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	f043 0204 	orr.w	r2, r3, #4
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff ff13 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e02:	bf00      	nop
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4aa2      	ldr	r2, [pc, #648]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d101      	bne.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e26:	4ba2      	ldr	r3, [pc, #648]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e28:	e001      	b.n	8004e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a9b      	ldr	r2, [pc, #620]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e44:	4b9a      	ldr	r3, [pc, #616]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e46:	e001      	b.n	8004e4c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e58:	d004      	beq.n	8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f040 8099 	bne.w	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d107      	bne.n	8004e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f925 	bl	80050c8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d107      	bne.n	8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d002      	beq.n	8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f9c8 	bl	8005228 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d13a      	bne.n	8004f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f003 0320 	and.w	r3, r3, #32
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d035      	beq.n	8004f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a7e      	ldr	r2, [pc, #504]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d101      	bne.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004eb6:	4b7e      	ldr	r3, [pc, #504]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eb8:	e001      	b.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4979      	ldr	r1, [pc, #484]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ec6:	428b      	cmp	r3, r1
 8004ec8:	d101      	bne.n	8004ece <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004eca:	4b79      	ldr	r3, [pc, #484]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ecc:	e001      	b.n	8004ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ed2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ed6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004ee8:	2300      	movs	r3, #0
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f043 0202 	orr.w	r2, r3, #2
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7ff fe88 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b08      	cmp	r3, #8
 8004f20:	f040 80be 	bne.w	80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f003 0320 	and.w	r3, r3, #32
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80b8 	beq.w	80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a59      	ldr	r2, [pc, #356]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d101      	bne.n	8004f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f4a:	4b59      	ldr	r3, [pc, #356]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f4c:	e001      	b.n	8004f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4954      	ldr	r1, [pc, #336]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f5a:	428b      	cmp	r3, r1
 8004f5c:	d101      	bne.n	8004f62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f5e:	4b54      	ldr	r3, [pc, #336]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f60:	e001      	b.n	8004f66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60bb      	str	r3, [r7, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	60bb      	str	r3, [r7, #8]
 8004f78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	f043 0204 	orr.w	r2, r3, #4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fe4a 	bl	8004c28 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f94:	e084      	b.n	80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d107      	bne.n	8004fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8be 	bl	800512c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004fb0:	69fb      	ldr	r3, [r7, #28]
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d107      	bne.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 f8fd 	bl	80051c4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d12f      	bne.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d02a      	beq.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2e      	ldr	r2, [pc, #184]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d101      	bne.n	8004ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ff8:	4b2d      	ldr	r3, [pc, #180]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ffa:	e001      	b.n	8005000 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005000:	685a      	ldr	r2, [r3, #4]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4929      	ldr	r1, [pc, #164]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005008:	428b      	cmp	r3, r1
 800500a:	d101      	bne.n	8005010 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800500c:	4b28      	ldr	r3, [pc, #160]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800500e:	e001      	b.n	8005014 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005010:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005014:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005018:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005026:	f043 0202 	orr.w	r2, r3, #2
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fdfa 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b08      	cmp	r3, #8
 800503c:	d131      	bne.n	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d02c      	beq.n	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d101      	bne.n	8005056 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005052:	4b17      	ldr	r3, [pc, #92]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005054:	e001      	b.n	800505a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4912      	ldr	r1, [pc, #72]	; (80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005062:	428b      	cmp	r3, r1
 8005064:	d101      	bne.n	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005068:	e001      	b.n	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800506a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005072:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685a      	ldr	r2, [r3, #4]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005082:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	f043 0204 	orr.w	r2, r3, #4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fdc5 	bl	8004c28 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	e000      	b.n	80050a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050a0:	bf00      	nop
}
 80050a2:	bf00      	nop
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	40003800 	.word	0x40003800
 80050b0:	40003400 	.word	0x40003400

080050b4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	1c99      	adds	r1, r3, #2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6251      	str	r1, [r2, #36]	; 0x24
 80050da:	881a      	ldrh	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	3b01      	subs	r3, #1
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d113      	bne.n	8005122 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005108:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff ffc9 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	1c99      	adds	r1, r3, #2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6251      	str	r1, [r2, #36]	; 0x24
 800513e:	8819      	ldrh	r1, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1d      	ldr	r2, [pc, #116]	; (80051bc <I2SEx_TxISR_I2SExt+0x90>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d101      	bne.n	800514e <I2SEx_TxISR_I2SExt+0x22>
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <I2SEx_TxISR_I2SExt+0x94>)
 800514c:	e001      	b.n	8005152 <I2SEx_TxISR_I2SExt+0x26>
 800514e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005152:	460a      	mov	r2, r1
 8005154:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d121      	bne.n	80051b2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a12      	ldr	r2, [pc, #72]	; (80051bc <I2SEx_TxISR_I2SExt+0x90>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d101      	bne.n	800517c <I2SEx_TxISR_I2SExt+0x50>
 8005178:	4b11      	ldr	r3, [pc, #68]	; (80051c0 <I2SEx_TxISR_I2SExt+0x94>)
 800517a:	e001      	b.n	8005180 <I2SEx_TxISR_I2SExt+0x54>
 800517c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	490d      	ldr	r1, [pc, #52]	; (80051bc <I2SEx_TxISR_I2SExt+0x90>)
 8005188:	428b      	cmp	r3, r1
 800518a:	d101      	bne.n	8005190 <I2SEx_TxISR_I2SExt+0x64>
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <I2SEx_TxISR_I2SExt+0x94>)
 800518e:	e001      	b.n	8005194 <I2SEx_TxISR_I2SExt+0x68>
 8005190:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005194:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005198:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800519e:	b29b      	uxth	r3, r3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d106      	bne.n	80051b2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff ff81 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40003800 	.word	0x40003800
 80051c0:	40003400 	.word	0x40003400

080051c4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68d8      	ldr	r0, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	1c99      	adds	r1, r3, #2
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051dc:	b282      	uxth	r2, r0
 80051de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d113      	bne.n	8005220 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685a      	ldr	r2, [r3, #4]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005206:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7ff ff4a 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a20      	ldr	r2, [pc, #128]	; (80052b8 <I2SEx_RxISR_I2SExt+0x90>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d101      	bne.n	800523e <I2SEx_RxISR_I2SExt+0x16>
 800523a:	4b20      	ldr	r3, [pc, #128]	; (80052bc <I2SEx_RxISR_I2SExt+0x94>)
 800523c:	e001      	b.n	8005242 <I2SEx_RxISR_I2SExt+0x1a>
 800523e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005242:	68d8      	ldr	r0, [r3, #12]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	1c99      	adds	r1, r3, #2
 800524a:	687a      	ldr	r2, [r7, #4]
 800524c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800524e:	b282      	uxth	r2, r0
 8005250:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d121      	bne.n	80052ae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a12      	ldr	r2, [pc, #72]	; (80052b8 <I2SEx_RxISR_I2SExt+0x90>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d101      	bne.n	8005278 <I2SEx_RxISR_I2SExt+0x50>
 8005274:	4b11      	ldr	r3, [pc, #68]	; (80052bc <I2SEx_RxISR_I2SExt+0x94>)
 8005276:	e001      	b.n	800527c <I2SEx_RxISR_I2SExt+0x54>
 8005278:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	490d      	ldr	r1, [pc, #52]	; (80052b8 <I2SEx_RxISR_I2SExt+0x90>)
 8005284:	428b      	cmp	r3, r1
 8005286:	d101      	bne.n	800528c <I2SEx_RxISR_I2SExt+0x64>
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <I2SEx_RxISR_I2SExt+0x94>)
 800528a:	e001      	b.n	8005290 <I2SEx_RxISR_I2SExt+0x68>
 800528c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005290:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005294:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d106      	bne.n	80052ae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff ff03 	bl	80050b4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40003800 	.word	0x40003800
 80052bc:	40003400 	.word	0x40003400

080052c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e264      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d075      	beq.n	80053ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052de:	4ba3      	ldr	r3, [pc, #652]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f003 030c 	and.w	r3, r3, #12
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d00c      	beq.n	8005304 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ea:	4ba0      	ldr	r3, [pc, #640]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d112      	bne.n	800531c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052f6:	4b9d      	ldr	r3, [pc, #628]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005302:	d10b      	bne.n	800531c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005304:	4b99      	ldr	r3, [pc, #612]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d05b      	beq.n	80053c8 <HAL_RCC_OscConfig+0x108>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d157      	bne.n	80053c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e23f      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005324:	d106      	bne.n	8005334 <HAL_RCC_OscConfig+0x74>
 8005326:	4b91      	ldr	r3, [pc, #580]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a90      	ldr	r2, [pc, #576]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800532c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e01d      	b.n	8005370 <HAL_RCC_OscConfig+0xb0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800533c:	d10c      	bne.n	8005358 <HAL_RCC_OscConfig+0x98>
 800533e:	4b8b      	ldr	r3, [pc, #556]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a8a      	ldr	r2, [pc, #552]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005348:	6013      	str	r3, [r2, #0]
 800534a:	4b88      	ldr	r3, [pc, #544]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a87      	ldr	r2, [pc, #540]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e00b      	b.n	8005370 <HAL_RCC_OscConfig+0xb0>
 8005358:	4b84      	ldr	r3, [pc, #528]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a83      	ldr	r2, [pc, #524]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	6013      	str	r3, [r2, #0]
 8005364:	4b81      	ldr	r3, [pc, #516]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a80      	ldr	r2, [pc, #512]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800536a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800536e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005378:	f7fc f818 	bl	80013ac <HAL_GetTick>
 800537c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800537e:	e008      	b.n	8005392 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005380:	f7fc f814 	bl	80013ac <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b64      	cmp	r3, #100	; 0x64
 800538c:	d901      	bls.n	8005392 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e204      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005392:	4b76      	ldr	r3, [pc, #472]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0f0      	beq.n	8005380 <HAL_RCC_OscConfig+0xc0>
 800539e:	e014      	b.n	80053ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a0:	f7fc f804 	bl	80013ac <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a8:	f7fc f800 	bl	80013ac <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e1f0      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ba:	4b6c      	ldr	r3, [pc, #432]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f0      	bne.n	80053a8 <HAL_RCC_OscConfig+0xe8>
 80053c6:	e000      	b.n	80053ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d063      	beq.n	800549e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053d6:	4b65      	ldr	r3, [pc, #404]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00b      	beq.n	80053fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053e2:	4b62      	ldr	r3, [pc, #392]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ea:	2b08      	cmp	r3, #8
 80053ec:	d11c      	bne.n	8005428 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053ee:	4b5f      	ldr	r3, [pc, #380]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d116      	bne.n	8005428 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fa:	4b5c      	ldr	r3, [pc, #368]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d005      	beq.n	8005412 <HAL_RCC_OscConfig+0x152>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d001      	beq.n	8005412 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e1c4      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005412:	4b56      	ldr	r3, [pc, #344]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4952      	ldr	r1, [pc, #328]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005422:	4313      	orrs	r3, r2
 8005424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005426:	e03a      	b.n	800549e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d020      	beq.n	8005472 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005430:	4b4f      	ldr	r3, [pc, #316]	; (8005570 <HAL_RCC_OscConfig+0x2b0>)
 8005432:	2201      	movs	r2, #1
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005436:	f7fb ffb9 	bl	80013ac <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543e:	f7fb ffb5 	bl	80013ac <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e1a5      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005450:	4b46      	ldr	r3, [pc, #280]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0f0      	beq.n	800543e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545c:	4b43      	ldr	r3, [pc, #268]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	4940      	ldr	r1, [pc, #256]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]
 8005470:	e015      	b.n	800549e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005472:	4b3f      	ldr	r3, [pc, #252]	; (8005570 <HAL_RCC_OscConfig+0x2b0>)
 8005474:	2200      	movs	r2, #0
 8005476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005478:	f7fb ff98 	bl	80013ac <HAL_GetTick>
 800547c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547e:	e008      	b.n	8005492 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005480:	f7fb ff94 	bl	80013ac <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e184      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005492:	4b36      	ldr	r3, [pc, #216]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d1f0      	bne.n	8005480 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d030      	beq.n	800550c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d016      	beq.n	80054e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b2:	4b30      	ldr	r3, [pc, #192]	; (8005574 <HAL_RCC_OscConfig+0x2b4>)
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b8:	f7fb ff78 	bl	80013ac <HAL_GetTick>
 80054bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054c0:	f7fb ff74 	bl	80013ac <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d901      	bls.n	80054d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e164      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d2:	4b26      	ldr	r3, [pc, #152]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 80054d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCC_OscConfig+0x200>
 80054de:	e015      	b.n	800550c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054e0:	4b24      	ldr	r3, [pc, #144]	; (8005574 <HAL_RCC_OscConfig+0x2b4>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054e6:	f7fb ff61 	bl	80013ac <HAL_GetTick>
 80054ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054ec:	e008      	b.n	8005500 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ee:	f7fb ff5d 	bl	80013ac <HAL_GetTick>
 80054f2:	4602      	mov	r2, r0
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	1ad3      	subs	r3, r2, r3
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d901      	bls.n	8005500 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e14d      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005500:	4b1a      	ldr	r3, [pc, #104]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005504:	f003 0302 	and.w	r3, r3, #2
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f0      	bne.n	80054ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0304 	and.w	r3, r3, #4
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80a0 	beq.w	800565a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800551e:	4b13      	ldr	r3, [pc, #76]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10f      	bne.n	800554a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	4b0f      	ldr	r3, [pc, #60]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005532:	4a0e      	ldr	r2, [pc, #56]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005538:	6413      	str	r3, [r2, #64]	; 0x40
 800553a:	4b0c      	ldr	r3, [pc, #48]	; (800556c <HAL_RCC_OscConfig+0x2ac>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005546:	2301      	movs	r3, #1
 8005548:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <HAL_RCC_OscConfig+0x2b8>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d121      	bne.n	800559a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005556:	4b08      	ldr	r3, [pc, #32]	; (8005578 <HAL_RCC_OscConfig+0x2b8>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a07      	ldr	r2, [pc, #28]	; (8005578 <HAL_RCC_OscConfig+0x2b8>)
 800555c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005560:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005562:	f7fb ff23 	bl	80013ac <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005568:	e011      	b.n	800558e <HAL_RCC_OscConfig+0x2ce>
 800556a:	bf00      	nop
 800556c:	40023800 	.word	0x40023800
 8005570:	42470000 	.word	0x42470000
 8005574:	42470e80 	.word	0x42470e80
 8005578:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557c:	f7fb ff16 	bl	80013ac <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e106      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800558e:	4b85      	ldr	r3, [pc, #532]	; (80057a4 <HAL_RCC_OscConfig+0x4e4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d106      	bne.n	80055b0 <HAL_RCC_OscConfig+0x2f0>
 80055a2:	4b81      	ldr	r3, [pc, #516]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a80      	ldr	r2, [pc, #512]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	e01c      	b.n	80055ea <HAL_RCC_OscConfig+0x32a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b05      	cmp	r3, #5
 80055b6:	d10c      	bne.n	80055d2 <HAL_RCC_OscConfig+0x312>
 80055b8:	4b7b      	ldr	r3, [pc, #492]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	4a7a      	ldr	r2, [pc, #488]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055be:	f043 0304 	orr.w	r3, r3, #4
 80055c2:	6713      	str	r3, [r2, #112]	; 0x70
 80055c4:	4b78      	ldr	r3, [pc, #480]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a77      	ldr	r2, [pc, #476]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
 80055d0:	e00b      	b.n	80055ea <HAL_RCC_OscConfig+0x32a>
 80055d2:	4b75      	ldr	r3, [pc, #468]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	4a74      	ldr	r2, [pc, #464]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	6713      	str	r3, [r2, #112]	; 0x70
 80055de:	4b72      	ldr	r3, [pc, #456]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e2:	4a71      	ldr	r2, [pc, #452]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80055e4:	f023 0304 	bic.w	r3, r3, #4
 80055e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d015      	beq.n	800561e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f2:	f7fb fedb 	bl	80013ac <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055f8:	e00a      	b.n	8005610 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055fa:	f7fb fed7 	bl	80013ac <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	f241 3288 	movw	r2, #5000	; 0x1388
 8005608:	4293      	cmp	r3, r2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e0c5      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005610:	4b65      	ldr	r3, [pc, #404]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ee      	beq.n	80055fa <HAL_RCC_OscConfig+0x33a>
 800561c:	e014      	b.n	8005648 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800561e:	f7fb fec5 	bl	80013ac <HAL_GetTick>
 8005622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005624:	e00a      	b.n	800563c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fb fec1 	bl	80013ac <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	; 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e0af      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800563c:	4b5a      	ldr	r3, [pc, #360]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ee      	bne.n	8005626 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d105      	bne.n	800565a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800564e:	4b56      	ldr	r3, [pc, #344]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	4a55      	ldr	r2, [pc, #340]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 8005654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f000 809b 	beq.w	800579a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005664:	4b50      	ldr	r3, [pc, #320]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 030c 	and.w	r3, r3, #12
 800566c:	2b08      	cmp	r3, #8
 800566e:	d05c      	beq.n	800572a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	699b      	ldr	r3, [r3, #24]
 8005674:	2b02      	cmp	r3, #2
 8005676:	d141      	bne.n	80056fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005678:	4b4c      	ldr	r3, [pc, #304]	; (80057ac <HAL_RCC_OscConfig+0x4ec>)
 800567a:	2200      	movs	r2, #0
 800567c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800567e:	f7fb fe95 	bl	80013ac <HAL_GetTick>
 8005682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005684:	e008      	b.n	8005698 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005686:	f7fb fe91 	bl	80013ac <HAL_GetTick>
 800568a:	4602      	mov	r2, r0
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d901      	bls.n	8005698 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e081      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005698:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1f0      	bne.n	8005686 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69da      	ldr	r2, [r3, #28]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a1b      	ldr	r3, [r3, #32]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b2:	019b      	lsls	r3, r3, #6
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	3b01      	subs	r3, #1
 80056be:	041b      	lsls	r3, r3, #16
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c6:	061b      	lsls	r3, r3, #24
 80056c8:	4937      	ldr	r1, [pc, #220]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80056ce:	4b37      	ldr	r3, [pc, #220]	; (80057ac <HAL_RCC_OscConfig+0x4ec>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d4:	f7fb fe6a 	bl	80013ac <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056dc:	f7fb fe66 	bl	80013ac <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e056      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ee:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x41c>
 80056fa:	e04e      	b.n	800579a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056fc:	4b2b      	ldr	r3, [pc, #172]	; (80057ac <HAL_RCC_OscConfig+0x4ec>)
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005702:	f7fb fe53 	bl	80013ac <HAL_GetTick>
 8005706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005708:	e008      	b.n	800571c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800570a:	f7fb fe4f 	bl	80013ac <HAL_GetTick>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	2b02      	cmp	r3, #2
 8005716:	d901      	bls.n	800571c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e03f      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800571c:	4b22      	ldr	r3, [pc, #136]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f0      	bne.n	800570a <HAL_RCC_OscConfig+0x44a>
 8005728:	e037      	b.n	800579a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e032      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005736:	4b1c      	ldr	r3, [pc, #112]	; (80057a8 <HAL_RCC_OscConfig+0x4e8>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d028      	beq.n	8005796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d121      	bne.n	8005796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d11a      	bne.n	8005796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005766:	4013      	ands	r3, r2
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800576c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800576e:	4293      	cmp	r3, r2
 8005770:	d111      	bne.n	8005796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	085b      	lsrs	r3, r3, #1
 800577e:	3b01      	subs	r3, #1
 8005780:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005782:	429a      	cmp	r2, r3
 8005784:	d107      	bne.n	8005796 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005792:	429a      	cmp	r2, r3
 8005794:	d001      	beq.n	800579a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e000      	b.n	800579c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40007000 	.word	0x40007000
 80057a8:	40023800 	.word	0x40023800
 80057ac:	42470060 	.word	0x42470060

080057b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	e0cc      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80057c4:	4b68      	ldr	r3, [pc, #416]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d90c      	bls.n	80057ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057d2:	4b65      	ldr	r3, [pc, #404]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	b2d2      	uxtb	r2, r2
 80057d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057da:	4b63      	ldr	r3, [pc, #396]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d001      	beq.n	80057ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0b8      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 0302 	and.w	r3, r3, #2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d020      	beq.n	800583a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005804:	4b59      	ldr	r3, [pc, #356]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	4a58      	ldr	r2, [pc, #352]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800580a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800580e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800581c:	4b53      	ldr	r3, [pc, #332]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	4a52      	ldr	r2, [pc, #328]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005822:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005826:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005828:	4b50      	ldr	r3, [pc, #320]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	494d      	ldr	r1, [pc, #308]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005836:	4313      	orrs	r3, r2
 8005838:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0301 	and.w	r3, r3, #1
 8005842:	2b00      	cmp	r3, #0
 8005844:	d044      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d107      	bne.n	800585e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d119      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e07f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	d003      	beq.n	800586e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800586a:	2b03      	cmp	r3, #3
 800586c:	d107      	bne.n	800587e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800586e:	4b3f      	ldr	r3, [pc, #252]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d109      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e06f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800587e:	4b3b      	ldr	r3, [pc, #236]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0302 	and.w	r3, r3, #2
 8005886:	2b00      	cmp	r3, #0
 8005888:	d101      	bne.n	800588e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e067      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800588e:	4b37      	ldr	r3, [pc, #220]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 0203 	bic.w	r2, r3, #3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	4934      	ldr	r1, [pc, #208]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800589c:	4313      	orrs	r3, r2
 800589e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058a0:	f7fb fd84 	bl	80013ac <HAL_GetTick>
 80058a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058a6:	e00a      	b.n	80058be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058a8:	f7fb fd80 	bl	80013ac <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e04f      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058be:	4b2b      	ldr	r3, [pc, #172]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 020c 	and.w	r2, r3, #12
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d1eb      	bne.n	80058a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058d0:	4b25      	ldr	r3, [pc, #148]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d20c      	bcs.n	80058f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b22      	ldr	r3, [pc, #136]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b20      	ldr	r3, [pc, #128]	; (8005968 <HAL_RCC_ClockConfig+0x1b8>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e032      	b.n	800595e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0304 	and.w	r3, r3, #4
 8005900:	2b00      	cmp	r3, #0
 8005902:	d008      	beq.n	8005916 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005904:	4b19      	ldr	r3, [pc, #100]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	68db      	ldr	r3, [r3, #12]
 8005910:	4916      	ldr	r1, [pc, #88]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0308 	and.w	r3, r3, #8
 800591e:	2b00      	cmp	r3, #0
 8005920:	d009      	beq.n	8005936 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	490e      	ldr	r1, [pc, #56]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	4313      	orrs	r3, r2
 8005934:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005936:	f000 f821 	bl	800597c <HAL_RCC_GetSysClockFreq>
 800593a:	4602      	mov	r2, r0
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_ClockConfig+0x1bc>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	091b      	lsrs	r3, r3, #4
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	490a      	ldr	r1, [pc, #40]	; (8005970 <HAL_RCC_ClockConfig+0x1c0>)
 8005948:	5ccb      	ldrb	r3, [r1, r3]
 800594a:	fa22 f303 	lsr.w	r3, r2, r3
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005952:	4b09      	ldr	r3, [pc, #36]	; (8005978 <HAL_RCC_ClockConfig+0x1c8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4618      	mov	r0, r3
 8005958:	f7fb fce4 	bl	8001324 <HAL_InitTick>

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40023c00 	.word	0x40023c00
 800596c:	40023800 	.word	0x40023800
 8005970:	08009c9c 	.word	0x08009c9c
 8005974:	2000001c 	.word	0x2000001c
 8005978:	20000020 	.word	0x20000020

0800597c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800597c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005984:	2300      	movs	r3, #0
 8005986:	607b      	str	r3, [r7, #4]
 8005988:	2300      	movs	r3, #0
 800598a:	60fb      	str	r3, [r7, #12]
 800598c:	2300      	movs	r3, #0
 800598e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005994:	4b67      	ldr	r3, [pc, #412]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 030c 	and.w	r3, r3, #12
 800599c:	2b08      	cmp	r3, #8
 800599e:	d00d      	beq.n	80059bc <HAL_RCC_GetSysClockFreq+0x40>
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	f200 80bd 	bhi.w	8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_RCC_GetSysClockFreq+0x34>
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d003      	beq.n	80059b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80059ae:	e0b7      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80059b0:	4b61      	ldr	r3, [pc, #388]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80059b2:	60bb      	str	r3, [r7, #8]
       break;
 80059b4:	e0b7      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80059b6:	4b61      	ldr	r3, [pc, #388]	; (8005b3c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80059b8:	60bb      	str	r3, [r7, #8]
      break;
 80059ba:	e0b4      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80059bc:	4b5d      	ldr	r3, [pc, #372]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059c6:	4b5b      	ldr	r3, [pc, #364]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d04d      	beq.n	8005a6e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059d2:	4b58      	ldr	r3, [pc, #352]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	099b      	lsrs	r3, r3, #6
 80059d8:	461a      	mov	r2, r3
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059e2:	f04f 0100 	mov.w	r1, #0
 80059e6:	ea02 0800 	and.w	r8, r2, r0
 80059ea:	ea03 0901 	and.w	r9, r3, r1
 80059ee:	4640      	mov	r0, r8
 80059f0:	4649      	mov	r1, r9
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	014b      	lsls	r3, r1, #5
 80059fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a00:	0142      	lsls	r2, r0, #5
 8005a02:	4610      	mov	r0, r2
 8005a04:	4619      	mov	r1, r3
 8005a06:	ebb0 0008 	subs.w	r0, r0, r8
 8005a0a:	eb61 0109 	sbc.w	r1, r1, r9
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	018b      	lsls	r3, r1, #6
 8005a18:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a1c:	0182      	lsls	r2, r0, #6
 8005a1e:	1a12      	subs	r2, r2, r0
 8005a20:	eb63 0301 	sbc.w	r3, r3, r1
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	00d9      	lsls	r1, r3, #3
 8005a2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a32:	00d0      	lsls	r0, r2, #3
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	eb12 0208 	adds.w	r2, r2, r8
 8005a3c:	eb43 0309 	adc.w	r3, r3, r9
 8005a40:	f04f 0000 	mov.w	r0, #0
 8005a44:	f04f 0100 	mov.w	r1, #0
 8005a48:	0259      	lsls	r1, r3, #9
 8005a4a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005a4e:	0250      	lsls	r0, r2, #9
 8005a50:	4602      	mov	r2, r0
 8005a52:	460b      	mov	r3, r1
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	f7fa fbb2 	bl	80001c8 <__aeabi_uldivmod>
 8005a64:	4602      	mov	r2, r0
 8005a66:	460b      	mov	r3, r1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	e04a      	b.n	8005b04 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a6e:	4b31      	ldr	r3, [pc, #196]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	099b      	lsrs	r3, r3, #6
 8005a74:	461a      	mov	r2, r3
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005a7e:	f04f 0100 	mov.w	r1, #0
 8005a82:	ea02 0400 	and.w	r4, r2, r0
 8005a86:	ea03 0501 	and.w	r5, r3, r1
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	4629      	mov	r1, r5
 8005a8e:	f04f 0200 	mov.w	r2, #0
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	014b      	lsls	r3, r1, #5
 8005a98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a9c:	0142      	lsls	r2, r0, #5
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	1b00      	subs	r0, r0, r4
 8005aa4:	eb61 0105 	sbc.w	r1, r1, r5
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	f04f 0300 	mov.w	r3, #0
 8005ab0:	018b      	lsls	r3, r1, #6
 8005ab2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005ab6:	0182      	lsls	r2, r0, #6
 8005ab8:	1a12      	subs	r2, r2, r0
 8005aba:	eb63 0301 	sbc.w	r3, r3, r1
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	00d9      	lsls	r1, r3, #3
 8005ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005acc:	00d0      	lsls	r0, r2, #3
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	1912      	adds	r2, r2, r4
 8005ad4:	eb45 0303 	adc.w	r3, r5, r3
 8005ad8:	f04f 0000 	mov.w	r0, #0
 8005adc:	f04f 0100 	mov.w	r1, #0
 8005ae0:	0299      	lsls	r1, r3, #10
 8005ae2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005ae6:	0290      	lsls	r0, r2, #10
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f04f 0300 	mov.w	r3, #0
 8005af8:	f7fa fb66 	bl	80001c8 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4613      	mov	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b04:	4b0b      	ldr	r3, [pc, #44]	; (8005b34 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	0c1b      	lsrs	r3, r3, #16
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	3301      	adds	r3, #1
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005b14:	68fa      	ldr	r2, [r7, #12]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	60bb      	str	r3, [r7, #8]
      break;
 8005b1e:	e002      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b20:	4b05      	ldr	r3, [pc, #20]	; (8005b38 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005b22:	60bb      	str	r3, [r7, #8]
      break;
 8005b24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b26:	68bb      	ldr	r3, [r7, #8]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005b32:	bf00      	nop
 8005b34:	40023800 	.word	0x40023800
 8005b38:	00f42400 	.word	0x00f42400
 8005b3c:	007a1200 	.word	0x007a1200

08005b40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b40:	b480      	push	{r7}
 8005b42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b44:	4b03      	ldr	r3, [pc, #12]	; (8005b54 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b46:	681b      	ldr	r3, [r3, #0]
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000001c 	.word	0x2000001c

08005b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005b5c:	f7ff fff0 	bl	8005b40 <HAL_RCC_GetHCLKFreq>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	0a9b      	lsrs	r3, r3, #10
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	4903      	ldr	r1, [pc, #12]	; (8005b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b6e:	5ccb      	ldrb	r3, [r1, r3]
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40023800 	.word	0x40023800
 8005b7c:	08009cac 	.word	0x08009cac

08005b80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d105      	bne.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d035      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ba8:	4b62      	ldr	r3, [pc, #392]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bae:	f7fb fbfd 	bl	80013ac <HAL_GetTick>
 8005bb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bb6:	f7fb fbf9 	bl	80013ac <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e0b0      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bc8:	4b5b      	ldr	r3, [pc, #364]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d1f0      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	019a      	lsls	r2, r3, #6
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	071b      	lsls	r3, r3, #28
 8005be0:	4955      	ldr	r1, [pc, #340]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005be8:	4b52      	ldr	r3, [pc, #328]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005bee:	f7fb fbdd 	bl	80013ac <HAL_GetTick>
 8005bf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bf6:	f7fb fbd9 	bl	80013ac <HAL_GetTick>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e090      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c08:	4b4b      	ldr	r3, [pc, #300]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f003 0302 	and.w	r3, r3, #2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8083 	beq.w	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
 8005c26:	4b44      	ldr	r3, [pc, #272]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	4a43      	ldr	r2, [pc, #268]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c30:	6413      	str	r3, [r2, #64]	; 0x40
 8005c32:	4b41      	ldr	r3, [pc, #260]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3a:	60fb      	str	r3, [r7, #12]
 8005c3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c3e:	4b3f      	ldr	r3, [pc, #252]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a3e      	ldr	r2, [pc, #248]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c4a:	f7fb fbaf 	bl	80013ac <HAL_GetTick>
 8005c4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c50:	e008      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c52:	f7fb fbab 	bl	80013ac <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b02      	cmp	r3, #2
 8005c5e:	d901      	bls.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e062      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c64:	4b35      	ldr	r3, [pc, #212]	; (8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d0f0      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c70:	4b31      	ldr	r3, [pc, #196]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d02f      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d028      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c8e:	4b2a      	ldr	r3, [pc, #168]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c98:	4b29      	ldr	r3, [pc, #164]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9e:	4b28      	ldr	r3, [pc, #160]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ca4:	4a24      	ldr	r2, [pc, #144]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005caa:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d114      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005cb6:	f7fb fb79 	bl	80013ac <HAL_GetTick>
 8005cba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cbc:	e00a      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cbe:	f7fb fb75 	bl	80013ac <HAL_GetTick>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e02a      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cd4:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0ee      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cec:	d10d      	bne.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005cee:	4b12      	ldr	r3, [pc, #72]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d02:	490d      	ldr	r1, [pc, #52]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	608b      	str	r3, [r1, #8]
 8005d08:	e005      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005d0a:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d14:	6093      	str	r3, [r2, #8]
 8005d16:	4b08      	ldr	r3, [pc, #32]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d22:	4905      	ldr	r1, [pc, #20]	; (8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3718      	adds	r7, #24
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	42470068 	.word	0x42470068
 8005d38:	40023800 	.word	0x40023800
 8005d3c:	40007000 	.word	0x40007000
 8005d40:	42470e40 	.word	0x42470e40

08005d44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b087      	sub	sp, #28
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005d54:	2300      	movs	r3, #0
 8005d56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d13e      	bne.n	8005de0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d62:	4b23      	ldr	r3, [pc, #140]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d12f      	bne.n	8005dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d78:	4b1e      	ldr	r3, [pc, #120]	; (8005df4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d7a:	617b      	str	r3, [r7, #20]
          break;
 8005d7c:	e02f      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d8a:	d108      	bne.n	8005d9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d8c:	4b18      	ldr	r3, [pc, #96]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d94:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	e007      	b.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d9e:	4b14      	ldr	r3, [pc, #80]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005da6:	4a15      	ldr	r2, [pc, #84]	; (8005dfc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005dae:	4b10      	ldr	r3, [pc, #64]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db4:	099b      	lsrs	r3, r3, #6
 8005db6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005dc2:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc8:	0f1b      	lsrs	r3, r3, #28
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	68ba      	ldr	r2, [r7, #8]
 8005dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
          break;
 8005dd6:	e002      	b.n	8005dde <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	617b      	str	r3, [r7, #20]
          break;
 8005ddc:	bf00      	nop
        }
      }
      break;
 8005dde:	bf00      	nop
    }
  }
  return frequency;
 8005de0:	697b      	ldr	r3, [r7, #20]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40023800 	.word	0x40023800
 8005df4:	00bb8000 	.word	0x00bb8000
 8005df8:	007a1200 	.word	0x007a1200
 8005dfc:	00f42400 	.word	0x00f42400

08005e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e041      	b.n	8005e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fb f95a 	bl	80010e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f000 fa96 	bl	8006370 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d001      	beq.n	8005eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e04e      	b.n	8005f56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2202      	movs	r2, #2
 8005ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68da      	ldr	r2, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 0201 	orr.w	r2, r2, #1
 8005ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a23      	ldr	r2, [pc, #140]	; (8005f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d01d      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1e      	ldr	r2, [pc, #120]	; (8005f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1c      	ldr	r2, [pc, #112]	; (8005f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIM_Base_Start_IT+0x80>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d111      	bne.n	8005f44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 0307 	and.w	r3, r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d010      	beq.n	8005f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f042 0201 	orr.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	e007      	b.n	8005f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0201 	orr.w	r2, r2, #1
 8005f52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40010000 	.word	0x40010000
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40010400 	.word	0x40010400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40001800 	.word	0x40001800

08005f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d122      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d11b      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f06f 0202 	mvn.w	r2, #2
 8005fac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	f003 0303 	and.w	r3, r3, #3
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d003      	beq.n	8005fca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9b5 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 8005fc8:	e005      	b.n	8005fd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f9a7 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f9b8 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0304 	and.w	r3, r3, #4
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d122      	bne.n	8006030 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0304 	and.w	r3, r3, #4
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d11b      	bne.n	8006030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0204 	mvn.w	r2, #4
 8006000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2202      	movs	r2, #2
 8006006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f98b 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 800601c:	e005      	b.n	800602a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 f97d 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f98e 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b08      	cmp	r3, #8
 800603c:	d122      	bne.n	8006084 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b08      	cmp	r3, #8
 800604a:	d11b      	bne.n	8006084 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f06f 0208 	mvn.w	r2, #8
 8006054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2204      	movs	r2, #4
 800605a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	f003 0303 	and.w	r3, r3, #3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d003      	beq.n	8006072 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f961 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 8006070:	e005      	b.n	800607e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f953 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f964 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2200      	movs	r2, #0
 8006082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0310 	and.w	r3, r3, #16
 800608e:	2b10      	cmp	r3, #16
 8006090:	d122      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f003 0310 	and.w	r3, r3, #16
 800609c:	2b10      	cmp	r3, #16
 800609e:	d11b      	bne.n	80060d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f06f 0210 	mvn.w	r2, #16
 80060a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2208      	movs	r2, #8
 80060ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d003      	beq.n	80060c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f937 	bl	8006332 <HAL_TIM_IC_CaptureCallback>
 80060c4:	e005      	b.n	80060d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f929 	bl	800631e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f93a 	bl	8006346 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d10e      	bne.n	8006104 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0301 	and.w	r3, r3, #1
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0201 	mvn.w	r2, #1
 80060fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f7fa fa84 	bl	800060c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610e:	2b80      	cmp	r3, #128	; 0x80
 8006110:	d10e      	bne.n	8006130 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611c:	2b80      	cmp	r3, #128	; 0x80
 800611e:	d107      	bne.n	8006130 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fae0 	bl	80066f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d10e      	bne.n	800615c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006148:	2b40      	cmp	r3, #64	; 0x40
 800614a:	d107      	bne.n	800615c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f8ff 	bl	800635a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0320 	and.w	r3, r3, #32
 8006166:	2b20      	cmp	r3, #32
 8006168:	d10e      	bne.n	8006188 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0320 	and.w	r3, r3, #32
 8006174:	2b20      	cmp	r3, #32
 8006176:	d107      	bne.n	8006188 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0220 	mvn.w	r2, #32
 8006180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 faaa 	bl	80066dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006188:	bf00      	nop
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d101      	bne.n	80061ac <HAL_TIM_ConfigClockSource+0x1c>
 80061a8:	2302      	movs	r3, #2
 80061aa:	e0b4      	b.n	8006316 <HAL_TIM_ConfigClockSource+0x186>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2202      	movs	r2, #2
 80061b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e4:	d03e      	beq.n	8006264 <HAL_TIM_ConfigClockSource+0xd4>
 80061e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ea:	f200 8087 	bhi.w	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f2:	f000 8086 	beq.w	8006302 <HAL_TIM_ConfigClockSource+0x172>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	d87f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 80061fc:	2b70      	cmp	r3, #112	; 0x70
 80061fe:	d01a      	beq.n	8006236 <HAL_TIM_ConfigClockSource+0xa6>
 8006200:	2b70      	cmp	r3, #112	; 0x70
 8006202:	d87b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006204:	2b60      	cmp	r3, #96	; 0x60
 8006206:	d050      	beq.n	80062aa <HAL_TIM_ConfigClockSource+0x11a>
 8006208:	2b60      	cmp	r3, #96	; 0x60
 800620a:	d877      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800620c:	2b50      	cmp	r3, #80	; 0x50
 800620e:	d03c      	beq.n	800628a <HAL_TIM_ConfigClockSource+0xfa>
 8006210:	2b50      	cmp	r3, #80	; 0x50
 8006212:	d873      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006214:	2b40      	cmp	r3, #64	; 0x40
 8006216:	d058      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x13a>
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d86f      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d064      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006220:	2b30      	cmp	r3, #48	; 0x30
 8006222:	d86b      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 8006224:	2b20      	cmp	r3, #32
 8006226:	d060      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006228:	2b20      	cmp	r3, #32
 800622a:	d867      	bhi.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d05c      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006230:	2b10      	cmp	r3, #16
 8006232:	d05a      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x15a>
 8006234:	e062      	b.n	80062fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	6899      	ldr	r1, [r3, #8]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f000 f9ad 	bl	80065a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006258:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]
      break;
 8006262:	e04f      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	6899      	ldr	r1, [r3, #8]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f000 f996 	bl	80065a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006286:	609a      	str	r2, [r3, #8]
      break;
 8006288:	e03c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6818      	ldr	r0, [r3, #0]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	6859      	ldr	r1, [r3, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	461a      	mov	r2, r3
 8006298:	f000 f90a 	bl	80064b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	2150      	movs	r1, #80	; 0x50
 80062a2:	4618      	mov	r0, r3
 80062a4:	f000 f963 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 80062a8:	e02c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f000 f929 	bl	800650e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2160      	movs	r1, #96	; 0x60
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 f953 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 80062c8:	e01c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 f8ea 	bl	80064b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2140      	movs	r1, #64	; 0x40
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f943 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 80062e8:	e00c      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4619      	mov	r1, r3
 80062f4:	4610      	mov	r0, r2
 80062f6:	f000 f93a 	bl	800656e <TIM_ITRx_SetConfig>
      break;
 80062fa:	e003      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006300:	e000      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006302:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr

08006346 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800634e:	bf00      	nop
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
	...

08006370 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a40      	ldr	r2, [pc, #256]	; (8006484 <TIM_Base_SetConfig+0x114>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d013      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d00f      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3d      	ldr	r2, [pc, #244]	; (8006488 <TIM_Base_SetConfig+0x118>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d00b      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3c      	ldr	r2, [pc, #240]	; (800648c <TIM_Base_SetConfig+0x11c>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d007      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a3b      	ldr	r2, [pc, #236]	; (8006490 <TIM_Base_SetConfig+0x120>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d003      	beq.n	80063b0 <TIM_Base_SetConfig+0x40>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a3a      	ldr	r2, [pc, #232]	; (8006494 <TIM_Base_SetConfig+0x124>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d108      	bne.n	80063c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <TIM_Base_SetConfig+0x114>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d02b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d0:	d027      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2c      	ldr	r2, [pc, #176]	; (8006488 <TIM_Base_SetConfig+0x118>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d023      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2b      	ldr	r2, [pc, #172]	; (800648c <TIM_Base_SetConfig+0x11c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01f      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2a      	ldr	r2, [pc, #168]	; (8006490 <TIM_Base_SetConfig+0x120>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d01b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a29      	ldr	r2, [pc, #164]	; (8006494 <TIM_Base_SetConfig+0x124>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d017      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a28      	ldr	r2, [pc, #160]	; (8006498 <TIM_Base_SetConfig+0x128>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a27      	ldr	r2, [pc, #156]	; (800649c <TIM_Base_SetConfig+0x12c>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00f      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a26      	ldr	r2, [pc, #152]	; (80064a0 <TIM_Base_SetConfig+0x130>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d00b      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a25      	ldr	r2, [pc, #148]	; (80064a4 <TIM_Base_SetConfig+0x134>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d007      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a24      	ldr	r2, [pc, #144]	; (80064a8 <TIM_Base_SetConfig+0x138>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d003      	beq.n	8006422 <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a23      	ldr	r2, [pc, #140]	; (80064ac <TIM_Base_SetConfig+0x13c>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	68fa      	ldr	r2, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	695b      	ldr	r3, [r3, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a0a      	ldr	r2, [pc, #40]	; (8006484 <TIM_Base_SetConfig+0x114>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d003      	beq.n	8006468 <TIM_Base_SetConfig+0xf8>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a0c      	ldr	r2, [pc, #48]	; (8006494 <TIM_Base_SetConfig+0x124>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d103      	bne.n	8006470 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	615a      	str	r2, [r3, #20]
}
 8006476:	bf00      	nop
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	40000400 	.word	0x40000400
 800648c:	40000800 	.word	0x40000800
 8006490:	40000c00 	.word	0x40000c00
 8006494:	40010400 	.word	0x40010400
 8006498:	40014000 	.word	0x40014000
 800649c:	40014400 	.word	0x40014400
 80064a0:	40014800 	.word	0x40014800
 80064a4:	40001800 	.word	0x40001800
 80064a8:	40001c00 	.word	0x40001c00
 80064ac:	40002000 	.word	0x40002000

080064b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b087      	sub	sp, #28
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	6a1b      	ldr	r3, [r3, #32]
 80064c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	f023 0201 	bic.w	r2, r3, #1
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	011b      	lsls	r3, r3, #4
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 030a 	bic.w	r3, r3, #10
 80064ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	621a      	str	r2, [r3, #32]
}
 8006502:	bf00      	nop
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	f023 0210 	bic.w	r2, r3, #16
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6a1b      	ldr	r3, [r3, #32]
 8006530:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006538:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	031b      	lsls	r3, r3, #12
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	4313      	orrs	r3, r2
 8006542:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800654a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	621a      	str	r2, [r3, #32]
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800656e:	b480      	push	{r7}
 8006570:	b085      	sub	sp, #20
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006584:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006586:	683a      	ldr	r2, [r7, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4313      	orrs	r3, r2
 800658c:	f043 0307 	orr.w	r3, r3, #7
 8006590:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	609a      	str	r2, [r3, #8]
}
 8006598:	bf00      	nop
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b087      	sub	sp, #28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	021a      	lsls	r2, r3, #8
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	697a      	ldr	r2, [r7, #20]
 80065d6:	609a      	str	r2, [r3, #8]
}
 80065d8:	bf00      	nop
 80065da:	371c      	adds	r7, #28
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d101      	bne.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065f8:	2302      	movs	r3, #2
 80065fa:	e05a      	b.n	80066b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2202      	movs	r2, #2
 8006608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006622:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4313      	orrs	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a21      	ldr	r2, [pc, #132]	; (80066c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d022      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006648:	d01d      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d018      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1b      	ldr	r2, [pc, #108]	; (80066c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d013      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a1a      	ldr	r2, [pc, #104]	; (80066cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d00e      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a18      	ldr	r2, [pc, #96]	; (80066d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d009      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a17      	ldr	r2, [pc, #92]	; (80066d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d004      	beq.n	8006686 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a15      	ldr	r2, [pc, #84]	; (80066d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d10c      	bne.n	80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800668c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	4313      	orrs	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40010400 	.word	0x40010400
 80066d4:	40014000 	.word	0x40014000
 80066d8:	40001800 	.word	0x40001800

080066dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006704:	b084      	sub	sp, #16
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
 800670e:	f107 001c 	add.w	r0, r7, #28
 8006712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006718:	2b01      	cmp	r3, #1
 800671a:	d122      	bne.n	8006762 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006746:	2b01      	cmp	r3, #1
 8006748:	d105      	bne.n	8006756 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9a0 	bl	8006a9c <USB_CoreReset>
 800675c:	4603      	mov	r3, r0
 800675e:	73fb      	strb	r3, [r7, #15]
 8006760:	e01a      	b.n	8006798 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 f994 	bl	8006a9c <USB_CoreReset>
 8006774:	4603      	mov	r3, r0
 8006776:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d106      	bne.n	800678c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006782:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	639a      	str	r2, [r3, #56]	; 0x38
 800678a:	e005      	b.n	8006798 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006790:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10b      	bne.n	80067b6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f043 0206 	orr.w	r2, r3, #6
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f043 0220 	orr.w	r2, r3, #32
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067c2:	b004      	add	sp, #16
 80067c4:	4770      	bx	lr

080067c6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067c6:	b480      	push	{r7}
 80067c8:	b083      	sub	sp, #12
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f043 0201 	orr.w	r2, r3, #1
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f023 0201 	bic.w	r2, r3, #1
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b084      	sub	sp, #16
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]
 8006812:	460b      	mov	r3, r1
 8006814:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006826:	78fb      	ldrb	r3, [r7, #3]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d115      	bne.n	8006858 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006838:	2001      	movs	r0, #1
 800683a:	f7fa fdc3 	bl	80013c4 <HAL_Delay>
      ms++;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	3301      	adds	r3, #1
 8006842:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f000 f91a 	bl	8006a7e <USB_GetMode>
 800684a:	4603      	mov	r3, r0
 800684c:	2b01      	cmp	r3, #1
 800684e:	d01e      	beq.n	800688e <USB_SetCurrentMode+0x84>
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2b31      	cmp	r3, #49	; 0x31
 8006854:	d9f0      	bls.n	8006838 <USB_SetCurrentMode+0x2e>
 8006856:	e01a      	b.n	800688e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006858:	78fb      	ldrb	r3, [r7, #3]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d115      	bne.n	800688a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800686a:	2001      	movs	r0, #1
 800686c:	f7fa fdaa 	bl	80013c4 <HAL_Delay>
      ms++;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	3301      	adds	r3, #1
 8006874:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f901 	bl	8006a7e <USB_GetMode>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <USB_SetCurrentMode+0x84>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2b31      	cmp	r3, #49	; 0x31
 8006886:	d9f0      	bls.n	800686a <USB_SetCurrentMode+0x60>
 8006888:	e001      	b.n	800688e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e005      	b.n	800689a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b32      	cmp	r3, #50	; 0x32
 8006892:	d101      	bne.n	8006898 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e000      	b.n	800689a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006898:	2300      	movs	r3, #0
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
	...

080068a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b085      	sub	sp, #20
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	019b      	lsls	r3, r3, #6
 80068b6:	f043 0220 	orr.w	r2, r3, #32
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <USB_FlushTxFifo+0x44>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e006      	b.n	80068dc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0320 	and.w	r3, r3, #32
 80068d6:	2b20      	cmp	r3, #32
 80068d8:	d0f1      	beq.n	80068be <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3714      	adds	r7, #20
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr
 80068e8:	00030d40 	.word	0x00030d40

080068ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2210      	movs	r2, #16
 80068fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3301      	adds	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	4a08      	ldr	r2, [pc, #32]	; (8006928 <USB_FlushRxFifo+0x3c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d901      	bls.n	800690e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e006      	b.n	800691c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0310 	and.w	r3, r3, #16
 8006916:	2b10      	cmp	r3, #16
 8006918:	d0f1      	beq.n	80068fe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800691a:	2300      	movs	r3, #0
}
 800691c:	4618      	mov	r0, r3
 800691e:	3714      	adds	r7, #20
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr
 8006928:	00030d40 	.word	0x00030d40

0800692c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800692c:	b480      	push	{r7}
 800692e:	b089      	sub	sp, #36	; 0x24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	460b      	mov	r3, r1
 800693c:	71fb      	strb	r3, [r7, #7]
 800693e:	4613      	mov	r3, r2
 8006940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800694a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d123      	bne.n	800699a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006952:	88bb      	ldrh	r3, [r7, #4]
 8006954:	3303      	adds	r3, #3
 8006956:	089b      	lsrs	r3, r3, #2
 8006958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e018      	b.n	8006992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	031a      	lsls	r2, r3, #12
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800696c:	461a      	mov	r2, r3
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	3301      	adds	r3, #1
 8006978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	3301      	adds	r3, #1
 800697e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	3301      	adds	r3, #1
 800698a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	3301      	adds	r3, #1
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	429a      	cmp	r2, r3
 8006998:	d3e2      	bcc.n	8006960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3724      	adds	r7, #36	; 0x24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b08b      	sub	sp, #44	; 0x2c
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	4613      	mov	r3, r2
 80069b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	089b      	lsrs	r3, r3, #2
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	f003 0303 	and.w	r3, r3, #3
 80069cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069ce:	2300      	movs	r3, #0
 80069d0:	623b      	str	r3, [r7, #32]
 80069d2:	e014      	b.n	80069fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	601a      	str	r2, [r3, #0]
    pDest++;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	3301      	adds	r3, #1
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e8:	3301      	adds	r3, #1
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	3301      	adds	r3, #1
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	3301      	adds	r3, #1
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	3301      	adds	r3, #1
 80069fc:	623b      	str	r3, [r7, #32]
 80069fe:	6a3a      	ldr	r2, [r7, #32]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d3e6      	bcc.n	80069d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a06:	8bfb      	ldrh	r3, [r7, #30]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01e      	beq.n	8006a4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a16:	461a      	mov	r2, r3
 8006a18:	f107 0310 	add.w	r3, r7, #16
 8006a1c:	6812      	ldr	r2, [r2, #0]
 8006a1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	00db      	lsls	r3, r3, #3
 8006a28:	fa22 f303 	lsr.w	r3, r2, r3
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	701a      	strb	r2, [r3, #0]
      i++;
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	3301      	adds	r3, #1
 8006a36:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a3e:	8bfb      	ldrh	r3, [r7, #30]
 8006a40:	3b01      	subs	r3, #1
 8006a42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a44:	8bfb      	ldrh	r3, [r7, #30]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1ea      	bne.n	8006a20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	372c      	adds	r7, #44	; 0x2c
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	68fa      	ldr	r2, [r7, #12]
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a70:	68fb      	ldr	r3, [r7, #12]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	695b      	ldr	r3, [r3, #20]
 8006a8a:	f003 0301 	and.w	r3, r3, #1
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
	...

08006a9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	3301      	adds	r3, #1
 8006aac:	60fb      	str	r3, [r7, #12]
 8006aae:	4a13      	ldr	r2, [pc, #76]	; (8006afc <USB_CoreReset+0x60>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d901      	bls.n	8006ab8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e01a      	b.n	8006aee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	daf3      	bge.n	8006aa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	f043 0201 	orr.w	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	4a09      	ldr	r2, [pc, #36]	; (8006afc <USB_CoreReset+0x60>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d901      	bls.n	8006ae0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e006      	b.n	8006aee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d0f1      	beq.n	8006ad0 <USB_CoreReset+0x34>

  return HAL_OK;
 8006aec:	2300      	movs	r3, #0
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	00030d40 	.word	0x00030d40

08006b00 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b00:	b084      	sub	sp, #16
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b084      	sub	sp, #16
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	f107 001c 	add.w	r0, r7, #28
 8006b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d018      	beq.n	8006b84 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d10a      	bne.n	8006b6e <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b66:	f043 0304 	orr.w	r3, r3, #4
 8006b6a:	6013      	str	r3, [r2, #0]
 8006b6c:	e014      	b.n	8006b98 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b7c:	f023 0304 	bic.w	r3, r3, #4
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	e009      	b.n	8006b98 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006b92:	f023 0304 	bic.w	r3, r3, #4
 8006b96:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8006b98:	2110      	movs	r1, #16
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7ff fe82 	bl	80068a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff fea3 	bl	80068ec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e015      	b.n	8006bd8 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb8:	461a      	mov	r2, r3
 8006bba:	f04f 33ff 	mov.w	r3, #4294967295
 8006bbe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bcc:	461a      	mov	r2, r3
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	60fb      	str	r3, [r7, #12]
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d3e5      	bcc.n	8006bac <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bec:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d00b      	beq.n	8006c12 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c00:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a13      	ldr	r2, [pc, #76]	; (8006c54 <USB_HostInit+0x154>)
 8006c06:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	4a13      	ldr	r2, [pc, #76]	; (8006c58 <USB_HostInit+0x158>)
 8006c0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006c10:	e009      	b.n	8006c26 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2280      	movs	r2, #128	; 0x80
 8006c16:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	4a10      	ldr	r2, [pc, #64]	; (8006c5c <USB_HostInit+0x15c>)
 8006c1c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a0f      	ldr	r2, [pc, #60]	; (8006c60 <USB_HostInit+0x160>)
 8006c22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d105      	bne.n	8006c38 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f043 0210 	orr.w	r2, r3, #16
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699a      	ldr	r2, [r3, #24]
 8006c3c:	4b09      	ldr	r3, [pc, #36]	; (8006c64 <USB_HostInit+0x164>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3710      	adds	r7, #16
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c50:	b004      	add	sp, #16
 8006c52:	4770      	bx	lr
 8006c54:	01000200 	.word	0x01000200
 8006c58:	00e00300 	.word	0x00e00300
 8006c5c:	00600080 	.word	0x00600080
 8006c60:	004000e0 	.word	0x004000e0
 8006c64:	a3200008 	.word	0xa3200008

08006c68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d107      	bne.n	8006cba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006cb6:	6053      	str	r3, [r2, #4]
 8006cb8:	e009      	b.n	8006cce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d106      	bne.n	8006cce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ccc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006cfc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d0a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006d0c:	2064      	movs	r0, #100	; 0x64
 8006d0e:	f7fa fb59 	bl	80013c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d1e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006d20:	200a      	movs	r0, #10
 8006d22:	f7fa fb4f 	bl	80013c4 <HAL_Delay>

  return HAL_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	460b      	mov	r3, r1
 8006d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d54:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d109      	bne.n	8006d74 <USB_DriveVbus+0x44>
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d106      	bne.n	8006d74 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d72:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d7e:	d109      	bne.n	8006d94 <USB_DriveVbus+0x64>
 8006d80:	78fb      	ldrb	r3, [r7, #3]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d92:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b085      	sub	sp, #20
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	0c5b      	lsrs	r3, r3, #17
 8006dc0:	f003 0303 	and.w	r3, r3, #3
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	b29b      	uxth	r3, r3
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
	...

08006df4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	461a      	mov	r2, r3
 8006e02:	4603      	mov	r3, r0
 8006e04:	70fb      	strb	r3, [r7, #3]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70bb      	strb	r3, [r7, #2]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e22:	461a      	mov	r2, r3
 8006e24:	f04f 33ff 	mov.w	r3, #4294967295
 8006e28:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006e2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d87e      	bhi.n	8006f30 <USB_HC_Init+0x13c>
 8006e32:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <USB_HC_Init+0x44>)
 8006e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e38:	08006e49 	.word	0x08006e49
 8006e3c:	08006ef3 	.word	0x08006ef3
 8006e40:	08006e49 	.word	0x08006e49
 8006e44:	08006eb5 	.word	0x08006eb5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e54:	461a      	mov	r2, r3
 8006e56:	f240 439d 	movw	r3, #1181	; 0x49d
 8006e5a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006e5c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	da10      	bge.n	8006e86 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	015a      	lsls	r2, r3, #5
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	78fa      	ldrb	r2, [r7, #3]
 8006e74:	0151      	lsls	r1, r2, #5
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	440a      	add	r2, r1
 8006e7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e82:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006e84:	e057      	b.n	8006f36 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d051      	beq.n	8006f36 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	015a      	lsls	r2, r3, #5
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	4413      	add	r3, r2
 8006e9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	78fa      	ldrb	r2, [r7, #3]
 8006ea2:	0151      	lsls	r1, r2, #5
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	440a      	add	r2, r1
 8006ea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006eb0:	60d3      	str	r3, [r2, #12]
      break;
 8006eb2:	e040      	b.n	8006f36 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006eb4:	78fb      	ldrb	r3, [r7, #3]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	f240 639d 	movw	r3, #1693	; 0x69d
 8006ec6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006ec8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	da34      	bge.n	8006f3a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	015a      	lsls	r2, r3, #5
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	78fa      	ldrb	r2, [r7, #3]
 8006ee0:	0151      	lsls	r1, r2, #5
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	440a      	add	r2, r1
 8006ee6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eee:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ef0:	e023      	b.n	8006f3a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ef2:	78fb      	ldrb	r3, [r7, #3]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006efe:	461a      	mov	r2, r3
 8006f00:	f240 2325 	movw	r3, #549	; 0x225
 8006f04:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006f06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da17      	bge.n	8006f3e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006f0e:	78fb      	ldrb	r3, [r7, #3]
 8006f10:	015a      	lsls	r2, r3, #5
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4413      	add	r3, r2
 8006f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	78fa      	ldrb	r2, [r7, #3]
 8006f1e:	0151      	lsls	r1, r2, #5
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	440a      	add	r2, r1
 8006f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f28:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006f2c:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006f2e:	e006      	b.n	8006f3e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	77fb      	strb	r3, [r7, #31]
      break;
 8006f34:	e004      	b.n	8006f40 <USB_HC_Init+0x14c>
      break;
 8006f36:	bf00      	nop
 8006f38:	e002      	b.n	8006f40 <USB_HC_Init+0x14c>
      break;
 8006f3a:	bf00      	nop
 8006f3c:	e000      	b.n	8006f40 <USB_HC_Init+0x14c>
      break;
 8006f3e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f46:	699a      	ldr	r2, [r3, #24]
 8006f48:	78fb      	ldrb	r3, [r7, #3]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	2101      	movs	r1, #1
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	6939      	ldr	r1, [r7, #16]
 8006f56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f6a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	da03      	bge.n	8006f7a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	e001      	b.n	8006f7e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7ff ff0f 	bl	8006da2 <USB_GetHostSpeed>
 8006f84:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006f86:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d106      	bne.n	8006f9c <USB_HC_Init+0x1a8>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d003      	beq.n	8006f9c <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f98:	617b      	str	r3, [r7, #20]
 8006f9a:	e001      	b.n	8006fa0 <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fa0:	787b      	ldrb	r3, [r7, #1]
 8006fa2:	059b      	lsls	r3, r3, #22
 8006fa4:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006fa8:	78bb      	ldrb	r3, [r7, #2]
 8006faa:	02db      	lsls	r3, r3, #11
 8006fac:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fb0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006fb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fb6:	049b      	lsls	r3, r3, #18
 8006fb8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006fbc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006fbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006fc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006fc4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	0159      	lsls	r1, r3, #5
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	440b      	add	r3, r1
 8006fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006fdc:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8006fde:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d10f      	bne.n	8007006 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	78fa      	ldrb	r2, [r7, #3]
 8006ff6:	0151      	lsls	r1, r2, #5
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	440a      	add	r2, r1
 8006ffc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007004:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007006:	7ffb      	ldrb	r3, [r7, #31]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3720      	adds	r7, #32
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08c      	sub	sp, #48	; 0x30
 8007014:	af02      	add	r7, sp, #8
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	785b      	ldrb	r3, [r3, #1]
 8007026:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007028:	f44f 7380 	mov.w	r3, #256	; 0x100
 800702c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	2b00      	cmp	r3, #0
 8007038:	d02d      	beq.n	8007096 <USB_HC_StartXfer+0x86>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	791b      	ldrb	r3, [r3, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d129      	bne.n	8007096 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007042:	79fb      	ldrb	r3, [r7, #7]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d117      	bne.n	8007078 <USB_HC_StartXfer+0x68>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	79db      	ldrb	r3, [r3, #7]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <USB_HC_StartXfer+0x48>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	79db      	ldrb	r3, [r3, #7]
 8007054:	2b02      	cmp	r3, #2
 8007056:	d10f      	bne.n	8007078 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	6a3b      	ldr	r3, [r7, #32]
 800705e:	4413      	add	r3, r2
 8007060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	6a3a      	ldr	r2, [r7, #32]
 800706c:	440a      	add	r2, r1
 800706e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007072:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007076:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8007078:	79fb      	ldrb	r3, [r7, #7]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10b      	bne.n	8007096 <USB_HC_StartXfer+0x86>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	795b      	ldrb	r3, [r3, #5]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d107      	bne.n	8007096 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	785b      	ldrb	r3, [r3, #1]
 800708a:	4619      	mov	r1, r3
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 fa2f 	bl	80074f0 <USB_DoPing>
      return HAL_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	e0f8      	b.n	8007288 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d018      	beq.n	80070d0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	8912      	ldrh	r2, [r2, #8]
 80070a6:	4413      	add	r3, r2
 80070a8:	3b01      	subs	r3, #1
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	8912      	ldrh	r2, [r2, #8]
 80070ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80070b2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80070b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070b6:	8b7b      	ldrh	r3, [r7, #26]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d90b      	bls.n	80070d4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80070bc:	8b7b      	ldrh	r3, [r7, #26]
 80070be:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	8912      	ldrh	r2, [r2, #8]
 80070c6:	fb02 f203 	mul.w	r2, r2, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	611a      	str	r2, [r3, #16]
 80070ce:	e001      	b.n	80070d4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80070d0:	2301      	movs	r3, #1
 80070d2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	78db      	ldrb	r3, [r3, #3]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80070dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	8912      	ldrh	r2, [r2, #8]
 80070e2:	fb02 f203 	mul.w	r2, r2, r3
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	611a      	str	r2, [r3, #16]
 80070ea:	e003      	b.n	80070f4 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	695a      	ldr	r2, [r3, #20]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80070fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80070fe:	04d9      	lsls	r1, r3, #19
 8007100:	4b63      	ldr	r3, [pc, #396]	; (8007290 <USB_HC_StartXfer+0x280>)
 8007102:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007104:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	7a9b      	ldrb	r3, [r3, #10]
 800710a:	075b      	lsls	r3, r3, #29
 800710c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007110:	69f9      	ldr	r1, [r7, #28]
 8007112:	0148      	lsls	r0, r1, #5
 8007114:	6a39      	ldr	r1, [r7, #32]
 8007116:	4401      	add	r1, r0
 8007118:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800711c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800711e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	68d9      	ldr	r1, [r3, #12]
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	015a      	lsls	r2, r3, #5
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	4413      	add	r3, r2
 8007132:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007136:	460a      	mov	r2, r1
 8007138:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800713a:	6a3b      	ldr	r3, [r7, #32]
 800713c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	bf0c      	ite	eq
 800714a:	2301      	moveq	r3, #1
 800714c:	2300      	movne	r3, #0
 800714e:	b2db      	uxtb	r3, r3
 8007150:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	4413      	add	r3, r2
 800715a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	69fa      	ldr	r2, [r7, #28]
 8007162:	0151      	lsls	r1, r2, #5
 8007164:	6a3a      	ldr	r2, [r7, #32]
 8007166:	440a      	add	r2, r1
 8007168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800716c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007170:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	6a3b      	ldr	r3, [r7, #32]
 8007178:	4413      	add	r3, r2
 800717a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800717e:	681a      	ldr	r2, [r3, #0]
 8007180:	7e7b      	ldrb	r3, [r7, #25]
 8007182:	075b      	lsls	r3, r3, #29
 8007184:	69f9      	ldr	r1, [r7, #28]
 8007186:	0148      	lsls	r0, r1, #5
 8007188:	6a39      	ldr	r1, [r7, #32]
 800718a:	4401      	add	r1, r0
 800718c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007190:	4313      	orrs	r3, r2
 8007192:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	015a      	lsls	r2, r3, #5
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	4413      	add	r3, r2
 800719c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80071aa:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	78db      	ldrb	r3, [r3, #3]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	e003      	b.n	80071c6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071c4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80071cc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	6a3b      	ldr	r3, [r7, #32]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071da:	461a      	mov	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80071e0:	79fb      	ldrb	r3, [r7, #7]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	e04e      	b.n	8007288 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	78db      	ldrb	r3, [r3, #3]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d149      	bne.n	8007286 <USB_HC_StartXfer+0x276>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	695b      	ldr	r3, [r3, #20]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d045      	beq.n	8007286 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	79db      	ldrb	r3, [r3, #7]
 80071fe:	2b03      	cmp	r3, #3
 8007200:	d830      	bhi.n	8007264 <USB_HC_StartXfer+0x254>
 8007202:	a201      	add	r2, pc, #4	; (adr r2, 8007208 <USB_HC_StartXfer+0x1f8>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	08007219 	.word	0x08007219
 800720c:	0800723d 	.word	0x0800723d
 8007210:	08007219 	.word	0x08007219
 8007214:	0800723d 	.word	0x0800723d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	3303      	adds	r3, #3
 800721e:	089b      	lsrs	r3, r3, #2
 8007220:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007222:	8afa      	ldrh	r2, [r7, #22]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007228:	b29b      	uxth	r3, r3
 800722a:	429a      	cmp	r2, r3
 800722c:	d91c      	bls.n	8007268 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f043 0220 	orr.w	r2, r3, #32
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	619a      	str	r2, [r3, #24]
        }
        break;
 800723a:	e015      	b.n	8007268 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	3303      	adds	r3, #3
 8007242:	089b      	lsrs	r3, r3, #2
 8007244:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007246:	8afa      	ldrh	r2, [r7, #22]
 8007248:	6a3b      	ldr	r3, [r7, #32]
 800724a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	b29b      	uxth	r3, r3
 8007252:	429a      	cmp	r2, r3
 8007254:	d90a      	bls.n	800726c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	619a      	str	r2, [r3, #24]
        }
        break;
 8007262:	e003      	b.n	800726c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007264:	bf00      	nop
 8007266:	e002      	b.n	800726e <USB_HC_StartXfer+0x25e>
        break;
 8007268:	bf00      	nop
 800726a:	e000      	b.n	800726e <USB_HC_StartXfer+0x25e>
        break;
 800726c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68d9      	ldr	r1, [r3, #12]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	785a      	ldrb	r2, [r3, #1]
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	b29b      	uxth	r3, r3
 800727c:	2000      	movs	r0, #0
 800727e:	9000      	str	r0, [sp, #0]
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff fb53 	bl	800692c <USB_WritePacket>
  }

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3728      	adds	r7, #40	; 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	1ff80000 	.word	0x1ff80000

08007294 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	b29b      	uxth	r3, r3
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b089      	sub	sp, #36	; 0x24
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 80072c6:	78fb      	ldrb	r3, [r7, #3]
 80072c8:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	0c9b      	lsrs	r3, r3, #18
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	015a      	lsls	r2, r3, #5
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	4413      	add	r3, r2
 80072ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	0fdb      	lsrs	r3, r3, #31
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b20      	cmp	r3, #32
 8007304:	d104      	bne.n	8007310 <USB_HC_Halt+0x5a>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d101      	bne.n	8007310 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	e0e8      	b.n	80074e2 <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d002      	beq.n	800731c <USB_HC_Halt+0x66>
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	2b02      	cmp	r3, #2
 800731a:	d173      	bne.n	8007404 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	015a      	lsls	r2, r3, #5
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	4413      	add	r3, r2
 8007324:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	0151      	lsls	r1, r2, #5
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	440a      	add	r2, r1
 8007332:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007336:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800733a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	f040 80cb 	bne.w	80074e0 <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d143      	bne.n	80073de <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	4413      	add	r3, r2
 800735e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	440a      	add	r2, r1
 800736c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007374:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	4413      	add	r3, r2
 800737e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	0151      	lsls	r1, r2, #5
 8007388:	69ba      	ldr	r2, [r7, #24]
 800738a:	440a      	add	r2, r1
 800738c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007390:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007394:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	4413      	add	r3, r2
 800739e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	0151      	lsls	r1, r2, #5
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	440a      	add	r2, r1
 80073ac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073b4:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	3301      	adds	r3, #1
 80073ba:	61fb      	str	r3, [r7, #28]
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80073c2:	d81d      	bhi.n	8007400 <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	015a      	lsls	r2, r3, #5
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	4413      	add	r3, r2
 80073cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073da:	d0ec      	beq.n	80073b6 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073dc:	e080      	b.n	80074e0 <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	0151      	lsls	r1, r2, #5
 80073f0:	69ba      	ldr	r2, [r7, #24]
 80073f2:	440a      	add	r2, r1
 80073f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073fe:	e06f      	b.n	80074e0 <USB_HC_Halt+0x22a>
            break;
 8007400:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007402:	e06d      	b.n	80074e0 <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	4413      	add	r3, r2
 800740c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	440a      	add	r2, r1
 800741a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800741e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007422:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d143      	bne.n	80074bc <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	015a      	lsls	r2, r3, #5
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	4413      	add	r3, r2
 800743c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	0151      	lsls	r1, r2, #5
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	440a      	add	r2, r1
 800744a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800744e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007452:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	015a      	lsls	r2, r3, #5
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	4413      	add	r3, r2
 800745c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	0151      	lsls	r1, r2, #5
 8007466:	69ba      	ldr	r2, [r7, #24]
 8007468:	440a      	add	r2, r1
 800746a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800746e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007472:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	015a      	lsls	r2, r3, #5
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4413      	add	r3, r2
 800747c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	697a      	ldr	r2, [r7, #20]
 8007484:	0151      	lsls	r1, r2, #5
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	440a      	add	r2, r1
 800748a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800748e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007492:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007494:	69fb      	ldr	r3, [r7, #28]
 8007496:	3301      	adds	r3, #1
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074a0:	d81d      	bhi.n	80074de <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074b8:	d0ec      	beq.n	8007494 <USB_HC_Halt+0x1de>
 80074ba:	e011      	b.n	80074e0 <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	0151      	lsls	r1, r2, #5
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	440a      	add	r2, r1
 80074d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	e000      	b.n	80074e0 <USB_HC_Halt+0x22a>
          break;
 80074de:	bf00      	nop
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3724      	adds	r7, #36	; 0x24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
	...

080074f0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	460b      	mov	r3, r1
 80074fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007504:	2301      	movs	r3, #1
 8007506:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	04da      	lsls	r2, r3, #19
 800750c:	4b15      	ldr	r3, [pc, #84]	; (8007564 <USB_DoPing+0x74>)
 800750e:	4013      	ands	r3, r2
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	0151      	lsls	r1, r2, #5
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	440a      	add	r2, r1
 8007518:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800751c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007520:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	4413      	add	r3, r2
 800752a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007538:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007540:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	015a      	lsls	r2, r3, #5
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	4413      	add	r3, r2
 800754a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754e:	461a      	mov	r2, r3
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	1ff80000 	.word	0x1ff80000

08007568 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b086      	sub	sp, #24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f7ff f935 	bl	80067e8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800757e:	2110      	movs	r1, #16
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff f98f 	bl	80068a4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff f9b0 	bl	80068ec <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800758c:	2300      	movs	r3, #0
 800758e:	613b      	str	r3, [r7, #16]
 8007590:	e01f      	b.n	80075d2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	4413      	add	r3, r2
 800759a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075b0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075b8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075c6:	461a      	mov	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	3301      	adds	r3, #1
 80075d0:	613b      	str	r3, [r7, #16]
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	2b0f      	cmp	r3, #15
 80075d6:	d9dc      	bls.n	8007592 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
 80075dc:	e034      	b.n	8007648 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	015a      	lsls	r2, r3, #5
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4413      	add	r3, r2
 80075e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075f4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075fc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007604:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007612:	461a      	mov	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	3301      	adds	r3, #1
 800761c:	617b      	str	r3, [r7, #20]
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007624:	d80c      	bhi.n	8007640 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	015a      	lsls	r2, r3, #5
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	4413      	add	r3, r2
 800762e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007638:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800763c:	d0ec      	beq.n	8007618 <USB_StopHost+0xb0>
 800763e:	e000      	b.n	8007642 <USB_StopHost+0xda>
        break;
 8007640:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3301      	adds	r3, #1
 8007646:	613b      	str	r3, [r7, #16]
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	2b0f      	cmp	r3, #15
 800764c:	d9c7      	bls.n	80075de <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007654:	461a      	mov	r2, r3
 8007656:	f04f 33ff 	mov.w	r3, #4294967295
 800765a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f04f 32ff 	mov.w	r2, #4294967295
 8007662:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff f8ae 	bl	80067c6 <USB_EnableGlobalInt>

  return HAL_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007674:	b590      	push	{r4, r7, lr}
 8007676:	b089      	sub	sp, #36	; 0x24
 8007678:	af04      	add	r7, sp, #16
 800767a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800767c:	2301      	movs	r3, #1
 800767e:	2202      	movs	r2, #2
 8007680:	2102      	movs	r1, #2
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fc66 	bl	8007f54 <USBH_FindInterface>
 8007688:	4603      	mov	r3, r0
 800768a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	2bff      	cmp	r3, #255	; 0xff
 8007690:	d002      	beq.n	8007698 <USBH_CDC_InterfaceInit+0x24>
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d901      	bls.n	800769c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007698:	2302      	movs	r3, #2
 800769a:	e13d      	b.n	8007918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	4619      	mov	r1, r3
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fc3b 	bl	8007f1c <USBH_SelectInterface>
 80076a6:	4603      	mov	r3, r0
 80076a8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80076aa:	7bbb      	ldrb	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80076b0:	2302      	movs	r3, #2
 80076b2:	e131      	b.n	8007918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80076ba:	2050      	movs	r0, #80	; 0x50
 80076bc:	f002 fa00 	bl	8009ac0 <malloc>
 80076c0:	4603      	mov	r3, r0
 80076c2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d101      	bne.n	80076d8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80076d4:	2302      	movs	r3, #2
 80076d6:	e11f      	b.n	8007918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80076d8:	2250      	movs	r2, #80	; 0x50
 80076da:	2100      	movs	r1, #0
 80076dc:	68b8      	ldr	r0, [r7, #8]
 80076de:	f002 f9ff 	bl	8009ae0 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80076e2:	7bfb      	ldrb	r3, [r7, #15]
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	211a      	movs	r1, #26
 80076e8:	fb01 f303 	mul.w	r3, r1, r3
 80076ec:	4413      	add	r3, r2
 80076ee:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b25b      	sxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	da15      	bge.n	8007726 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	211a      	movs	r1, #26
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	4413      	add	r3, r2
 8007706:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007710:	7bfb      	ldrb	r3, [r7, #15]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	211a      	movs	r1, #26
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	4413      	add	r3, r2
 800771c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007720:	881a      	ldrh	r2, [r3, #0]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	785b      	ldrb	r3, [r3, #1]
 800772a:	4619      	mov	r1, r3
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f001 fe32 	bl	8009396 <USBH_AllocPipe>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	7819      	ldrb	r1, [r3, #0]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	7858      	ldrb	r0, [r3, #1]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	8952      	ldrh	r2, [r2, #10]
 8007752:	9202      	str	r2, [sp, #8]
 8007754:	2203      	movs	r2, #3
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4623      	mov	r3, r4
 800775c:	4602      	mov	r2, r0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 fdea 	bl	8009338 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	2200      	movs	r2, #0
 800776a:	4619      	mov	r1, r3
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f002 f8f9 	bl	8009964 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007772:	2300      	movs	r3, #0
 8007774:	2200      	movs	r2, #0
 8007776:	210a      	movs	r1, #10
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fbeb 	bl	8007f54 <USBH_FindInterface>
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	2bff      	cmp	r3, #255	; 0xff
 8007786:	d002      	beq.n	800778e <USBH_CDC_InterfaceInit+0x11a>
 8007788:	7bfb      	ldrb	r3, [r7, #15]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d901      	bls.n	8007792 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800778e:	2302      	movs	r3, #2
 8007790:	e0c2      	b.n	8007918 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007792:	7bfb      	ldrb	r3, [r7, #15]
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	211a      	movs	r1, #26
 8007798:	fb01 f303 	mul.w	r3, r1, r3
 800779c:	4413      	add	r3, r2
 800779e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	b25b      	sxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	da16      	bge.n	80077d8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	211a      	movs	r1, #26
 80077b0:	fb01 f303 	mul.w	r3, r1, r3
 80077b4:	4413      	add	r3, r2
 80077b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077ba:	781a      	ldrb	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	211a      	movs	r1, #26
 80077c6:	fb01 f303 	mul.w	r3, r1, r3
 80077ca:	4413      	add	r3, r2
 80077cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077d0:	881a      	ldrh	r2, [r3, #0]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	835a      	strh	r2, [r3, #26]
 80077d6:	e015      	b.n	8007804 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80077d8:	7bfb      	ldrb	r3, [r7, #15]
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	211a      	movs	r1, #26
 80077de:	fb01 f303 	mul.w	r3, r1, r3
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80077e8:	781a      	ldrb	r2, [r3, #0]
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	211a      	movs	r1, #26
 80077f4:	fb01 f303 	mul.w	r3, r1, r3
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80077fe:	881a      	ldrh	r2, [r3, #0]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	211a      	movs	r1, #26
 800780a:	fb01 f303 	mul.w	r3, r1, r3
 800780e:	4413      	add	r3, r2
 8007810:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	b25b      	sxtb	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	da16      	bge.n	800784a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	211a      	movs	r1, #26
 8007822:	fb01 f303 	mul.w	r3, r1, r3
 8007826:	4413      	add	r3, r2
 8007828:	f203 3356 	addw	r3, r3, #854	; 0x356
 800782c:	781a      	ldrb	r2, [r3, #0]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	211a      	movs	r1, #26
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	4413      	add	r3, r2
 800783e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007842:	881a      	ldrh	r2, [r3, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	835a      	strh	r2, [r3, #26]
 8007848:	e015      	b.n	8007876 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	211a      	movs	r1, #26
 8007850:	fb01 f303 	mul.w	r3, r1, r3
 8007854:	4413      	add	r3, r2
 8007856:	f203 3356 	addw	r3, r3, #854	; 0x356
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	211a      	movs	r1, #26
 8007866:	fb01 f303 	mul.w	r3, r1, r3
 800786a:	4413      	add	r3, r2
 800786c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007870:	881a      	ldrh	r2, [r3, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	7b9b      	ldrb	r3, [r3, #14]
 800787a:	4619      	mov	r1, r3
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 fd8a 	bl	8009396 <USBH_AllocPipe>
 8007882:	4603      	mov	r3, r0
 8007884:	461a      	mov	r2, r3
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	7bdb      	ldrb	r3, [r3, #15]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fd80 	bl	8009396 <USBH_AllocPipe>
 8007896:	4603      	mov	r3, r0
 8007898:	461a      	mov	r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	7b59      	ldrb	r1, [r3, #13]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	7b98      	ldrb	r0, [r3, #14]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	8b12      	ldrh	r2, [r2, #24]
 80078b6:	9202      	str	r2, [sp, #8]
 80078b8:	2202      	movs	r2, #2
 80078ba:	9201      	str	r2, [sp, #4]
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4623      	mov	r3, r4
 80078c0:	4602      	mov	r2, r0
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fd38 	bl	8009338 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	7b19      	ldrb	r1, [r3, #12]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	7bd8      	ldrb	r0, [r3, #15]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	8b52      	ldrh	r2, [r2, #26]
 80078e0:	9202      	str	r2, [sp, #8]
 80078e2:	2202      	movs	r2, #2
 80078e4:	9201      	str	r2, [sp, #4]
 80078e6:	9300      	str	r3, [sp, #0]
 80078e8:	4623      	mov	r3, r4
 80078ea:	4602      	mov	r2, r0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f001 fd23 	bl	8009338 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	7b5b      	ldrb	r3, [r3, #13]
 80078fe:	2200      	movs	r2, #0
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f002 f82e 	bl	8009964 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	7b1b      	ldrb	r3, [r3, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	4619      	mov	r1, r3
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f002 f827 	bl	8009964 <USBH_LL_SetToggle>

  return USBH_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3714      	adds	r7, #20
 800791c:	46bd      	mov	sp, r7
 800791e:	bd90      	pop	{r4, r7, pc}

08007920 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00e      	beq.n	8007958 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f001 fd18 	bl	8009376 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	4619      	mov	r1, r3
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 fd43 	bl	80093d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	7b1b      	ldrb	r3, [r3, #12]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00e      	beq.n	800797e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	7b1b      	ldrb	r3, [r3, #12]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 fd05 	bl	8009376 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	7b1b      	ldrb	r3, [r3, #12]
 8007970:	4619      	mov	r1, r3
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f001 fd30 	bl	80093d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	7b5b      	ldrb	r3, [r3, #13]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00e      	beq.n	80079a4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	7b5b      	ldrb	r3, [r3, #13]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 fcf2 	bl	8009376 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	7b5b      	ldrb	r3, [r3, #13]
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fd1d 	bl	80093d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2200      	movs	r2, #0
 80079a2:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f002 f889 	bl	8009ad0 <free>
    phost->pActiveClass->pData = 0U;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079c4:	2200      	movs	r2, #0
 80079c6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3340      	adds	r3, #64	; 0x40
 80079e8:	4619      	mov	r1, r3
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f8b1 	bl	8007b52 <GetLineCoding>
 80079f0:	4603      	mov	r3, r0
 80079f2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d105      	bne.n	8007a06 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a00:	2102      	movs	r1, #2
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007a06:	7afb      	ldrb	r3, [r7, #11]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a26:	69db      	ldr	r3, [r3, #28]
 8007a28:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007a30:	2b04      	cmp	r3, #4
 8007a32:	d877      	bhi.n	8007b24 <USBH_CDC_Process+0x114>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <USBH_CDC_Process+0x2c>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a51 	.word	0x08007a51
 8007a40:	08007a57 	.word	0x08007a57
 8007a44:	08007a87 	.word	0x08007a87
 8007a48:	08007afb 	.word	0x08007afb
 8007a4c:	08007b09 	.word	0x08007b09
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007a50:	2300      	movs	r3, #0
 8007a52:	73fb      	strb	r3, [r7, #15]
      break;
 8007a54:	e06d      	b.n	8007b32 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f897 	bl	8007b90 <SetLineCoding>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d104      	bne.n	8007a76 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	2202      	movs	r2, #2
 8007a70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007a74:	e058      	b.n	8007b28 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d055      	beq.n	8007b28 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	2204      	movs	r2, #4
 8007a80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007a84:	e050      	b.n	8007b28 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	3340      	adds	r3, #64	; 0x40
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f860 	bl	8007b52 <GetLineCoding>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d126      	bne.n	8007aea <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aae:	791b      	ldrb	r3, [r3, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d13b      	bne.n	8007b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007abe:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d133      	bne.n	8007b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ace:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d12b      	bne.n	8007b2c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007adc:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d124      	bne.n	8007b2c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f958 	bl	8007d98 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007ae8:	e020      	b.n	8007b2c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007aea:	7bbb      	ldrb	r3, [r7, #14]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d01d      	beq.n	8007b2c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2204      	movs	r2, #4
 8007af4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007af8:	e018      	b.n	8007b2c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f867 	bl	8007bce <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8da 	bl	8007cba <CDC_ProcessReception>
      break;
 8007b06:	e014      	b.n	8007b32 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007b08:	2100      	movs	r1, #0
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 ffe3 	bl	8008ad6 <USBH_ClrFeature>
 8007b10:	4603      	mov	r3, r0
 8007b12:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007b22:	e005      	b.n	8007b30 <USBH_CDC_Process+0x120>

    default:
      break;
 8007b24:	bf00      	nop
 8007b26:	e004      	b.n	8007b32 <USBH_CDC_Process+0x122>
      break;
 8007b28:	bf00      	nop
 8007b2a:	e002      	b.n	8007b32 <USBH_CDC_Process+0x122>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <USBH_CDC_Process+0x122>
      break;
 8007b30:	bf00      	nop

  }

  return status;
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3710      	adds	r7, #16
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	22a1      	movs	r2, #161	; 0xa1
 8007b60:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2221      	movs	r2, #33	; 0x21
 8007b66:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2207      	movs	r2, #7
 8007b78:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2207      	movs	r2, #7
 8007b7e:	4619      	mov	r1, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f001 f988 	bl	8008e96 <USBH_CtlReq>
 8007b86:	4603      	mov	r3, r0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3708      	adds	r7, #8
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2221      	movs	r2, #33	; 0x21
 8007b9e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2207      	movs	r2, #7
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 f969 	bl	8008e96 <USBH_CtlReq>
 8007bc4:	4603      	mov	r3, r0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b086      	sub	sp, #24
 8007bd2:	af02      	add	r7, sp, #8
 8007bd4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007bdc:	69db      	ldr	r3, [r3, #28]
 8007bde:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007be0:	2300      	movs	r3, #0
 8007be2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d002      	beq.n	8007bf4 <CDC_ProcessTransmission+0x26>
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d023      	beq.n	8007c3a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007bf2:	e05e      	b.n	8007cb2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	8b12      	ldrh	r2, [r2, #24]
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d90b      	bls.n	8007c18 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	69d9      	ldr	r1, [r3, #28]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	8b1a      	ldrh	r2, [r3, #24]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	7b5b      	ldrb	r3, [r3, #13]
 8007c0c:	2001      	movs	r0, #1
 8007c0e:	9000      	str	r0, [sp, #0]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 fb4e 	bl	80092b2 <USBH_BulkSendData>
 8007c16:	e00b      	b.n	8007c30 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	7b5b      	ldrb	r3, [r3, #13]
 8007c26:	2001      	movs	r0, #1
 8007c28:	9000      	str	r0, [sp, #0]
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f001 fb41 	bl	80092b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c38:	e03b      	b.n	8007cb2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	7b5b      	ldrb	r3, [r3, #13]
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 fe65 	bl	8009910 <USBH_LL_GetURBState>
 8007c46:	4603      	mov	r3, r0
 8007c48:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007c4a:	7afb      	ldrb	r3, [r7, #11]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d128      	bne.n	8007ca2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	8b12      	ldrh	r2, [r2, #24]
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d90e      	bls.n	8007c7a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	8b12      	ldrh	r2, [r2, #24]
 8007c64:	1a9a      	subs	r2, r3, r2
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	68fa      	ldr	r2, [r7, #12]
 8007c70:	8b12      	ldrh	r2, [r2, #24]
 8007c72:	441a      	add	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	61da      	str	r2, [r3, #28]
 8007c78:	e002      	b.n	8007c80 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d004      	beq.n	8007c92 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007c90:	e00e      	b.n	8007cb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f868 	bl	8007d70 <USBH_CDC_TransmitCallback>
      break;
 8007ca0:	e006      	b.n	8007cb0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007ca2:	7afb      	ldrb	r3, [r7, #11]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d103      	bne.n	8007cb0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007cb0:	bf00      	nop
  }
}
 8007cb2:	bf00      	nop
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b086      	sub	sp, #24
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d002      	beq.n	8007ce0 <CDC_ProcessReception+0x26>
 8007cda:	2b04      	cmp	r3, #4
 8007cdc:	d00e      	beq.n	8007cfc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007cde:	e043      	b.n	8007d68 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	6a19      	ldr	r1, [r3, #32]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	8b5a      	ldrh	r2, [r3, #26]
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	7b1b      	ldrb	r3, [r3, #12]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f001 fb05 	bl	80092fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2204      	movs	r2, #4
 8007cf6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007cfa:	e035      	b.n	8007d68 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	7b1b      	ldrb	r3, [r3, #12]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f001 fe04 	bl	8009910 <USBH_LL_GetURBState>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007d0c:	7cfb      	ldrb	r3, [r7, #19]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d129      	bne.n	8007d66 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	7b1b      	ldrb	r3, [r3, #12]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fd67 	bl	80097ec <USBH_LL_GetLastXferSize>
 8007d1e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d016      	beq.n	8007d58 <CDC_ProcessReception+0x9e>
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	8b5b      	ldrh	r3, [r3, #26]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d910      	bls.n	8007d58 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	6a1a      	ldr	r2, [r3, #32]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	441a      	add	r2, r3
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2203      	movs	r2, #3
 8007d52:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007d56:	e006      	b.n	8007d66 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f80f 	bl	8007d84 <USBH_CDC_ReceiveCallback>
      break;
 8007d66:	bf00      	nop
  }
}
 8007d68:	bf00      	nop
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d78:	bf00      	nop
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	4613      	mov	r3, r2
 8007db8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e029      	b.n	8007e18 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	79fa      	ldrb	r2, [r7, #7]
 8007dc8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f81f 	bl	8007e20 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d003      	beq.n	8007e10 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f001 fc37 	bl	8009684 <USBH_LL_Init>

  return USBH_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	e009      	b.n	8007e46 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	33e0      	adds	r3, #224	; 0xe0
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3301      	adds	r3, #1
 8007e44:	60fb      	str	r3, [r7, #12]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2b0e      	cmp	r3, #14
 8007e4a:	d9f2      	bls.n	8007e32 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
 8007e50:	e009      	b.n	8007e66 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4413      	add	r3, r2
 8007e58:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3301      	adds	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6c:	d3f1      	bcc.n	8007e52 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2240      	movs	r2, #64	; 0x40
 8007e92:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3714      	adds	r7, #20
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b085      	sub	sp, #20
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d016      	beq.n	8007f0a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10e      	bne.n	8007f04 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007eec:	1c59      	adds	r1, r3, #1
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	33de      	adds	r3, #222	; 0xde
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
 8007f02:	e004      	b.n	8007f0e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007f04:	2302      	movs	r3, #2
 8007f06:	73fb      	strb	r3, [r7, #15]
 8007f08:	e001      	b.n	8007f0e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007f0a:	2302      	movs	r3, #2
 8007f0c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d204      	bcs.n	8007f42 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	78fa      	ldrb	r2, [r7, #3]
 8007f3c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007f40:	e001      	b.n	8007f46 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007f42:	2302      	movs	r3, #2
 8007f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b087      	sub	sp, #28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	4611      	mov	r1, r2
 8007f60:	461a      	mov	r2, r3
 8007f62:	4603      	mov	r3, r0
 8007f64:	70fb      	strb	r3, [r7, #3]
 8007f66:	460b      	mov	r3, r1
 8007f68:	70bb      	strb	r3, [r7, #2]
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007f7c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f7e:	e025      	b.n	8007fcc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f80:	7dfb      	ldrb	r3, [r7, #23]
 8007f82:	221a      	movs	r2, #26
 8007f84:	fb02 f303 	mul.w	r3, r2, r3
 8007f88:	3308      	adds	r3, #8
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3302      	adds	r3, #2
 8007f90:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	795b      	ldrb	r3, [r3, #5]
 8007f96:	78fa      	ldrb	r2, [r7, #3]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d002      	beq.n	8007fa2 <USBH_FindInterface+0x4e>
 8007f9c:	78fb      	ldrb	r3, [r7, #3]
 8007f9e:	2bff      	cmp	r3, #255	; 0xff
 8007fa0:	d111      	bne.n	8007fc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007fa6:	78ba      	ldrb	r2, [r7, #2]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d002      	beq.n	8007fb2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fac:	78bb      	ldrb	r3, [r7, #2]
 8007fae:	2bff      	cmp	r3, #255	; 0xff
 8007fb0:	d109      	bne.n	8007fc6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007fb6:	787a      	ldrb	r2, [r7, #1]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d002      	beq.n	8007fc2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007fbc:	787b      	ldrb	r3, [r7, #1]
 8007fbe:	2bff      	cmp	r3, #255	; 0xff
 8007fc0:	d101      	bne.n	8007fc6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	e006      	b.n	8007fd4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d9d6      	bls.n	8007f80 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007fd2:	23ff      	movs	r3, #255	; 0xff
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 fb87 	bl	80096fc <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007fee:	2101      	movs	r1, #1
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 fca0 	bl	8009936 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af04      	add	r7, sp, #16
 8008006:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008008:	2302      	movs	r3, #2
 800800a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b01      	cmp	r3, #1
 800801a:	d102      	bne.n	8008022 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2203      	movs	r2, #3
 8008020:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b0b      	cmp	r3, #11
 800802a:	f200 81b3 	bhi.w	8008394 <USBH_Process+0x394>
 800802e:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <USBH_Process+0x34>)
 8008030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008034:	08008065 	.word	0x08008065
 8008038:	08008097 	.word	0x08008097
 800803c:	080080ff 	.word	0x080080ff
 8008040:	0800832f 	.word	0x0800832f
 8008044:	08008395 	.word	0x08008395
 8008048:	080081a3 	.word	0x080081a3
 800804c:	080082d5 	.word	0x080082d5
 8008050:	080081d9 	.word	0x080081d9
 8008054:	080081f9 	.word	0x080081f9
 8008058:	08008219 	.word	0x08008219
 800805c:	08008247 	.word	0x08008247
 8008060:	08008317 	.word	0x08008317
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8193 	beq.w	8008398 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008078:	20c8      	movs	r0, #200	; 0xc8
 800807a:	f001 fca3 	bl	80099c4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f001 fb99 	bl	80097b6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008094:	e180      	b.n	8008398 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800809c:	2b01      	cmp	r3, #1
 800809e:	d107      	bne.n	80080b0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80080ae:	e182      	b.n	80083b6 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080ba:	d914      	bls.n	80080e6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080c2:	3301      	adds	r3, #1
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d903      	bls.n	80080de <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	220d      	movs	r2, #13
 80080da:	701a      	strb	r2, [r3, #0]
      break;
 80080dc:	e16b      	b.n	80083b6 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	701a      	strb	r2, [r3, #0]
      break;
 80080e4:	e167      	b.n	80083b6 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80080ec:	f103 020a 	add.w	r2, r3, #10
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80080f6:	200a      	movs	r0, #10
 80080f8:	f001 fc64 	bl	80099c4 <USBH_Delay>
      break;
 80080fc:	e15b      	b.n	80083b6 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008104:	2b00      	cmp	r3, #0
 8008106:	d005      	beq.n	8008114 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800810e:	2104      	movs	r1, #4
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008114:	2064      	movs	r0, #100	; 0x64
 8008116:	f001 fc55 	bl	80099c4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 fb24 	bl	8009768 <USBH_LL_GetSpeed>
 8008120:	4603      	mov	r3, r0
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2205      	movs	r2, #5
 800812e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008130:	2100      	movs	r1, #0
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 f92f 	bl	8009396 <USBH_AllocPipe>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008140:	2180      	movs	r1, #128	; 0x80
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 f927 	bl	8009396 <USBH_AllocPipe>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	7919      	ldrb	r1, [r3, #4]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008164:	b292      	uxth	r2, r2
 8008166:	9202      	str	r2, [sp, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	9201      	str	r2, [sp, #4]
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	4603      	mov	r3, r0
 8008170:	2280      	movs	r2, #128	; 0x80
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f001 f8e0 	bl	8009338 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	7959      	ldrb	r1, [r3, #5]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800818c:	b292      	uxth	r2, r2
 800818e:	9202      	str	r2, [sp, #8]
 8008190:	2200      	movs	r2, #0
 8008192:	9201      	str	r2, [sp, #4]
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	4603      	mov	r3, r0
 8008198:	2200      	movs	r2, #0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f001 f8cc 	bl	8009338 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80081a0:	e109      	b.n	80083b6 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f90c 	bl	80083c0 <USBH_HandleEnum>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081ac:	7bbb      	ldrb	r3, [r7, #14]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f040 80f3 	bne.w	800839c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d103      	bne.n	80081d0 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2208      	movs	r2, #8
 80081cc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80081ce:	e0e5      	b.n	800839c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2207      	movs	r2, #7
 80081d4:	701a      	strb	r2, [r3, #0]
      break;
 80081d6:	e0e1      	b.n	800839c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 80de 	beq.w	80083a0 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80081ea:	2101      	movs	r1, #1
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2208      	movs	r2, #8
 80081f4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80081f6:	e0d3      	b.n	80083a0 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80081fe:	b29b      	uxth	r3, r3
 8008200:	4619      	mov	r1, r3
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 fc20 	bl	8008a48 <USBH_SetCfg>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	f040 80ca 	bne.w	80083a4 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2209      	movs	r2, #9
 8008214:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008216:	e0c5      	b.n	80083a4 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800821e:	f003 0320 	and.w	r3, r3, #32
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00b      	beq.n	800823e <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008226:	2101      	movs	r1, #1
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 fc30 	bl	8008a8e <USBH_SetFeature>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	f040 80b9 	bne.w	80083a8 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	220a      	movs	r2, #10
 800823a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800823c:	e0b4      	b.n	80083a8 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	220a      	movs	r2, #10
 8008242:	701a      	strb	r2, [r3, #0]
      break;
 8008244:	e0b0      	b.n	80083a8 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 80ad 	beq.w	80083ac <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
 800825e:	e016      	b.n	800828e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008260:	7bfa      	ldrb	r2, [r7, #15]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32de      	adds	r2, #222	; 0xde
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	791a      	ldrb	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8008272:	429a      	cmp	r2, r3
 8008274:	d108      	bne.n	8008288 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008276:	7bfa      	ldrb	r2, [r7, #15]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	32de      	adds	r2, #222	; 0xde
 800827c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8008286:	e005      	b.n	8008294 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	3301      	adds	r3, #1
 800828c:	73fb      	strb	r3, [r7, #15]
 800828e:	7bfb      	ldrb	r3, [r7, #15]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0e5      	beq.n	8008260 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d016      	beq.n	80082cc <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	4798      	blx	r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d109      	bne.n	80082c4 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2206      	movs	r2, #6
 80082b4:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082bc:	2103      	movs	r1, #3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082c2:	e073      	b.n	80083ac <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	220d      	movs	r2, #13
 80082c8:	701a      	strb	r2, [r3, #0]
      break;
 80082ca:	e06f      	b.n	80083ac <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	220d      	movs	r2, #13
 80082d0:	701a      	strb	r2, [r3, #0]
      break;
 80082d2:	e06b      	b.n	80083ac <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d017      	beq.n	800830e <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80082e4:	691b      	ldr	r3, [r3, #16]
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
 80082ea:	4603      	mov	r3, r0
 80082ec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80082ee:	7bbb      	ldrb	r3, [r7, #14]
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d103      	bne.n	80082fe <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	220b      	movs	r2, #11
 80082fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80082fc:	e058      	b.n	80083b0 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80082fe:	7bbb      	ldrb	r3, [r7, #14]
 8008300:	b2db      	uxtb	r3, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d154      	bne.n	80083b0 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	220d      	movs	r2, #13
 800830a:	701a      	strb	r2, [r3, #0]
      break;
 800830c:	e050      	b.n	80083b0 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	220d      	movs	r2, #13
 8008312:	701a      	strb	r2, [r3, #0]
      break;
 8008314:	e04c      	b.n	80083b0 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d049      	beq.n	80083b4 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	4798      	blx	r3
      }
      break;
 800832c:	e042      	b.n	80083b4 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff fd72 	bl	8007e20 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008342:	2b00      	cmp	r3, #0
 8008344:	d009      	beq.n	800835a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008360:	2b00      	cmp	r3, #0
 8008362:	d005      	beq.n	8008370 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800836a:	2105      	movs	r1, #5
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	d107      	bne.n	800838c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff fe2b 	bl	8007fe0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800838a:	e014      	b.n	80083b6 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 f9b5 	bl	80096fc <USBH_LL_Start>
      break;
 8008392:	e010      	b.n	80083b6 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008394:	bf00      	nop
 8008396:	e00e      	b.n	80083b6 <USBH_Process+0x3b6>
      break;
 8008398:	bf00      	nop
 800839a:	e00c      	b.n	80083b6 <USBH_Process+0x3b6>
      break;
 800839c:	bf00      	nop
 800839e:	e00a      	b.n	80083b6 <USBH_Process+0x3b6>
    break;
 80083a0:	bf00      	nop
 80083a2:	e008      	b.n	80083b6 <USBH_Process+0x3b6>
      break;
 80083a4:	bf00      	nop
 80083a6:	e006      	b.n	80083b6 <USBH_Process+0x3b6>
      break;
 80083a8:	bf00      	nop
 80083aa:	e004      	b.n	80083b6 <USBH_Process+0x3b6>
      break;
 80083ac:	bf00      	nop
 80083ae:	e002      	b.n	80083b6 <USBH_Process+0x3b6>
      break;
 80083b0:	bf00      	nop
 80083b2:	e000      	b.n	80083b6 <USBH_Process+0x3b6>
      break;
 80083b4:	bf00      	nop
  }
  return USBH_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af04      	add	r7, sp, #16
 80083c6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80083c8:	2301      	movs	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80083cc:	2301      	movs	r3, #1
 80083ce:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	785b      	ldrb	r3, [r3, #1]
 80083d4:	2b07      	cmp	r3, #7
 80083d6:	f200 81c1 	bhi.w	800875c <USBH_HandleEnum+0x39c>
 80083da:	a201      	add	r2, pc, #4	; (adr r2, 80083e0 <USBH_HandleEnum+0x20>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	08008401 	.word	0x08008401
 80083e4:	080084bf 	.word	0x080084bf
 80083e8:	08008529 	.word	0x08008529
 80083ec:	080085b7 	.word	0x080085b7
 80083f0:	08008621 	.word	0x08008621
 80083f4:	08008691 	.word	0x08008691
 80083f8:	080086d7 	.word	0x080086d7
 80083fc:	0800871d 	.word	0x0800871d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008400:	2108      	movs	r1, #8
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fa50 	bl	80088a8 <USBH_Get_DevDesc>
 8008408:	4603      	mov	r3, r0
 800840a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d130      	bne.n	8008474 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	7919      	ldrb	r1, [r3, #4]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008436:	b292      	uxth	r2, r2
 8008438:	9202      	str	r2, [sp, #8]
 800843a:	2200      	movs	r2, #0
 800843c:	9201      	str	r2, [sp, #4]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4603      	mov	r3, r0
 8008442:	2280      	movs	r2, #128	; 0x80
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 ff77 	bl	8009338 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	7959      	ldrb	r1, [r3, #5]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800845e:	b292      	uxth	r2, r2
 8008460:	9202      	str	r2, [sp, #8]
 8008462:	2200      	movs	r2, #0
 8008464:	9201      	str	r2, [sp, #4]
 8008466:	9300      	str	r3, [sp, #0]
 8008468:	4603      	mov	r3, r0
 800846a:	2200      	movs	r2, #0
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 ff63 	bl	8009338 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008472:	e175      	b.n	8008760 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008474:	7bbb      	ldrb	r3, [r7, #14]
 8008476:	2b03      	cmp	r3, #3
 8008478:	f040 8172 	bne.w	8008760 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008482:	3301      	adds	r3, #1
 8008484:	b2da      	uxtb	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008492:	2b03      	cmp	r3, #3
 8008494:	d903      	bls.n	800849e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	220d      	movs	r2, #13
 800849a:	701a      	strb	r2, [r3, #0]
      break;
 800849c:	e160      	b.n	8008760 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	795b      	ldrb	r3, [r3, #5]
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 ff97 	bl	80093d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	791b      	ldrb	r3, [r3, #4]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 ff91 	bl	80093d8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
      break;
 80084bc:	e150      	b.n	8008760 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80084be:	2112      	movs	r1, #18
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f9f1 	bl	80088a8 <USBH_Get_DevDesc>
 80084c6:	4603      	mov	r3, r0
 80084c8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084ca:	7bbb      	ldrb	r3, [r7, #14]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d103      	bne.n	80084d8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2202      	movs	r2, #2
 80084d4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80084d6:	e145      	b.n	8008764 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b03      	cmp	r3, #3
 80084dc:	f040 8142 	bne.w	8008764 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084e6:	3301      	adds	r3, #1
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80084f6:	2b03      	cmp	r3, #3
 80084f8:	d903      	bls.n	8008502 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	220d      	movs	r2, #13
 80084fe:	701a      	strb	r2, [r3, #0]
      break;
 8008500:	e130      	b.n	8008764 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	795b      	ldrb	r3, [r3, #5]
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f000 ff65 	bl	80093d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	791b      	ldrb	r3, [r3, #4]
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 ff5f 	bl	80093d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	701a      	strb	r2, [r3, #0]
      break;
 8008526:	e11d      	b.n	8008764 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008528:	2101      	movs	r1, #1
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fa68 	bl	8008a00 <USBH_SetAddress>
 8008530:	4603      	mov	r3, r0
 8008532:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008534:	7bbb      	ldrb	r3, [r7, #14]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d132      	bne.n	80085a0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800853a:	2002      	movs	r0, #2
 800853c:	f001 fa42 	bl	80099c4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2203      	movs	r2, #3
 800854c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	7919      	ldrb	r1, [r3, #4]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008562:	b292      	uxth	r2, r2
 8008564:	9202      	str	r2, [sp, #8]
 8008566:	2200      	movs	r2, #0
 8008568:	9201      	str	r2, [sp, #4]
 800856a:	9300      	str	r3, [sp, #0]
 800856c:	4603      	mov	r3, r0
 800856e:	2280      	movs	r2, #128	; 0x80
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fee1 	bl	8009338 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	7959      	ldrb	r1, [r3, #5]
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800858a:	b292      	uxth	r2, r2
 800858c:	9202      	str	r2, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	9201      	str	r2, [sp, #4]
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	4603      	mov	r3, r0
 8008596:	2200      	movs	r2, #0
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fecd 	bl	8009338 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800859e:	e0e3      	b.n	8008768 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	f040 80e0 	bne.w	8008768 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	220d      	movs	r2, #13
 80085ac:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	705a      	strb	r2, [r3, #1]
      break;
 80085b4:	e0d8      	b.n	8008768 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80085b6:	2109      	movs	r1, #9
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 f99d 	bl	80088f8 <USBH_Get_CfgDesc>
 80085be:	4603      	mov	r3, r0
 80085c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085c2:	7bbb      	ldrb	r3, [r7, #14]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d103      	bne.n	80085d0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2204      	movs	r2, #4
 80085cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80085ce:	e0cd      	b.n	800876c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b03      	cmp	r3, #3
 80085d4:	f040 80ca 	bne.w	800876c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085de:	3301      	adds	r3, #1
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d903      	bls.n	80085fa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	220d      	movs	r2, #13
 80085f6:	701a      	strb	r2, [r3, #0]
      break;
 80085f8:	e0b8      	b.n	800876c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	795b      	ldrb	r3, [r3, #5]
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fee9 	bl	80093d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	791b      	ldrb	r3, [r3, #4]
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fee3 	bl	80093d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	701a      	strb	r2, [r3, #0]
      break;
 800861e:	e0a5      	b.n	800876c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008626:	4619      	mov	r1, r3
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 f965 	bl	80088f8 <USBH_Get_CfgDesc>
 800862e:	4603      	mov	r3, r0
 8008630:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008632:	7bbb      	ldrb	r3, [r7, #14]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d103      	bne.n	8008640 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2205      	movs	r2, #5
 800863c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800863e:	e097      	b.n	8008770 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b03      	cmp	r3, #3
 8008644:	f040 8094 	bne.w	8008770 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800864e:	3301      	adds	r3, #1
 8008650:	b2da      	uxtb	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800865e:	2b03      	cmp	r3, #3
 8008660:	d903      	bls.n	800866a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	220d      	movs	r2, #13
 8008666:	701a      	strb	r2, [r3, #0]
      break;
 8008668:	e082      	b.n	8008770 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	795b      	ldrb	r3, [r3, #5]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 feb1 	bl	80093d8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	791b      	ldrb	r3, [r3, #4]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 feab 	bl	80093d8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
      break;
 800868e:	e06f      	b.n	8008770 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008696:	2b00      	cmp	r3, #0
 8008698:	d019      	beq.n	80086ce <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80086a6:	23ff      	movs	r3, #255	; 0xff
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f949 	bl	8008940 <USBH_Get_StringDesc>
 80086ae:	4603      	mov	r3, r0
 80086b0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d103      	bne.n	80086c0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2206      	movs	r2, #6
 80086bc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80086be:	e059      	b.n	8008774 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80086c0:	7bbb      	ldrb	r3, [r7, #14]
 80086c2:	2b03      	cmp	r3, #3
 80086c4:	d156      	bne.n	8008774 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2206      	movs	r2, #6
 80086ca:	705a      	strb	r2, [r3, #1]
      break;
 80086cc:	e052      	b.n	8008774 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2206      	movs	r2, #6
 80086d2:	705a      	strb	r2, [r3, #1]
      break;
 80086d4:	e04e      	b.n	8008774 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d019      	beq.n	8008714 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80086ec:	23ff      	movs	r3, #255	; 0xff
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f926 	bl	8008940 <USBH_Get_StringDesc>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80086f8:	7bbb      	ldrb	r3, [r7, #14]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d103      	bne.n	8008706 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2207      	movs	r2, #7
 8008702:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008704:	e038      	b.n	8008778 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008706:	7bbb      	ldrb	r3, [r7, #14]
 8008708:	2b03      	cmp	r3, #3
 800870a:	d135      	bne.n	8008778 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2207      	movs	r2, #7
 8008710:	705a      	strb	r2, [r3, #1]
      break;
 8008712:	e031      	b.n	8008778 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2207      	movs	r2, #7
 8008718:	705a      	strb	r2, [r3, #1]
      break;
 800871a:	e02d      	b.n	8008778 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008722:	2b00      	cmp	r3, #0
 8008724:	d017      	beq.n	8008756 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008732:	23ff      	movs	r3, #255	; 0xff
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 f903 	bl	8008940 <USBH_Get_StringDesc>
 800873a:	4603      	mov	r3, r0
 800873c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800873e:	7bbb      	ldrb	r3, [r7, #14]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008748:	e018      	b.n	800877c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b03      	cmp	r3, #3
 800874e:	d115      	bne.n	800877c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	73fb      	strb	r3, [r7, #15]
      break;
 8008754:	e012      	b.n	800877c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	73fb      	strb	r3, [r7, #15]
      break;
 800875a:	e00f      	b.n	800877c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800875c:	bf00      	nop
 800875e:	e00e      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 8008760:	bf00      	nop
 8008762:	e00c      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 8008764:	bf00      	nop
 8008766:	e00a      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 8008768:	bf00      	nop
 800876a:	e008      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 800876c:	bf00      	nop
 800876e:	e006      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 8008770:	bf00      	nop
 8008772:	e004      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 8008774:	bf00      	nop
 8008776:	e002      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 8008778:	bf00      	nop
 800877a:	e000      	b.n	800877e <USBH_HandleEnum+0x3be>
      break;
 800877c:	bf00      	nop
  }
  return Status;
 800877e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80087a6:	b580      	push	{r7, lr}
 80087a8:	b082      	sub	sp, #8
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 f804 	bl	80087ca <USBH_HandleSof>
}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}

080087ca <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b0b      	cmp	r3, #11
 80087da:	d10a      	bne.n	80087f2 <USBH_HandleSof+0x28>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d005      	beq.n	80087f2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087ec:	699b      	ldr	r3, [r3, #24]
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	4798      	blx	r3
  }
}
 80087f2:	bf00      	nop
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800880a:	bf00      	nop
}
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008816:	b480      	push	{r7}
 8008818:	b083      	sub	sp, #12
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008826:	bf00      	nop
}
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 ff56 	bl	8009732 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	791b      	ldrb	r3, [r3, #4]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fda3 	bl	80093d8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	795b      	ldrb	r3, [r3, #5]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fd9d 	bl	80093d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	4613      	mov	r3, r2
 80088c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088c6:	2100      	movs	r1, #0
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f864 	bl	8008996 <USBH_GetDescriptor>
 80088ce:	4603      	mov	r3, r0
 80088d0:	73fb      	strb	r3, [r7, #15]
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f203 3026 	addw	r0, r3, #806	; 0x326
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80088e4:	78fa      	ldrb	r2, [r7, #3]
 80088e6:	b292      	uxth	r2, r2
 80088e8:	4619      	mov	r1, r3
 80088ea:	f000 f918 	bl	8008b1e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	460b      	mov	r3, r1
 8008902:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	331c      	adds	r3, #28
 8008908:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800890a:	887b      	ldrh	r3, [r7, #2]
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008914:	2100      	movs	r1, #0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 f83d 	bl	8008996 <USBH_GetDescriptor>
 800891c:	4603      	mov	r3, r0
 800891e:	72fb      	strb	r3, [r7, #11]
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d107      	bne.n	8008936 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800892c:	887a      	ldrh	r2, [r7, #2]
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	4618      	mov	r0, r3
 8008932:	f000 f964 	bl	8008bfe <USBH_ParseCfgDesc>
  }

  return status;
 8008936:	7afb      	ldrb	r3, [r7, #11]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b088      	sub	sp, #32
 8008944:	af02      	add	r7, sp, #8
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	461a      	mov	r2, r3
 800894c:	460b      	mov	r3, r1
 800894e:	72fb      	strb	r3, [r7, #11]
 8008950:	4613      	mov	r3, r2
 8008952:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	b29b      	uxth	r3, r3
 8008958:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800895c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008964:	893b      	ldrh	r3, [r7, #8]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	460b      	mov	r3, r1
 800896a:	2100      	movs	r1, #0
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f000 f812 	bl	8008996 <USBH_GetDescriptor>
 8008972:	4603      	mov	r3, r0
 8008974:	75fb      	strb	r3, [r7, #23]
 8008976:	7dfb      	ldrb	r3, [r7, #23]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d107      	bne.n	800898c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008982:	893a      	ldrh	r2, [r7, #8]
 8008984:	6879      	ldr	r1, [r7, #4]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 fa37 	bl	8008dfa <USBH_ParseStringDesc>
  }

  return status;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
}
 800898e:	4618      	mov	r0, r3
 8008990:	3718      	adds	r7, #24
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}

08008996 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008996:	b580      	push	{r7, lr}
 8008998:	b084      	sub	sp, #16
 800899a:	af00      	add	r7, sp, #0
 800899c:	60f8      	str	r0, [r7, #12]
 800899e:	607b      	str	r3, [r7, #4]
 80089a0:	460b      	mov	r3, r1
 80089a2:	72fb      	strb	r3, [r7, #11]
 80089a4:	4613      	mov	r3, r2
 80089a6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	789b      	ldrb	r3, [r3, #2]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d11c      	bne.n	80089ea <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80089b0:	7afb      	ldrb	r3, [r7, #11]
 80089b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80089b6:	b2da      	uxtb	r2, r3
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2206      	movs	r2, #6
 80089c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	893a      	ldrh	r2, [r7, #8]
 80089c6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80089c8:	893b      	ldrh	r3, [r7, #8]
 80089ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80089ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80089d2:	d104      	bne.n	80089de <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f240 4209 	movw	r2, #1033	; 0x409
 80089da:	829a      	strh	r2, [r3, #20]
 80089dc:	e002      	b.n	80089e4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	8b3a      	ldrh	r2, [r7, #24]
 80089e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80089ea:	8b3b      	ldrh	r3, [r7, #24]
 80089ec:	461a      	mov	r2, r3
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f000 fa50 	bl	8008e96 <USBH_CtlReq>
 80089f6:	4603      	mov	r3, r0
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	789b      	ldrb	r3, [r3, #2]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d10f      	bne.n	8008a34 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008a20:	78fb      	ldrb	r3, [r7, #3]
 8008a22:	b29a      	uxth	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a34:	2200      	movs	r2, #0
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fa2c 	bl	8008e96 <USBH_CtlReq>
 8008a3e:	4603      	mov	r3, r0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	789b      	ldrb	r3, [r3, #2]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d10e      	bne.n	8008a7a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2209      	movs	r2, #9
 8008a66:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	887a      	ldrh	r2, [r7, #2]
 8008a6c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f000 fa09 	bl	8008e96 <USBH_CtlReq>
 8008a84:	4603      	mov	r3, r0
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3708      	adds	r7, #8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
 8008a96:	460b      	mov	r3, r1
 8008a98:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	789b      	ldrb	r3, [r3, #2]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d10f      	bne.n	8008ac2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2203      	movs	r2, #3
 8008aac:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2200      	movs	r2, #0
 8008aba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2100      	movs	r1, #0
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f9e5 	bl	8008e96 <USBH_CtlReq>
 8008acc:	4603      	mov	r3, r0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	460b      	mov	r3, r1
 8008ae0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	789b      	ldrb	r3, [r3, #2]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d10f      	bne.n	8008b0a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2202      	movs	r2, #2
 8008aee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	b29a      	uxth	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f9c1 	bl	8008e96 <USBH_CtlReq>
 8008b14:	4603      	mov	r3, r0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3708      	adds	r7, #8
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	781a      	ldrb	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	785a      	ldrb	r2, [r3, #1]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	3302      	adds	r3, #2
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	3303      	adds	r3, #3
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	021b      	lsls	r3, r3, #8
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	4313      	orrs	r3, r2
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	791a      	ldrb	r2, [r3, #4]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	795a      	ldrb	r2, [r3, #5]
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	799a      	ldrb	r2, [r3, #6]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	79da      	ldrb	r2, [r3, #7]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008b78:	88fb      	ldrh	r3, [r7, #6]
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d939      	bls.n	8008bf2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	3308      	adds	r3, #8
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	b29a      	uxth	r2, r3
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	3309      	adds	r3, #9
 8008b8a:	781b      	ldrb	r3, [r3, #0]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	021b      	lsls	r3, r3, #8
 8008b90:	b29b      	uxth	r3, r3
 8008b92:	4313      	orrs	r3, r2
 8008b94:	b29a      	uxth	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	330a      	adds	r3, #10
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	330b      	adds	r3, #11
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	021b      	lsls	r3, r3, #8
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	b29a      	uxth	r2, r3
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	330c      	adds	r3, #12
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	330d      	adds	r3, #13
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	7b9a      	ldrb	r2, [r3, #14]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	7bda      	ldrb	r2, [r3, #15]
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	7c1a      	ldrb	r2, [r3, #16]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	7c5a      	ldrb	r2, [r3, #17]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	745a      	strb	r2, [r3, #17]
  }
}
 8008bf2:	bf00      	nop
 8008bf4:	3714      	adds	r7, #20
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b08a      	sub	sp, #40	; 0x28
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	60f8      	str	r0, [r7, #12]
 8008c06:	60b9      	str	r1, [r7, #8]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8008c16:	2300      	movs	r3, #0
 8008c18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	781a      	ldrb	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	785a      	ldrb	r2, [r3, #1]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	3302      	adds	r3, #2
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	3303      	adds	r3, #3
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	4313      	orrs	r3, r2
 8008c46:	b29a      	uxth	r2, r3
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	791a      	ldrb	r2, [r3, #4]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	795a      	ldrb	r2, [r3, #5]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	799a      	ldrb	r2, [r3, #6]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	79da      	ldrb	r2, [r3, #7]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	7a1a      	ldrb	r2, [r3, #8]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	2b09      	cmp	r3, #9
 8008c78:	d95f      	bls.n	8008d3a <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008c7a:	2309      	movs	r3, #9
 8008c7c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c82:	e051      	b.n	8008d28 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008c84:	f107 0316 	add.w	r3, r7, #22
 8008c88:	4619      	mov	r1, r3
 8008c8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008c8c:	f000 f8e8 	bl	8008e60 <USBH_GetNextDesc>
 8008c90:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8008c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c94:	785b      	ldrb	r3, [r3, #1]
 8008c96:	2b04      	cmp	r3, #4
 8008c98:	d146      	bne.n	8008d28 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008c9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008c9e:	221a      	movs	r2, #26
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	3308      	adds	r3, #8
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	4413      	add	r3, r2
 8008caa:	3302      	adds	r3, #2
 8008cac:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008cae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cb0:	69f8      	ldr	r0, [r7, #28]
 8008cb2:	f000 f846 	bl	8008d42 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008cc0:	e022      	b.n	8008d08 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008cc2:	f107 0316 	add.w	r3, r7, #22
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008cca:	f000 f8c9 	bl	8008e60 <USBH_GetNextDesc>
 8008cce:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8008cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	2b05      	cmp	r3, #5
 8008cd6:	d117      	bne.n	8008d08 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008cd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008cdc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008ce0:	3201      	adds	r2, #1
 8008ce2:	00d2      	lsls	r2, r2, #3
 8008ce4:	211a      	movs	r1, #26
 8008ce6:	fb01 f303 	mul.w	r3, r1, r3
 8008cea:	4413      	add	r3, r2
 8008cec:	3308      	adds	r3, #8
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8008cf6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008cf8:	69b8      	ldr	r0, [r7, #24]
 8008cfa:	f000 f851 	bl	8008da0 <USBH_ParseEPDesc>
            ep_ix++;
 8008cfe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008d02:	3301      	adds	r3, #1
 8008d04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	791b      	ldrb	r3, [r3, #4]
 8008d0c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d204      	bcs.n	8008d1e <USBH_ParseCfgDesc+0x120>
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	885a      	ldrh	r2, [r3, #2]
 8008d18:	8afb      	ldrh	r3, [r7, #22]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d8d1      	bhi.n	8008cc2 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8008d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d22:	3301      	adds	r3, #1
 8008d24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d804      	bhi.n	8008d3a <USBH_ParseCfgDesc+0x13c>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	885a      	ldrh	r2, [r3, #2]
 8008d34:	8afb      	ldrh	r3, [r7, #22]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d8a4      	bhi.n	8008c84 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008d3a:	bf00      	nop
 8008d3c:	3728      	adds	r7, #40	; 0x28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8008d42:	b480      	push	{r7}
 8008d44:	b083      	sub	sp, #12
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	781a      	ldrb	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	785a      	ldrb	r2, [r3, #1]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	789a      	ldrb	r2, [r3, #2]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	78da      	ldrb	r2, [r3, #3]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	791a      	ldrb	r2, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	795a      	ldrb	r2, [r3, #5]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	799a      	ldrb	r2, [r3, #6]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	79da      	ldrb	r2, [r3, #7]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	7a1a      	ldrb	r2, [r3, #8]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	721a      	strb	r2, [r3, #8]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	785a      	ldrb	r2, [r3, #1]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	789a      	ldrb	r2, [r3, #2]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	78da      	ldrb	r2, [r3, #3]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	3304      	adds	r3, #4
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	3305      	adds	r3, #5
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	4313      	orrs	r3, r2
 8008de0:	b29a      	uxth	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	799a      	ldrb	r2, [r3, #6]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	719a      	strb	r2, [r3, #6]
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b087      	sub	sp, #28
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	60f8      	str	r0, [r7, #12]
 8008e02:	60b9      	str	r1, [r7, #8]
 8008e04:	4613      	mov	r3, r2
 8008e06:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d120      	bne.n	8008e54 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	781b      	ldrb	r3, [r3, #0]
 8008e16:	1e9a      	subs	r2, r3, #2
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bf28      	it	cs
 8008e1e:	4613      	movcs	r3, r2
 8008e20:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3302      	adds	r3, #2
 8008e26:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	82fb      	strh	r3, [r7, #22]
 8008e2c:	e00b      	b.n	8008e46 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008e2e:	8afb      	ldrh	r3, [r7, #22]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008e40:	8afb      	ldrh	r3, [r7, #22]
 8008e42:	3302      	adds	r3, #2
 8008e44:	82fb      	strh	r3, [r7, #22]
 8008e46:	8afa      	ldrh	r2, [r7, #22]
 8008e48:	8abb      	ldrh	r3, [r7, #20]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d3ef      	bcc.n	8008e2e <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	701a      	strb	r2, [r3, #0]
  }
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	881a      	ldrh	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	4413      	add	r3, r2
 8008e76:	b29a      	uxth	r2, r3
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	781b      	ldrb	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4413      	add	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e88:	68fb      	ldr	r3, [r7, #12]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e96:	b580      	push	{r7, lr}
 8008e98:	b086      	sub	sp, #24
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	60f8      	str	r0, [r7, #12]
 8008e9e:	60b9      	str	r1, [r7, #8]
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	789b      	ldrb	r3, [r3, #2]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d002      	beq.n	8008eb6 <USBH_CtlReq+0x20>
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d00f      	beq.n	8008ed4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008eb4:	e027      	b.n	8008f06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	68ba      	ldr	r2, [r7, #8]
 8008eba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	88fa      	ldrh	r2, [r7, #6]
 8008ec0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed2:	e018      	b.n	8008f06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 f81b 	bl	8008f10 <USBH_HandleControl>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d002      	beq.n	8008eea <USBH_CtlReq+0x54>
 8008ee4:	7dfb      	ldrb	r3, [r7, #23]
 8008ee6:	2b03      	cmp	r3, #3
 8008ee8:	d106      	bne.n	8008ef8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2201      	movs	r2, #1
 8008eee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	761a      	strb	r2, [r3, #24]
      break;
 8008ef6:	e005      	b.n	8008f04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d102      	bne.n	8008f04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2201      	movs	r2, #1
 8008f02:	709a      	strb	r2, [r3, #2]
      break;
 8008f04:	bf00      	nop
  }
  return status;
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3718      	adds	r7, #24
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b086      	sub	sp, #24
 8008f14:	af02      	add	r7, sp, #8
 8008f16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	7e1b      	ldrb	r3, [r3, #24]
 8008f24:	3b01      	subs	r3, #1
 8008f26:	2b0a      	cmp	r3, #10
 8008f28:	f200 8156 	bhi.w	80091d8 <USBH_HandleControl+0x2c8>
 8008f2c:	a201      	add	r2, pc, #4	; (adr r2, 8008f34 <USBH_HandleControl+0x24>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008f61 	.word	0x08008f61
 8008f38:	08008f7b 	.word	0x08008f7b
 8008f3c:	08008fe5 	.word	0x08008fe5
 8008f40:	0800900b 	.word	0x0800900b
 8008f44:	08009043 	.word	0x08009043
 8008f48:	0800906d 	.word	0x0800906d
 8008f4c:	080090bf 	.word	0x080090bf
 8008f50:	080090e1 	.word	0x080090e1
 8008f54:	0800911d 	.word	0x0800911d
 8008f58:	08009143 	.word	0x08009143
 8008f5c:	08009181 	.word	0x08009181
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f103 0110 	add.w	r1, r3, #16
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	795b      	ldrb	r3, [r3, #5]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f000 f943 	bl	80091f8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2202      	movs	r2, #2
 8008f76:	761a      	strb	r2, [r3, #24]
      break;
 8008f78:	e139      	b.n	80091ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	795b      	ldrb	r3, [r3, #5]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 fcc5 	bl	8009910 <USBH_LL_GetURBState>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d11e      	bne.n	8008fce <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	7c1b      	ldrb	r3, [r3, #16]
 8008f94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008f98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	8adb      	ldrh	r3, [r3, #22]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00a      	beq.n	8008fb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008fa2:	7b7b      	ldrb	r3, [r7, #13]
 8008fa4:	2b80      	cmp	r3, #128	; 0x80
 8008fa6:	d103      	bne.n	8008fb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2203      	movs	r2, #3
 8008fac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008fae:	e115      	b.n	80091dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2205      	movs	r2, #5
 8008fb4:	761a      	strb	r2, [r3, #24]
      break;
 8008fb6:	e111      	b.n	80091dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008fb8:	7b7b      	ldrb	r3, [r7, #13]
 8008fba:	2b80      	cmp	r3, #128	; 0x80
 8008fbc:	d103      	bne.n	8008fc6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2209      	movs	r2, #9
 8008fc2:	761a      	strb	r2, [r3, #24]
      break;
 8008fc4:	e10a      	b.n	80091dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2207      	movs	r2, #7
 8008fca:	761a      	strb	r2, [r3, #24]
      break;
 8008fcc:	e106      	b.n	80091dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b04      	cmp	r3, #4
 8008fd2:	d003      	beq.n	8008fdc <USBH_HandleControl+0xcc>
 8008fd4:	7bbb      	ldrb	r3, [r7, #14]
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	f040 8100 	bne.w	80091dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	220b      	movs	r2, #11
 8008fe0:	761a      	strb	r2, [r3, #24]
      break;
 8008fe2:	e0fb      	b.n	80091dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6899      	ldr	r1, [r3, #8]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	899a      	ldrh	r2, [r3, #12]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	791b      	ldrb	r3, [r3, #4]
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f93a 	bl	8009276 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2204      	movs	r2, #4
 8009006:	761a      	strb	r2, [r3, #24]
      break;
 8009008:	e0f1      	b.n	80091ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	791b      	ldrb	r3, [r3, #4]
 800900e:	4619      	mov	r1, r3
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f000 fc7d 	bl	8009910 <USBH_LL_GetURBState>
 8009016:	4603      	mov	r3, r0
 8009018:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800901a:	7bbb      	ldrb	r3, [r7, #14]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d102      	bne.n	8009026 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2209      	movs	r2, #9
 8009024:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b05      	cmp	r3, #5
 800902a:	d102      	bne.n	8009032 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800902c:	2303      	movs	r3, #3
 800902e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009030:	e0d6      	b.n	80091e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009032:	7bbb      	ldrb	r3, [r7, #14]
 8009034:	2b04      	cmp	r3, #4
 8009036:	f040 80d3 	bne.w	80091e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	220b      	movs	r2, #11
 800903e:	761a      	strb	r2, [r3, #24]
      break;
 8009040:	e0ce      	b.n	80091e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6899      	ldr	r1, [r3, #8]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	899a      	ldrh	r2, [r3, #12]
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	795b      	ldrb	r3, [r3, #5]
 800904e:	2001      	movs	r0, #1
 8009050:	9000      	str	r0, [sp, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 f8ea 	bl	800922c <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800905e:	b29a      	uxth	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2206      	movs	r2, #6
 8009068:	761a      	strb	r2, [r3, #24]
      break;
 800906a:	e0c0      	b.n	80091ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	795b      	ldrb	r3, [r3, #5]
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fc4c 	bl	8009910 <USBH_LL_GetURBState>
 8009078:	4603      	mov	r3, r0
 800907a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b01      	cmp	r3, #1
 8009080:	d103      	bne.n	800908a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2207      	movs	r2, #7
 8009086:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009088:	e0ac      	b.n	80091e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b05      	cmp	r3, #5
 800908e:	d105      	bne.n	800909c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	220c      	movs	r2, #12
 8009094:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009096:	2303      	movs	r3, #3
 8009098:	73fb      	strb	r3, [r7, #15]
      break;
 800909a:	e0a3      	b.n	80091e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d103      	bne.n	80090aa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2205      	movs	r2, #5
 80090a6:	761a      	strb	r2, [r3, #24]
      break;
 80090a8:	e09c      	b.n	80091e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80090aa:	7bbb      	ldrb	r3, [r7, #14]
 80090ac:	2b04      	cmp	r3, #4
 80090ae:	f040 8099 	bne.w	80091e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	220b      	movs	r2, #11
 80090b6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80090b8:	2302      	movs	r3, #2
 80090ba:	73fb      	strb	r3, [r7, #15]
      break;
 80090bc:	e092      	b.n	80091e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	791b      	ldrb	r3, [r3, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	2100      	movs	r1, #0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f8d5 	bl	8009276 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2208      	movs	r2, #8
 80090dc:	761a      	strb	r2, [r3, #24]

      break;
 80090de:	e086      	b.n	80091ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	791b      	ldrb	r3, [r3, #4]
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fc12 	bl	8009910 <USBH_LL_GetURBState>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090f0:	7bbb      	ldrb	r3, [r7, #14]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d105      	bne.n	8009102 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	220d      	movs	r2, #13
 80090fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009100:	e072      	b.n	80091e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b04      	cmp	r3, #4
 8009106:	d103      	bne.n	8009110 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	220b      	movs	r2, #11
 800910c:	761a      	strb	r2, [r3, #24]
      break;
 800910e:	e06b      	b.n	80091e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009110:	7bbb      	ldrb	r3, [r7, #14]
 8009112:	2b05      	cmp	r3, #5
 8009114:	d168      	bne.n	80091e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009116:	2303      	movs	r3, #3
 8009118:	73fb      	strb	r3, [r7, #15]
      break;
 800911a:	e065      	b.n	80091e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	795b      	ldrb	r3, [r3, #5]
 8009120:	2201      	movs	r2, #1
 8009122:	9200      	str	r2, [sp, #0]
 8009124:	2200      	movs	r2, #0
 8009126:	2100      	movs	r1, #0
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 f87f 	bl	800922c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	220a      	movs	r2, #10
 800913e:	761a      	strb	r2, [r3, #24]
      break;
 8009140:	e055      	b.n	80091ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	795b      	ldrb	r3, [r3, #5]
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fbe1 	bl	8009910 <USBH_LL_GetURBState>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d105      	bne.n	8009164 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009158:	2300      	movs	r3, #0
 800915a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	220d      	movs	r2, #13
 8009160:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8009162:	e043      	b.n	80091ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009164:	7bbb      	ldrb	r3, [r7, #14]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d103      	bne.n	8009172 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2209      	movs	r2, #9
 800916e:	761a      	strb	r2, [r3, #24]
      break;
 8009170:	e03c      	b.n	80091ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	2b04      	cmp	r3, #4
 8009176:	d139      	bne.n	80091ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	220b      	movs	r2, #11
 800917c:	761a      	strb	r2, [r3, #24]
      break;
 800917e:	e035      	b.n	80091ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7e5b      	ldrb	r3, [r3, #25]
 8009184:	3301      	adds	r3, #1
 8009186:	b2da      	uxtb	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	765a      	strb	r2, [r3, #25]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	7e5b      	ldrb	r3, [r3, #25]
 8009190:	2b02      	cmp	r3, #2
 8009192:	d806      	bhi.n	80091a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80091a0:	e025      	b.n	80091ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091a8:	2106      	movs	r1, #6
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	795b      	ldrb	r3, [r3, #5]
 80091b8:	4619      	mov	r1, r3
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 f90c 	bl	80093d8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	791b      	ldrb	r3, [r3, #4]
 80091c4:	4619      	mov	r1, r3
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f906 	bl	80093d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80091d2:	2302      	movs	r3, #2
 80091d4:	73fb      	strb	r3, [r7, #15]
      break;
 80091d6:	e00a      	b.n	80091ee <USBH_HandleControl+0x2de>

    default:
      break;
 80091d8:	bf00      	nop
 80091da:	e008      	b.n	80091ee <USBH_HandleControl+0x2de>
      break;
 80091dc:	bf00      	nop
 80091de:	e006      	b.n	80091ee <USBH_HandleControl+0x2de>
      break;
 80091e0:	bf00      	nop
 80091e2:	e004      	b.n	80091ee <USBH_HandleControl+0x2de>
      break;
 80091e4:	bf00      	nop
 80091e6:	e002      	b.n	80091ee <USBH_HandleControl+0x2de>
      break;
 80091e8:	bf00      	nop
 80091ea:	e000      	b.n	80091ee <USBH_HandleControl+0x2de>
      break;
 80091ec:	bf00      	nop
  }

  return status;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b088      	sub	sp, #32
 80091fc:	af04      	add	r7, sp, #16
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4613      	mov	r3, r2
 8009204:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009206:	79f9      	ldrb	r1, [r7, #7]
 8009208:	2300      	movs	r3, #0
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	2308      	movs	r3, #8
 800920e:	9302      	str	r3, [sp, #8]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	9301      	str	r3, [sp, #4]
 8009214:	2300      	movs	r3, #0
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	2300      	movs	r3, #0
 800921a:	2200      	movs	r2, #0
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f000 fb46 	bl	80098ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 8009222:	2300      	movs	r3, #0
}
 8009224:	4618      	mov	r0, r3
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af04      	add	r7, sp, #16
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	60b9      	str	r1, [r7, #8]
 8009236:	4611      	mov	r1, r2
 8009238:	461a      	mov	r2, r3
 800923a:	460b      	mov	r3, r1
 800923c:	80fb      	strh	r3, [r7, #6]
 800923e:	4613      	mov	r3, r2
 8009240:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009248:	2b00      	cmp	r3, #0
 800924a:	d001      	beq.n	8009250 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009250:	7979      	ldrb	r1, [r7, #5]
 8009252:	7e3b      	ldrb	r3, [r7, #24]
 8009254:	9303      	str	r3, [sp, #12]
 8009256:	88fb      	ldrh	r3, [r7, #6]
 8009258:	9302      	str	r3, [sp, #8]
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	2301      	movs	r3, #1
 8009260:	9300      	str	r3, [sp, #0]
 8009262:	2300      	movs	r3, #0
 8009264:	2200      	movs	r2, #0
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f000 fb21 	bl	80098ae <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b088      	sub	sp, #32
 800927a:	af04      	add	r7, sp, #16
 800927c:	60f8      	str	r0, [r7, #12]
 800927e:	60b9      	str	r1, [r7, #8]
 8009280:	4611      	mov	r1, r2
 8009282:	461a      	mov	r2, r3
 8009284:	460b      	mov	r3, r1
 8009286:	80fb      	strh	r3, [r7, #6]
 8009288:	4613      	mov	r3, r2
 800928a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800928c:	7979      	ldrb	r1, [r7, #5]
 800928e:	2300      	movs	r3, #0
 8009290:	9303      	str	r3, [sp, #12]
 8009292:	88fb      	ldrh	r3, [r7, #6]
 8009294:	9302      	str	r3, [sp, #8]
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	2301      	movs	r3, #1
 800929c:	9300      	str	r3, [sp, #0]
 800929e:	2300      	movs	r3, #0
 80092a0:	2201      	movs	r2, #1
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f000 fb03 	bl	80098ae <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80092a8:	2300      	movs	r3, #0

}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b088      	sub	sp, #32
 80092b6:	af04      	add	r7, sp, #16
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	60b9      	str	r1, [r7, #8]
 80092bc:	4611      	mov	r1, r2
 80092be:	461a      	mov	r2, r3
 80092c0:	460b      	mov	r3, r1
 80092c2:	80fb      	strh	r3, [r7, #6]
 80092c4:	4613      	mov	r3, r2
 80092c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80092d2:	2300      	movs	r3, #0
 80092d4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80092d6:	7979      	ldrb	r1, [r7, #5]
 80092d8:	7e3b      	ldrb	r3, [r7, #24]
 80092da:	9303      	str	r3, [sp, #12]
 80092dc:	88fb      	ldrh	r3, [r7, #6]
 80092de:	9302      	str	r3, [sp, #8]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	9301      	str	r3, [sp, #4]
 80092e4:	2301      	movs	r3, #1
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	2302      	movs	r3, #2
 80092ea:	2200      	movs	r2, #0
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 fade 	bl	80098ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b088      	sub	sp, #32
 8009300:	af04      	add	r7, sp, #16
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	4611      	mov	r1, r2
 8009308:	461a      	mov	r2, r3
 800930a:	460b      	mov	r3, r1
 800930c:	80fb      	strh	r3, [r7, #6]
 800930e:	4613      	mov	r3, r2
 8009310:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009312:	7979      	ldrb	r1, [r7, #5]
 8009314:	2300      	movs	r3, #0
 8009316:	9303      	str	r3, [sp, #12]
 8009318:	88fb      	ldrh	r3, [r7, #6]
 800931a:	9302      	str	r3, [sp, #8]
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	2301      	movs	r3, #1
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	2302      	movs	r3, #2
 8009326:	2201      	movs	r2, #1
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 fac0 	bl	80098ae <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b086      	sub	sp, #24
 800933c:	af04      	add	r7, sp, #16
 800933e:	6078      	str	r0, [r7, #4]
 8009340:	4608      	mov	r0, r1
 8009342:	4611      	mov	r1, r2
 8009344:	461a      	mov	r2, r3
 8009346:	4603      	mov	r3, r0
 8009348:	70fb      	strb	r3, [r7, #3]
 800934a:	460b      	mov	r3, r1
 800934c:	70bb      	strb	r3, [r7, #2]
 800934e:	4613      	mov	r3, r2
 8009350:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009352:	7878      	ldrb	r0, [r7, #1]
 8009354:	78ba      	ldrb	r2, [r7, #2]
 8009356:	78f9      	ldrb	r1, [r7, #3]
 8009358:	8b3b      	ldrh	r3, [r7, #24]
 800935a:	9302      	str	r3, [sp, #8]
 800935c:	7d3b      	ldrb	r3, [r7, #20]
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	7c3b      	ldrb	r3, [r7, #16]
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	4603      	mov	r3, r0
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa53 	bl	8009812 <USBH_LL_OpenPipe>

  return USBH_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3708      	adds	r7, #8
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b082      	sub	sp, #8
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
 800937e:	460b      	mov	r3, r1
 8009380:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8009382:	78fb      	ldrb	r3, [r7, #3]
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fa72 	bl	8009870 <USBH_LL_ClosePipe>

  return USBH_OK;
 800938c:	2300      	movs	r3, #0
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b084      	sub	sp, #16
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f836 	bl	8009414 <USBH_GetFreePipe>
 80093a8:	4603      	mov	r3, r0
 80093aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80093ac:	89fb      	ldrh	r3, [r7, #14]
 80093ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00a      	beq.n	80093cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80093b6:	78fa      	ldrb	r2, [r7, #3]
 80093b8:	89fb      	ldrh	r3, [r7, #14]
 80093ba:	f003 030f 	and.w	r3, r3, #15
 80093be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	33e0      	adds	r3, #224	; 0xe0
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80093cc:	89fb      	ldrh	r3, [r7, #14]
 80093ce:	b2db      	uxtb	r3, r3
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	460b      	mov	r3, r1
 80093e2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80093e4:	78fb      	ldrb	r3, [r7, #3]
 80093e6:	2b0a      	cmp	r3, #10
 80093e8:	d80d      	bhi.n	8009406 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80093ea:	78fb      	ldrb	r3, [r7, #3]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	33e0      	adds	r3, #224	; 0xe0
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	78fb      	ldrb	r3, [r7, #3]
 80093f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	33e0      	adds	r3, #224	; 0xe0
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	440b      	add	r3, r1
 8009404:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
 8009424:	e00f      	b.n	8009446 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	33e0      	adds	r3, #224	; 0xe0
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4413      	add	r3, r2
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009436:	2b00      	cmp	r3, #0
 8009438:	d102      	bne.n	8009440 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800943a:	7bfb      	ldrb	r3, [r7, #15]
 800943c:	b29b      	uxth	r3, r3
 800943e:	e007      	b.n	8009450 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009440:	7bfb      	ldrb	r3, [r7, #15]
 8009442:	3301      	adds	r3, #1
 8009444:	73fb      	strb	r3, [r7, #15]
 8009446:	7bfb      	ldrb	r3, [r7, #15]
 8009448:	2b0a      	cmp	r3, #10
 800944a:	d9ec      	bls.n	8009426 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800944c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009450:	4618      	mov	r0, r3
 8009452:	3714      	adds	r7, #20
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009460:	2201      	movs	r2, #1
 8009462:	490e      	ldr	r1, [pc, #56]	; (800949c <MX_USB_HOST_Init+0x40>)
 8009464:	480e      	ldr	r0, [pc, #56]	; (80094a0 <MX_USB_HOST_Init+0x44>)
 8009466:	f7fe fca1 	bl	8007dac <USBH_Init>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	d001      	beq.n	8009474 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009470:	f7f7 fc50 	bl	8000d14 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009474:	490b      	ldr	r1, [pc, #44]	; (80094a4 <MX_USB_HOST_Init+0x48>)
 8009476:	480a      	ldr	r0, [pc, #40]	; (80094a0 <MX_USB_HOST_Init+0x44>)
 8009478:	f7fe fd26 	bl	8007ec8 <USBH_RegisterClass>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009482:	f7f7 fc47 	bl	8000d14 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009486:	4806      	ldr	r0, [pc, #24]	; (80094a0 <MX_USB_HOST_Init+0x44>)
 8009488:	f7fe fdaa 	bl	8007fe0 <USBH_Start>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009492:	f7f7 fc3f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009496:	bf00      	nop
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	080094bd 	.word	0x080094bd
 80094a0:	20000568 	.word	0x20000568
 80094a4:	20000028 	.word	0x20000028

080094a8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80094ac:	4802      	ldr	r0, [pc, #8]	; (80094b8 <MX_USB_HOST_Process+0x10>)
 80094ae:	f7fe fda7 	bl	8008000 <USBH_Process>
}
 80094b2:	bf00      	nop
 80094b4:	bd80      	pop	{r7, pc}
 80094b6:	bf00      	nop
 80094b8:	20000568 	.word	0x20000568

080094bc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80094bc:	b480      	push	{r7}
 80094be:	b083      	sub	sp, #12
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80094c8:	78fb      	ldrb	r3, [r7, #3]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	2b04      	cmp	r3, #4
 80094ce:	d819      	bhi.n	8009504 <USBH_UserProcess+0x48>
 80094d0:	a201      	add	r2, pc, #4	; (adr r2, 80094d8 <USBH_UserProcess+0x1c>)
 80094d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094d6:	bf00      	nop
 80094d8:	08009505 	.word	0x08009505
 80094dc:	080094f5 	.word	0x080094f5
 80094e0:	08009505 	.word	0x08009505
 80094e4:	080094fd 	.word	0x080094fd
 80094e8:	080094ed 	.word	0x080094ed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80094ec:	4b09      	ldr	r3, [pc, #36]	; (8009514 <USBH_UserProcess+0x58>)
 80094ee:	2203      	movs	r2, #3
 80094f0:	701a      	strb	r2, [r3, #0]
  break;
 80094f2:	e008      	b.n	8009506 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094f4:	4b07      	ldr	r3, [pc, #28]	; (8009514 <USBH_UserProcess+0x58>)
 80094f6:	2202      	movs	r2, #2
 80094f8:	701a      	strb	r2, [r3, #0]
  break;
 80094fa:	e004      	b.n	8009506 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094fc:	4b05      	ldr	r3, [pc, #20]	; (8009514 <USBH_UserProcess+0x58>)
 80094fe:	2201      	movs	r2, #1
 8009500:	701a      	strb	r2, [r3, #0]
  break;
 8009502:	e000      	b.n	8009506 <USBH_UserProcess+0x4a>

  default:
  break;
 8009504:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009506:	bf00      	nop
 8009508:	370c      	adds	r7, #12
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	200000cc 	.word	0x200000cc

08009518 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009520:	f107 0314 	add.w	r3, r7, #20
 8009524:	2200      	movs	r2, #0
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	605a      	str	r2, [r3, #4]
 800952a:	609a      	str	r2, [r3, #8]
 800952c:	60da      	str	r2, [r3, #12]
 800952e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009538:	d147      	bne.n	80095ca <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800953a:	2300      	movs	r3, #0
 800953c:	613b      	str	r3, [r7, #16]
 800953e:	4b25      	ldr	r3, [pc, #148]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	4a24      	ldr	r2, [pc, #144]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009544:	f043 0301 	orr.w	r3, r3, #1
 8009548:	6313      	str	r3, [r2, #48]	; 0x30
 800954a:	4b22      	ldr	r3, [pc, #136]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 800954c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	613b      	str	r3, [r7, #16]
 8009554:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800955a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800955c:	2300      	movs	r3, #0
 800955e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009560:	2300      	movs	r3, #0
 8009562:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009564:	f107 0314 	add.w	r3, r7, #20
 8009568:	4619      	mov	r1, r3
 800956a:	481b      	ldr	r0, [pc, #108]	; (80095d8 <HAL_HCD_MspInit+0xc0>)
 800956c:	f7f9 f99e 	bl	80028ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009570:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009576:	2302      	movs	r3, #2
 8009578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800957a:	2300      	movs	r3, #0
 800957c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800957e:	2300      	movs	r3, #0
 8009580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009582:	230a      	movs	r3, #10
 8009584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009586:	f107 0314 	add.w	r3, r7, #20
 800958a:	4619      	mov	r1, r3
 800958c:	4812      	ldr	r0, [pc, #72]	; (80095d8 <HAL_HCD_MspInit+0xc0>)
 800958e:	f7f9 f98d 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009592:	4b10      	ldr	r3, [pc, #64]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009596:	4a0f      	ldr	r2, [pc, #60]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 8009598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800959c:	6353      	str	r3, [r2, #52]	; 0x34
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	4b0c      	ldr	r3, [pc, #48]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 80095a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095a6:	4a0b      	ldr	r2, [pc, #44]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 80095a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80095ac:	6453      	str	r3, [r2, #68]	; 0x44
 80095ae:	4b09      	ldr	r3, [pc, #36]	; (80095d4 <HAL_HCD_MspInit+0xbc>)
 80095b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095b6:	60fb      	str	r3, [r7, #12]
 80095b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80095ba:	2200      	movs	r2, #0
 80095bc:	2100      	movs	r1, #0
 80095be:	2043      	movs	r0, #67	; 0x43
 80095c0:	f7f8 fce5 	bl	8001f8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80095c4:	2043      	movs	r0, #67	; 0x43
 80095c6:	f7f8 fcfe 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80095ca:	bf00      	nop
 80095cc:	3728      	adds	r7, #40	; 0x28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	40023800 	.word	0x40023800
 80095d8:	40020000 	.word	0x40020000

080095dc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b082      	sub	sp, #8
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff f8db 	bl	80087a6 <USBH_LL_IncTimer>
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009606:	4618      	mov	r0, r3
 8009608:	f7ff f913 	bl	8008832 <USBH_LL_Connect>
}
 800960c:	bf00      	nop
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009622:	4618      	mov	r0, r3
 8009624:	f7ff f91c 	bl	8008860 <USBH_LL_Disconnect>
}
 8009628:	bf00      	nop
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
 800963c:	4613      	mov	r3, r2
 800963e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr

0800964c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800965a:	4618      	mov	r0, r3
 800965c:	f7ff f8cd 	bl	80087fa <USBH_LL_PortEnabled>
}
 8009660:	bf00      	nop
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009676:	4618      	mov	r0, r3
 8009678:	f7ff f8cd 	bl	8008816 <USBH_LL_PortDisabled>
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009692:	2b01      	cmp	r3, #1
 8009694:	d12a      	bne.n	80096ec <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009696:	4a18      	ldr	r2, [pc, #96]	; (80096f8 <USBH_LL_Init+0x74>)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a15      	ldr	r2, [pc, #84]	; (80096f8 <USBH_LL_Init+0x74>)
 80096a2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096a6:	4b14      	ldr	r3, [pc, #80]	; (80096f8 <USBH_LL_Init+0x74>)
 80096a8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096ac:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80096ae:	4b12      	ldr	r3, [pc, #72]	; (80096f8 <USBH_LL_Init+0x74>)
 80096b0:	2208      	movs	r2, #8
 80096b2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80096b4:	4b10      	ldr	r3, [pc, #64]	; (80096f8 <USBH_LL_Init+0x74>)
 80096b6:	2201      	movs	r2, #1
 80096b8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <USBH_LL_Init+0x74>)
 80096bc:	2200      	movs	r2, #0
 80096be:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80096c0:	4b0d      	ldr	r3, [pc, #52]	; (80096f8 <USBH_LL_Init+0x74>)
 80096c2:	2202      	movs	r2, #2
 80096c4:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80096c6:	4b0c      	ldr	r3, [pc, #48]	; (80096f8 <USBH_LL_Init+0x74>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80096cc:	480a      	ldr	r0, [pc, #40]	; (80096f8 <USBH_LL_Init+0x74>)
 80096ce:	f7f9 faa2 	bl	8002c16 <HAL_HCD_Init>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80096d8:	f7f7 fb1c 	bl	8000d14 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80096dc:	4806      	ldr	r0, [pc, #24]	; (80096f8 <USBH_LL_Init+0x74>)
 80096de:	f7f9 fe86 	bl	80033ee <HAL_HCD_GetCurrentFrame>
 80096e2:	4603      	mov	r3, r0
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7ff f84e 	bl	8008788 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000940 	.word	0x20000940

080096fc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009712:	4618      	mov	r0, r3
 8009714:	f7f9 fdf5 	bl	8003302 <HAL_HCD_Start>
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	4618      	mov	r0, r3
 8009720:	f000 f95c 	bl	80099dc <USBH_Get_USB_Status>
 8009724:	4603      	mov	r3, r0
 8009726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009728:	7bbb      	ldrb	r3, [r7, #14]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800973a:	2300      	movs	r3, #0
 800973c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009748:	4618      	mov	r0, r3
 800974a:	f7f9 fdfd 	bl	8003348 <HAL_HCD_Stop>
 800974e:	4603      	mov	r3, r0
 8009750:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009752:	7bfb      	ldrb	r3, [r7, #15]
 8009754:	4618      	mov	r0, r3
 8009756:	f000 f941 	bl	80099dc <USBH_Get_USB_Status>
 800975a:	4603      	mov	r3, r0
 800975c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800975e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009760:	4618      	mov	r0, r3
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}

08009768 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b084      	sub	sp, #16
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009770:	2301      	movs	r3, #1
 8009772:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800977a:	4618      	mov	r0, r3
 800977c:	f7f9 fe45 	bl	800340a <HAL_HCD_GetCurrentSpeed>
 8009780:	4603      	mov	r3, r0
 8009782:	2b02      	cmp	r3, #2
 8009784:	d00c      	beq.n	80097a0 <USBH_LL_GetSpeed+0x38>
 8009786:	2b02      	cmp	r3, #2
 8009788:	d80d      	bhi.n	80097a6 <USBH_LL_GetSpeed+0x3e>
 800978a:	2b00      	cmp	r3, #0
 800978c:	d002      	beq.n	8009794 <USBH_LL_GetSpeed+0x2c>
 800978e:	2b01      	cmp	r3, #1
 8009790:	d003      	beq.n	800979a <USBH_LL_GetSpeed+0x32>
 8009792:	e008      	b.n	80097a6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009794:	2300      	movs	r3, #0
 8009796:	73fb      	strb	r3, [r7, #15]
    break;
 8009798:	e008      	b.n	80097ac <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800979a:	2301      	movs	r3, #1
 800979c:	73fb      	strb	r3, [r7, #15]
    break;
 800979e:	e005      	b.n	80097ac <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80097a0:	2302      	movs	r3, #2
 80097a2:	73fb      	strb	r3, [r7, #15]
    break;
 80097a4:	e002      	b.n	80097ac <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80097a6:	2301      	movs	r3, #1
 80097a8:	73fb      	strb	r3, [r7, #15]
    break;
 80097aa:	bf00      	nop
  }
  return  speed;
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7f9 fdd8 	bl	8003382 <HAL_HCD_ResetPort>
 80097d2:	4603      	mov	r3, r0
 80097d4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097d6:	7bfb      	ldrb	r3, [r7, #15]
 80097d8:	4618      	mov	r0, r3
 80097da:	f000 f8ff 	bl	80099dc <USBH_Get_USB_Status>
 80097de:	4603      	mov	r3, r0
 80097e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3710      	adds	r7, #16
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	460b      	mov	r3, r1
 80097f6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	4611      	mov	r1, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f7f9 fddf 	bl	80033c6 <HAL_HCD_HC_GetXferCount>
 8009808:	4603      	mov	r3, r0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009812:	b590      	push	{r4, r7, lr}
 8009814:	b089      	sub	sp, #36	; 0x24
 8009816:	af04      	add	r7, sp, #16
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	4608      	mov	r0, r1
 800981c:	4611      	mov	r1, r2
 800981e:	461a      	mov	r2, r3
 8009820:	4603      	mov	r3, r0
 8009822:	70fb      	strb	r3, [r7, #3]
 8009824:	460b      	mov	r3, r1
 8009826:	70bb      	strb	r3, [r7, #2]
 8009828:	4613      	mov	r3, r2
 800982a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800983a:	787c      	ldrb	r4, [r7, #1]
 800983c:	78ba      	ldrb	r2, [r7, #2]
 800983e:	78f9      	ldrb	r1, [r7, #3]
 8009840:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009842:	9302      	str	r3, [sp, #8]
 8009844:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009848:	9301      	str	r3, [sp, #4]
 800984a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800984e:	9300      	str	r3, [sp, #0]
 8009850:	4623      	mov	r3, r4
 8009852:	f7f9 fa42 	bl	8002cda <HAL_HCD_HC_Init>
 8009856:	4603      	mov	r3, r0
 8009858:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800985a:	7bfb      	ldrb	r3, [r7, #15]
 800985c:	4618      	mov	r0, r3
 800985e:	f000 f8bd 	bl	80099dc <USBH_Get_USB_Status>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009866:	7bbb      	ldrb	r3, [r7, #14]
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	bd90      	pop	{r4, r7, pc}

08009870 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800988a:	78fa      	ldrb	r2, [r7, #3]
 800988c:	4611      	mov	r1, r2
 800988e:	4618      	mov	r0, r3
 8009890:	f7f9 fab2 	bl	8002df8 <HAL_HCD_HC_Halt>
 8009894:	4603      	mov	r3, r0
 8009896:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009898:	7bfb      	ldrb	r3, [r7, #15]
 800989a:	4618      	mov	r0, r3
 800989c:	f000 f89e 	bl	80099dc <USBH_Get_USB_Status>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80098ae:	b590      	push	{r4, r7, lr}
 80098b0:	b089      	sub	sp, #36	; 0x24
 80098b2:	af04      	add	r7, sp, #16
 80098b4:	6078      	str	r0, [r7, #4]
 80098b6:	4608      	mov	r0, r1
 80098b8:	4611      	mov	r1, r2
 80098ba:	461a      	mov	r2, r3
 80098bc:	4603      	mov	r3, r0
 80098be:	70fb      	strb	r3, [r7, #3]
 80098c0:	460b      	mov	r3, r1
 80098c2:	70bb      	strb	r3, [r7, #2]
 80098c4:	4613      	mov	r3, r2
 80098c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098c8:	2300      	movs	r3, #0
 80098ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098cc:	2300      	movs	r3, #0
 80098ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80098d6:	787c      	ldrb	r4, [r7, #1]
 80098d8:	78ba      	ldrb	r2, [r7, #2]
 80098da:	78f9      	ldrb	r1, [r7, #3]
 80098dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80098e0:	9303      	str	r3, [sp, #12]
 80098e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098e4:	9302      	str	r3, [sp, #8]
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	4623      	mov	r3, r4
 80098f2:	f7f9 faa5 	bl	8002e40 <HAL_HCD_HC_SubmitRequest>
 80098f6:	4603      	mov	r3, r0
 80098f8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098fa:	7bfb      	ldrb	r3, [r7, #15]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f000 f86d 	bl	80099dc <USBH_Get_USB_Status>
 8009902:	4603      	mov	r3, r0
 8009904:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009906:	7bbb      	ldrb	r3, [r7, #14]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	bd90      	pop	{r4, r7, pc}

08009910 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
 8009918:	460b      	mov	r3, r1
 800991a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009922:	78fa      	ldrb	r2, [r7, #3]
 8009924:	4611      	mov	r1, r2
 8009926:	4618      	mov	r0, r3
 8009928:	f7f9 fd39 	bl	800339e <HAL_HCD_HC_GetURBState>
 800992c:	4603      	mov	r3, r0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009936:	b580      	push	{r7, lr}
 8009938:	b082      	sub	sp, #8
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
 800993e:	460b      	mov	r3, r1
 8009940:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009948:	2b01      	cmp	r3, #1
 800994a:	d103      	bne.n	8009954 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800994c:	78fb      	ldrb	r3, [r7, #3]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f870 	bl	8009a34 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009954:	20c8      	movs	r0, #200	; 0xc8
 8009956:	f7f7 fd35 	bl	80013c4 <HAL_Delay>
  return USBH_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
 800996c:	460b      	mov	r3, r1
 800996e:	70fb      	strb	r3, [r7, #3]
 8009970:	4613      	mov	r3, r2
 8009972:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800997a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800997c:	78fb      	ldrb	r3, [r7, #3]
 800997e:	68fa      	ldr	r2, [r7, #12]
 8009980:	212c      	movs	r1, #44	; 0x2c
 8009982:	fb01 f303 	mul.w	r3, r1, r3
 8009986:	4413      	add	r3, r2
 8009988:	333b      	adds	r3, #59	; 0x3b
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	212c      	movs	r1, #44	; 0x2c
 8009996:	fb01 f303 	mul.w	r3, r1, r3
 800999a:	4413      	add	r3, r2
 800999c:	3354      	adds	r3, #84	; 0x54
 800999e:	78ba      	ldrb	r2, [r7, #2]
 80099a0:	701a      	strb	r2, [r3, #0]
 80099a2:	e008      	b.n	80099b6 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	212c      	movs	r1, #44	; 0x2c
 80099aa:	fb01 f303 	mul.w	r3, r1, r3
 80099ae:	4413      	add	r3, r2
 80099b0:	3355      	adds	r3, #85	; 0x55
 80099b2:	78ba      	ldrb	r2, [r7, #2]
 80099b4:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7f7 fcf9 	bl	80013c4 <HAL_Delay>
}
 80099d2:	bf00      	nop
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	4603      	mov	r3, r0
 80099e4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80099e6:	2300      	movs	r3, #0
 80099e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	2b03      	cmp	r3, #3
 80099ee:	d817      	bhi.n	8009a20 <USBH_Get_USB_Status+0x44>
 80099f0:	a201      	add	r2, pc, #4	; (adr r2, 80099f8 <USBH_Get_USB_Status+0x1c>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a09 	.word	0x08009a09
 80099fc:	08009a0f 	.word	0x08009a0f
 8009a00:	08009a15 	.word	0x08009a15
 8009a04:	08009a1b 	.word	0x08009a1b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a0c:	e00b      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009a0e:	2302      	movs	r3, #2
 8009a10:	73fb      	strb	r3, [r7, #15]
    break;
 8009a12:	e008      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009a14:	2301      	movs	r3, #1
 8009a16:	73fb      	strb	r3, [r7, #15]
    break;
 8009a18:	e005      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009a1a:	2302      	movs	r3, #2
 8009a1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a1e:	e002      	b.n	8009a26 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009a20:	2302      	movs	r3, #2
 8009a22:	73fb      	strb	r3, [r7, #15]
    break;
 8009a24:	bf00      	nop
  }
  return usb_status;
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b084      	sub	sp, #16
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009a3e:	79fb      	ldrb	r3, [r7, #7]
 8009a40:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d102      	bne.n	8009a4e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]
 8009a4c:	e001      	b.n	8009a52 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	461a      	mov	r2, r3
 8009a56:	2101      	movs	r1, #1
 8009a58:	4803      	ldr	r0, [pc, #12]	; (8009a68 <MX_DriverVbusFS+0x34>)
 8009a5a:	f7f9 f8c3 	bl	8002be4 <HAL_GPIO_WritePin>
}
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	40020800 	.word	0x40020800

08009a6c <__errno>:
 8009a6c:	4b01      	ldr	r3, [pc, #4]	; (8009a74 <__errno+0x8>)
 8009a6e:	6818      	ldr	r0, [r3, #0]
 8009a70:	4770      	bx	lr
 8009a72:	bf00      	nop
 8009a74:	20000048 	.word	0x20000048

08009a78 <__libc_init_array>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	4d0d      	ldr	r5, [pc, #52]	; (8009ab0 <__libc_init_array+0x38>)
 8009a7c:	4c0d      	ldr	r4, [pc, #52]	; (8009ab4 <__libc_init_array+0x3c>)
 8009a7e:	1b64      	subs	r4, r4, r5
 8009a80:	10a4      	asrs	r4, r4, #2
 8009a82:	2600      	movs	r6, #0
 8009a84:	42a6      	cmp	r6, r4
 8009a86:	d109      	bne.n	8009a9c <__libc_init_array+0x24>
 8009a88:	4d0b      	ldr	r5, [pc, #44]	; (8009ab8 <__libc_init_array+0x40>)
 8009a8a:	4c0c      	ldr	r4, [pc, #48]	; (8009abc <__libc_init_array+0x44>)
 8009a8c:	f000 f8f8 	bl	8009c80 <_init>
 8009a90:	1b64      	subs	r4, r4, r5
 8009a92:	10a4      	asrs	r4, r4, #2
 8009a94:	2600      	movs	r6, #0
 8009a96:	42a6      	cmp	r6, r4
 8009a98:	d105      	bne.n	8009aa6 <__libc_init_array+0x2e>
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aa0:	4798      	blx	r3
 8009aa2:	3601      	adds	r6, #1
 8009aa4:	e7ee      	b.n	8009a84 <__libc_init_array+0xc>
 8009aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aaa:	4798      	blx	r3
 8009aac:	3601      	adds	r6, #1
 8009aae:	e7f2      	b.n	8009a96 <__libc_init_array+0x1e>
 8009ab0:	08009cc4 	.word	0x08009cc4
 8009ab4:	08009cc4 	.word	0x08009cc4
 8009ab8:	08009cc4 	.word	0x08009cc4
 8009abc:	08009cc8 	.word	0x08009cc8

08009ac0 <malloc>:
 8009ac0:	4b02      	ldr	r3, [pc, #8]	; (8009acc <malloc+0xc>)
 8009ac2:	4601      	mov	r1, r0
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	f000 b863 	b.w	8009b90 <_malloc_r>
 8009aca:	bf00      	nop
 8009acc:	20000048 	.word	0x20000048

08009ad0 <free>:
 8009ad0:	4b02      	ldr	r3, [pc, #8]	; (8009adc <free+0xc>)
 8009ad2:	4601      	mov	r1, r0
 8009ad4:	6818      	ldr	r0, [r3, #0]
 8009ad6:	f000 b80b 	b.w	8009af0 <_free_r>
 8009ada:	bf00      	nop
 8009adc:	20000048 	.word	0x20000048

08009ae0 <memset>:
 8009ae0:	4402      	add	r2, r0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d100      	bne.n	8009aea <memset+0xa>
 8009ae8:	4770      	bx	lr
 8009aea:	f803 1b01 	strb.w	r1, [r3], #1
 8009aee:	e7f9      	b.n	8009ae4 <memset+0x4>

08009af0 <_free_r>:
 8009af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009af2:	2900      	cmp	r1, #0
 8009af4:	d048      	beq.n	8009b88 <_free_r+0x98>
 8009af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009afa:	9001      	str	r0, [sp, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f1a1 0404 	sub.w	r4, r1, #4
 8009b02:	bfb8      	it	lt
 8009b04:	18e4      	addlt	r4, r4, r3
 8009b06:	f000 f8ad 	bl	8009c64 <__malloc_lock>
 8009b0a:	4a20      	ldr	r2, [pc, #128]	; (8009b8c <_free_r+0x9c>)
 8009b0c:	9801      	ldr	r0, [sp, #4]
 8009b0e:	6813      	ldr	r3, [r2, #0]
 8009b10:	4615      	mov	r5, r2
 8009b12:	b933      	cbnz	r3, 8009b22 <_free_r+0x32>
 8009b14:	6063      	str	r3, [r4, #4]
 8009b16:	6014      	str	r4, [r2, #0]
 8009b18:	b003      	add	sp, #12
 8009b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b1e:	f000 b8a7 	b.w	8009c70 <__malloc_unlock>
 8009b22:	42a3      	cmp	r3, r4
 8009b24:	d90b      	bls.n	8009b3e <_free_r+0x4e>
 8009b26:	6821      	ldr	r1, [r4, #0]
 8009b28:	1862      	adds	r2, r4, r1
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	bf04      	itt	eq
 8009b2e:	681a      	ldreq	r2, [r3, #0]
 8009b30:	685b      	ldreq	r3, [r3, #4]
 8009b32:	6063      	str	r3, [r4, #4]
 8009b34:	bf04      	itt	eq
 8009b36:	1852      	addeq	r2, r2, r1
 8009b38:	6022      	streq	r2, [r4, #0]
 8009b3a:	602c      	str	r4, [r5, #0]
 8009b3c:	e7ec      	b.n	8009b18 <_free_r+0x28>
 8009b3e:	461a      	mov	r2, r3
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	b10b      	cbz	r3, 8009b48 <_free_r+0x58>
 8009b44:	42a3      	cmp	r3, r4
 8009b46:	d9fa      	bls.n	8009b3e <_free_r+0x4e>
 8009b48:	6811      	ldr	r1, [r2, #0]
 8009b4a:	1855      	adds	r5, r2, r1
 8009b4c:	42a5      	cmp	r5, r4
 8009b4e:	d10b      	bne.n	8009b68 <_free_r+0x78>
 8009b50:	6824      	ldr	r4, [r4, #0]
 8009b52:	4421      	add	r1, r4
 8009b54:	1854      	adds	r4, r2, r1
 8009b56:	42a3      	cmp	r3, r4
 8009b58:	6011      	str	r1, [r2, #0]
 8009b5a:	d1dd      	bne.n	8009b18 <_free_r+0x28>
 8009b5c:	681c      	ldr	r4, [r3, #0]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	6053      	str	r3, [r2, #4]
 8009b62:	4421      	add	r1, r4
 8009b64:	6011      	str	r1, [r2, #0]
 8009b66:	e7d7      	b.n	8009b18 <_free_r+0x28>
 8009b68:	d902      	bls.n	8009b70 <_free_r+0x80>
 8009b6a:	230c      	movs	r3, #12
 8009b6c:	6003      	str	r3, [r0, #0]
 8009b6e:	e7d3      	b.n	8009b18 <_free_r+0x28>
 8009b70:	6825      	ldr	r5, [r4, #0]
 8009b72:	1961      	adds	r1, r4, r5
 8009b74:	428b      	cmp	r3, r1
 8009b76:	bf04      	itt	eq
 8009b78:	6819      	ldreq	r1, [r3, #0]
 8009b7a:	685b      	ldreq	r3, [r3, #4]
 8009b7c:	6063      	str	r3, [r4, #4]
 8009b7e:	bf04      	itt	eq
 8009b80:	1949      	addeq	r1, r1, r5
 8009b82:	6021      	streq	r1, [r4, #0]
 8009b84:	6054      	str	r4, [r2, #4]
 8009b86:	e7c7      	b.n	8009b18 <_free_r+0x28>
 8009b88:	b003      	add	sp, #12
 8009b8a:	bd30      	pop	{r4, r5, pc}
 8009b8c:	200000d0 	.word	0x200000d0

08009b90 <_malloc_r>:
 8009b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b92:	1ccd      	adds	r5, r1, #3
 8009b94:	f025 0503 	bic.w	r5, r5, #3
 8009b98:	3508      	adds	r5, #8
 8009b9a:	2d0c      	cmp	r5, #12
 8009b9c:	bf38      	it	cc
 8009b9e:	250c      	movcc	r5, #12
 8009ba0:	2d00      	cmp	r5, #0
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	db01      	blt.n	8009baa <_malloc_r+0x1a>
 8009ba6:	42a9      	cmp	r1, r5
 8009ba8:	d903      	bls.n	8009bb2 <_malloc_r+0x22>
 8009baa:	230c      	movs	r3, #12
 8009bac:	6033      	str	r3, [r6, #0]
 8009bae:	2000      	movs	r0, #0
 8009bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bb2:	f000 f857 	bl	8009c64 <__malloc_lock>
 8009bb6:	4921      	ldr	r1, [pc, #132]	; (8009c3c <_malloc_r+0xac>)
 8009bb8:	680a      	ldr	r2, [r1, #0]
 8009bba:	4614      	mov	r4, r2
 8009bbc:	b99c      	cbnz	r4, 8009be6 <_malloc_r+0x56>
 8009bbe:	4f20      	ldr	r7, [pc, #128]	; (8009c40 <_malloc_r+0xb0>)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	b923      	cbnz	r3, 8009bce <_malloc_r+0x3e>
 8009bc4:	4621      	mov	r1, r4
 8009bc6:	4630      	mov	r0, r6
 8009bc8:	f000 f83c 	bl	8009c44 <_sbrk_r>
 8009bcc:	6038      	str	r0, [r7, #0]
 8009bce:	4629      	mov	r1, r5
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f000 f837 	bl	8009c44 <_sbrk_r>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d123      	bne.n	8009c22 <_malloc_r+0x92>
 8009bda:	230c      	movs	r3, #12
 8009bdc:	6033      	str	r3, [r6, #0]
 8009bde:	4630      	mov	r0, r6
 8009be0:	f000 f846 	bl	8009c70 <__malloc_unlock>
 8009be4:	e7e3      	b.n	8009bae <_malloc_r+0x1e>
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	1b5b      	subs	r3, r3, r5
 8009bea:	d417      	bmi.n	8009c1c <_malloc_r+0x8c>
 8009bec:	2b0b      	cmp	r3, #11
 8009bee:	d903      	bls.n	8009bf8 <_malloc_r+0x68>
 8009bf0:	6023      	str	r3, [r4, #0]
 8009bf2:	441c      	add	r4, r3
 8009bf4:	6025      	str	r5, [r4, #0]
 8009bf6:	e004      	b.n	8009c02 <_malloc_r+0x72>
 8009bf8:	6863      	ldr	r3, [r4, #4]
 8009bfa:	42a2      	cmp	r2, r4
 8009bfc:	bf0c      	ite	eq
 8009bfe:	600b      	streq	r3, [r1, #0]
 8009c00:	6053      	strne	r3, [r2, #4]
 8009c02:	4630      	mov	r0, r6
 8009c04:	f000 f834 	bl	8009c70 <__malloc_unlock>
 8009c08:	f104 000b 	add.w	r0, r4, #11
 8009c0c:	1d23      	adds	r3, r4, #4
 8009c0e:	f020 0007 	bic.w	r0, r0, #7
 8009c12:	1ac2      	subs	r2, r0, r3
 8009c14:	d0cc      	beq.n	8009bb0 <_malloc_r+0x20>
 8009c16:	1a1b      	subs	r3, r3, r0
 8009c18:	50a3      	str	r3, [r4, r2]
 8009c1a:	e7c9      	b.n	8009bb0 <_malloc_r+0x20>
 8009c1c:	4622      	mov	r2, r4
 8009c1e:	6864      	ldr	r4, [r4, #4]
 8009c20:	e7cc      	b.n	8009bbc <_malloc_r+0x2c>
 8009c22:	1cc4      	adds	r4, r0, #3
 8009c24:	f024 0403 	bic.w	r4, r4, #3
 8009c28:	42a0      	cmp	r0, r4
 8009c2a:	d0e3      	beq.n	8009bf4 <_malloc_r+0x64>
 8009c2c:	1a21      	subs	r1, r4, r0
 8009c2e:	4630      	mov	r0, r6
 8009c30:	f000 f808 	bl	8009c44 <_sbrk_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d1dd      	bne.n	8009bf4 <_malloc_r+0x64>
 8009c38:	e7cf      	b.n	8009bda <_malloc_r+0x4a>
 8009c3a:	bf00      	nop
 8009c3c:	200000d0 	.word	0x200000d0
 8009c40:	200000d4 	.word	0x200000d4

08009c44 <_sbrk_r>:
 8009c44:	b538      	push	{r3, r4, r5, lr}
 8009c46:	4d06      	ldr	r5, [pc, #24]	; (8009c60 <_sbrk_r+0x1c>)
 8009c48:	2300      	movs	r3, #0
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	4608      	mov	r0, r1
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	f7f7 fad4 	bl	80011fc <_sbrk>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d102      	bne.n	8009c5e <_sbrk_r+0x1a>
 8009c58:	682b      	ldr	r3, [r5, #0]
 8009c5a:	b103      	cbz	r3, 8009c5e <_sbrk_r+0x1a>
 8009c5c:	6023      	str	r3, [r4, #0]
 8009c5e:	bd38      	pop	{r3, r4, r5, pc}
 8009c60:	20000c44 	.word	0x20000c44

08009c64 <__malloc_lock>:
 8009c64:	4801      	ldr	r0, [pc, #4]	; (8009c6c <__malloc_lock+0x8>)
 8009c66:	f000 b809 	b.w	8009c7c <__retarget_lock_acquire_recursive>
 8009c6a:	bf00      	nop
 8009c6c:	20000c4c 	.word	0x20000c4c

08009c70 <__malloc_unlock>:
 8009c70:	4801      	ldr	r0, [pc, #4]	; (8009c78 <__malloc_unlock+0x8>)
 8009c72:	f000 b804 	b.w	8009c7e <__retarget_lock_release_recursive>
 8009c76:	bf00      	nop
 8009c78:	20000c4c 	.word	0x20000c4c

08009c7c <__retarget_lock_acquire_recursive>:
 8009c7c:	4770      	bx	lr

08009c7e <__retarget_lock_release_recursive>:
 8009c7e:	4770      	bx	lr

08009c80 <_init>:
 8009c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c82:	bf00      	nop
 8009c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c86:	bc08      	pop	{r3}
 8009c88:	469e      	mov	lr, r3
 8009c8a:	4770      	bx	lr

08009c8c <_fini>:
 8009c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c8e:	bf00      	nop
 8009c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c92:	bc08      	pop	{r3}
 8009c94:	469e      	mov	lr, r3
 8009c96:	4770      	bx	lr
